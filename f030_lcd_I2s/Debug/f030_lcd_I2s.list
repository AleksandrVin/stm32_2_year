
f030_lcd_I2s.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014b0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001570  08001570  00011570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015c0  080015c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080015c0  080015c0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015c0  080015c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015c0  080015c0  000115c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015c4  080015c4  000115c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080015c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  080015d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  080015d4  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000914f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001779  00000000  00000000  00029183  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005673  00000000  00000000  0002a8fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000668  00000000  00000000  0002ff70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000630  00000000  00000000  000305d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000bbda  00000000  00000000  00030c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00006bdf  00000000  00000000  0003c7e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000404e8  00000000  00000000  000433c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000838a9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000103c  00000000  00000000  00083924  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001558 	.word	0x08001558

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001558 	.word	0x08001558

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <LCD_WriteByteI2CLCD>:
extern I2C_HandleTypeDef hi2c1;
char str1[100];
uint8_t portlcd;  // data of port in LCD

void LCD_WriteByteI2CLCD(uint8_t bt)
{
 8000220:	b500      	push	{lr}
 8000222:	b083      	sub	sp, #12
	buf[0] = bt;
 8000224:	4a05      	ldr	r2, [pc, #20]	; (800023c <LCD_WriteByteI2CLCD+0x1c>)
 8000226:	7010      	strb	r0, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x4E, buf, 1, 1000);
 8000228:	23fa      	movs	r3, #250	; 0xfa
 800022a:	009b      	lsls	r3, r3, #2
 800022c:	9300      	str	r3, [sp, #0]
 800022e:	2301      	movs	r3, #1
 8000230:	214e      	movs	r1, #78	; 0x4e
 8000232:	4803      	ldr	r0, [pc, #12]	; (8000240 <LCD_WriteByteI2CLCD+0x20>)
 8000234:	f000 fcb0 	bl	8000b98 <HAL_I2C_Master_Transmit>
}
 8000238:	b003      	add	sp, #12
 800023a:	bd00      	pop	{pc}
 800023c:	20000028 	.word	0x20000028
 8000240:	20000094 	.word	0x20000094

08000244 <sendhalfbyte>:
	micros *= (SystemCoreClock / 1000000) / 5;
	while (micros--);
}

void sendhalfbyte(uint8_t c)
{
 8000244:	b570      	push	{r4, r5, r6, lr}
	c <<=4;
 8000246:	0100      	lsls	r0, r0, #4
 8000248:	b2c5      	uxtb	r5, r0
	e_set();
 800024a:	4b14      	ldr	r3, [pc, #80]	; (800029c <sendhalfbyte+0x58>)
 800024c:	7818      	ldrb	r0, [r3, #0]
 800024e:	2204      	movs	r2, #4
 8000250:	4310      	orrs	r0, r2
 8000252:	7018      	strb	r0, [r3, #0]
 8000254:	f7ff ffe4 	bl	8000220 <LCD_WriteByteI2CLCD>
 8000258:	2432      	movs	r4, #50	; 0x32
	micros *= (SystemCoreClock / 1000000) / 5;
 800025a:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <sendhalfbyte+0x5c>)
 800025c:	6818      	ldr	r0, [r3, #0]
 800025e:	4911      	ldr	r1, [pc, #68]	; (80002a4 <sendhalfbyte+0x60>)
 8000260:	f7ff ff52 	bl	8000108 <__udivsi3>
 8000264:	4344      	muls	r4, r0
	while (micros--);
 8000266:	0023      	movs	r3, r4
 8000268:	3c01      	subs	r4, #1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d1fb      	bne.n	8000266 <sendhalfbyte+0x22>
	DelayMicro(50);
	LCD_WriteByteI2CLCD(portlcd | c);
 800026e:	4c0b      	ldr	r4, [pc, #44]	; (800029c <sendhalfbyte+0x58>)
 8000270:	7820      	ldrb	r0, [r4, #0]
 8000272:	4328      	orrs	r0, r5
 8000274:	f7ff ffd4 	bl	8000220 <LCD_WriteByteI2CLCD>
	e_reset();
 8000278:	7820      	ldrb	r0, [r4, #0]
 800027a:	2304      	movs	r3, #4
 800027c:	4398      	bics	r0, r3
 800027e:	7020      	strb	r0, [r4, #0]
 8000280:	f7ff ffce 	bl	8000220 <LCD_WriteByteI2CLCD>
 8000284:	2432      	movs	r4, #50	; 0x32
	micros *= (SystemCoreClock / 1000000) / 5;
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <sendhalfbyte+0x5c>)
 8000288:	6818      	ldr	r0, [r3, #0]
 800028a:	4906      	ldr	r1, [pc, #24]	; (80002a4 <sendhalfbyte+0x60>)
 800028c:	f7ff ff3c 	bl	8000108 <__udivsi3>
 8000290:	4344      	muls	r4, r0
	while (micros--);
 8000292:	0023      	movs	r3, r4
 8000294:	3c01      	subs	r4, #1
 8000296:	2b00      	cmp	r3, #0
 8000298:	d1fb      	bne.n	8000292 <sendhalfbyte+0x4e>
	DelayMicro(50);
}
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	2000002c 	.word	0x2000002c
 80002a0:	20000000 	.word	0x20000000
 80002a4:	004c4b40 	.word	0x004c4b40

080002a8 <sendbyte>:

void sendbyte(uint8_t c, uint8_t mode)
{
 80002a8:	b510      	push	{r4, lr}
 80002aa:	0004      	movs	r4, r0
	if (mode == 0)
 80002ac:	2900      	cmp	r1, #0
 80002ae:	d00d      	beq.n	80002cc <sendbyte+0x24>
	{
		rs_reset();
	}
	else
	{
		rs_set();
 80002b0:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <sendbyte+0x34>)
 80002b2:	7818      	ldrb	r0, [r3, #0]
 80002b4:	2201      	movs	r2, #1
 80002b6:	4310      	orrs	r0, r2
 80002b8:	7018      	strb	r0, [r3, #0]
 80002ba:	f7ff ffb1 	bl	8000220 <LCD_WriteByteI2CLCD>
	}
	uint8_t hc = 0;
	hc = c >> 4;
 80002be:	0920      	lsrs	r0, r4, #4
	sendhalfbyte(hc);
 80002c0:	f7ff ffc0 	bl	8000244 <sendhalfbyte>
	sendhalfbyte(c);
 80002c4:	0020      	movs	r0, r4
 80002c6:	f7ff ffbd 	bl	8000244 <sendhalfbyte>
}
 80002ca:	bd10      	pop	{r4, pc}
		rs_reset();
 80002cc:	4b03      	ldr	r3, [pc, #12]	; (80002dc <sendbyte+0x34>)
 80002ce:	7818      	ldrb	r0, [r3, #0]
 80002d0:	2201      	movs	r2, #1
 80002d2:	4390      	bics	r0, r2
 80002d4:	7018      	strb	r0, [r3, #0]
 80002d6:	f7ff ffa3 	bl	8000220 <LCD_WriteByteI2CLCD>
 80002da:	e7f0      	b.n	80002be <sendbyte+0x16>
 80002dc:	2000002c 	.word	0x2000002c

080002e0 <LCD_Clear>:

void LCD_Clear(void)
{
 80002e0:	b510      	push	{r4, lr}
	sendbyte(0x01, 0);
 80002e2:	2100      	movs	r1, #0
 80002e4:	2001      	movs	r0, #1
 80002e6:	f7ff ffdf 	bl	80002a8 <sendbyte>
	HAL_Delay(2);
 80002ea:	2002      	movs	r0, #2
 80002ec:	f000 f9ec 	bl	80006c8 <HAL_Delay>
}
 80002f0:	bd10      	pop	{r4, pc}

080002f2 <LCD_SetPos>:
{
	sendbyte(ch, 1);
}

void LCD_SetPos(uint8_t x, uint8_t y)
{
 80002f2:	b510      	push	{r4, lr}
	switch (y)
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d002      	beq.n	80002fe <LCD_SetPos+0xc>
 80002f8:	2901      	cmp	r1, #1
 80002fa:	d00b      	beq.n	8000314 <LCD_SetPos+0x22>
	case 1:
		sendbyte((x + 0x40) | 0x80, 0);
		HAL_Delay(1);
		break;
	}
}
 80002fc:	bd10      	pop	{r4, pc}
		sendbyte(x | 0x80, 0);
 80002fe:	2380      	movs	r3, #128	; 0x80
 8000300:	425b      	negs	r3, r3
 8000302:	4318      	orrs	r0, r3
 8000304:	b2c0      	uxtb	r0, r0
 8000306:	2100      	movs	r1, #0
 8000308:	f7ff ffce 	bl	80002a8 <sendbyte>
		HAL_Delay(1);
 800030c:	2001      	movs	r0, #1
 800030e:	f000 f9db 	bl	80006c8 <HAL_Delay>
		break;
 8000312:	e7f3      	b.n	80002fc <LCD_SetPos+0xa>
		sendbyte((x + 0x40) | 0x80, 0);
 8000314:	3040      	adds	r0, #64	; 0x40
 8000316:	b240      	sxtb	r0, r0
 8000318:	2380      	movs	r3, #128	; 0x80
 800031a:	425b      	negs	r3, r3
 800031c:	4318      	orrs	r0, r3
 800031e:	b2c0      	uxtb	r0, r0
 8000320:	2100      	movs	r1, #0
 8000322:	f7ff ffc1 	bl	80002a8 <sendbyte>
		HAL_Delay(1);
 8000326:	2001      	movs	r0, #1
 8000328:	f000 f9ce 	bl	80006c8 <HAL_Delay>
}
 800032c:	e7e6      	b.n	80002fc <LCD_SetPos+0xa>
	...

08000330 <LCD_ini>:

void LCD_ini(void)
{
 8000330:	b510      	push	{r4, lr}
	HAL_Delay(15);
 8000332:	200f      	movs	r0, #15
 8000334:	f000 f9c8 	bl	80006c8 <HAL_Delay>
	sendhalfbyte(0x03);
 8000338:	2003      	movs	r0, #3
 800033a:	f7ff ff83 	bl	8000244 <sendhalfbyte>
	HAL_Delay(4);
 800033e:	2004      	movs	r0, #4
 8000340:	f000 f9c2 	bl	80006c8 <HAL_Delay>
	sendhalfbyte(0x03);
 8000344:	2003      	movs	r0, #3
 8000346:	f7ff ff7d 	bl	8000244 <sendhalfbyte>
 800034a:	2464      	movs	r4, #100	; 0x64
	micros *= (SystemCoreClock / 1000000) / 5;
 800034c:	4b1f      	ldr	r3, [pc, #124]	; (80003cc <LCD_ini+0x9c>)
 800034e:	6818      	ldr	r0, [r3, #0]
 8000350:	491f      	ldr	r1, [pc, #124]	; (80003d0 <LCD_ini+0xa0>)
 8000352:	f7ff fed9 	bl	8000108 <__udivsi3>
 8000356:	4344      	muls	r4, r0
	while (micros--);
 8000358:	0023      	movs	r3, r4
 800035a:	3c01      	subs	r4, #1
 800035c:	2b00      	cmp	r3, #0
 800035e:	d1fb      	bne.n	8000358 <LCD_ini+0x28>
	DelayMicro(100);
	sendhalfbyte(0x03);
 8000360:	2003      	movs	r0, #3
 8000362:	f7ff ff6f 	bl	8000244 <sendhalfbyte>
	HAL_Delay(1);
 8000366:	2001      	movs	r0, #1
 8000368:	f000 f9ae 	bl	80006c8 <HAL_Delay>
	sendhalfbyte(0x02);
 800036c:	2002      	movs	r0, #2
 800036e:	f7ff ff69 	bl	8000244 <sendhalfbyte>
	HAL_Delay(1);
 8000372:	2001      	movs	r0, #1
 8000374:	f000 f9a8 	bl	80006c8 <HAL_Delay>
	sendbyte(0x28,0);//режим 4 бит, 2 линии (дл¤ нашего большого диспле¤ это 4 линии, шрифт 5х8
 8000378:	2100      	movs	r1, #0
 800037a:	2028      	movs	r0, #40	; 0x28
 800037c:	f7ff ff94 	bl	80002a8 <sendbyte>
	HAL_Delay(1);
 8000380:	2001      	movs	r0, #1
 8000382:	f000 f9a1 	bl	80006c8 <HAL_Delay>
	sendbyte(0x0C,0);//дисплей включаем (D=1), курсоры никакие не нужны
 8000386:	2100      	movs	r1, #0
 8000388:	200c      	movs	r0, #12
 800038a:	f7ff ff8d 	bl	80002a8 <sendbyte>
	HAL_Delay(1);
 800038e:	2001      	movs	r0, #1
 8000390:	f000 f99a 	bl	80006c8 <HAL_Delay>
	sendbyte(0x01,0);//уберем мусор
 8000394:	2100      	movs	r1, #0
 8000396:	2001      	movs	r0, #1
 8000398:	f7ff ff86 	bl	80002a8 <sendbyte>
	HAL_Delay(2);
 800039c:	2002      	movs	r0, #2
 800039e:	f000 f993 	bl	80006c8 <HAL_Delay>
	sendbyte(0x06,0);//пишем влево
 80003a2:	2100      	movs	r1, #0
 80003a4:	2006      	movs	r0, #6
 80003a6:	f7ff ff7f 	bl	80002a8 <sendbyte>
	HAL_Delay(1);
 80003aa:	2001      	movs	r0, #1
 80003ac:	f000 f98c 	bl	80006c8 <HAL_Delay>
	setled();//подсветка
 80003b0:	4c08      	ldr	r4, [pc, #32]	; (80003d4 <LCD_ini+0xa4>)
 80003b2:	7820      	ldrb	r0, [r4, #0]
 80003b4:	2308      	movs	r3, #8
 80003b6:	4318      	orrs	r0, r3
 80003b8:	7020      	strb	r0, [r4, #0]
 80003ba:	f7ff ff31 	bl	8000220 <LCD_WriteByteI2CLCD>
	setwrite();//запись
 80003be:	7820      	ldrb	r0, [r4, #0]
 80003c0:	2302      	movs	r3, #2
 80003c2:	4398      	bics	r0, r3
 80003c4:	7020      	strb	r0, [r4, #0]
 80003c6:	f7ff ff2b 	bl	8000220 <LCD_WriteByteI2CLCD>
}
 80003ca:	bd10      	pop	{r4, pc}
 80003cc:	20000000 	.word	0x20000000
 80003d0:	004c4b40 	.word	0x004c4b40
 80003d4:	2000002c 	.word	0x2000002c

080003d8 <LCD_String>:

void LCD_String(char *str)
{
 80003d8:	b570      	push	{r4, r5, r6, lr}
 80003da:	0005      	movs	r5, r0
	uint8_t i = 0;
 80003dc:	2400      	movs	r4, #0
	while (str[i] != 0)
 80003de:	e004      	b.n	80003ea <LCD_String+0x12>
	{
		sendbyte(str[i], 1);
 80003e0:	2101      	movs	r1, #1
 80003e2:	f7ff ff61 	bl	80002a8 <sendbyte>
		i++;
 80003e6:	3401      	adds	r4, #1
 80003e8:	b2e4      	uxtb	r4, r4
	while (str[i] != 0)
 80003ea:	5d28      	ldrb	r0, [r5, r4]
 80003ec:	2800      	cmp	r0, #0
 80003ee:	d1f7      	bne.n	80003e0 <LCD_String+0x8>
	}
}
 80003f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080003f4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80003f4:	b082      	sub	sp, #8

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80003f6:	4b0a      	ldr	r3, [pc, #40]	; (8000420 <MX_GPIO_Init+0x2c>)
 80003f8:	6959      	ldr	r1, [r3, #20]
 80003fa:	2080      	movs	r0, #128	; 0x80
 80003fc:	03c0      	lsls	r0, r0, #15
 80003fe:	4301      	orrs	r1, r0
 8000400:	6159      	str	r1, [r3, #20]
 8000402:	695a      	ldr	r2, [r3, #20]
 8000404:	4002      	ands	r2, r0
 8000406:	9200      	str	r2, [sp, #0]
 8000408:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800040a:	695a      	ldr	r2, [r3, #20]
 800040c:	2180      	movs	r1, #128	; 0x80
 800040e:	0289      	lsls	r1, r1, #10
 8000410:	430a      	orrs	r2, r1
 8000412:	615a      	str	r2, [r3, #20]
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	400b      	ands	r3, r1
 8000418:	9301      	str	r3, [sp, #4]
 800041a:	9b01      	ldr	r3, [sp, #4]

}
 800041c:	b002      	add	sp, #8
 800041e:	4770      	bx	lr
 8000420:	40021000 	.word	0x40021000

08000424 <MX_I2C1_Init>:
{
 8000424:	b510      	push	{r4, lr}
	hi2c1.Instance = I2C1;
 8000426:	4c0d      	ldr	r4, [pc, #52]	; (800045c <MX_I2C1_Init+0x38>)
 8000428:	4b0d      	ldr	r3, [pc, #52]	; (8000460 <MX_I2C1_Init+0x3c>)
 800042a:	6023      	str	r3, [r4, #0]
	hi2c1.Init.Timing = 0x20303E5D;
 800042c:	4b0d      	ldr	r3, [pc, #52]	; (8000464 <MX_I2C1_Init+0x40>)
 800042e:	6063      	str	r3, [r4, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000430:	2300      	movs	r3, #0
 8000432:	60a3      	str	r3, [r4, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000434:	2201      	movs	r2, #1
 8000436:	60e2      	str	r2, [r4, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000438:	6123      	str	r3, [r4, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800043a:	6163      	str	r3, [r4, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800043c:	61a3      	str	r3, [r4, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800043e:	61e3      	str	r3, [r4, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000440:	6223      	str	r3, [r4, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000442:	0020      	movs	r0, r4
 8000444:	f000 fb42 	bl	8000acc <HAL_I2C_Init>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000448:	2100      	movs	r1, #0
 800044a:	0020      	movs	r0, r4
 800044c:	f000 fc5a 	bl	8000d04 <HAL_I2CEx_ConfigAnalogFilter>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000450:	2100      	movs	r1, #0
 8000452:	0020      	movs	r0, r4
 8000454:	f000 fc82 	bl	8000d5c <HAL_I2CEx_ConfigDigitalFilter>
}
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	20000094 	.word	0x20000094
 8000460:	40005400 	.word	0x40005400
 8000464:	20303e5d 	.word	0x20303e5d

08000468 <SystemClock_Config>:
{
 8000468:	b510      	push	{r4, lr}
 800046a:	b094      	sub	sp, #80	; 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800046c:	2218      	movs	r2, #24
 800046e:	2100      	movs	r1, #0
 8000470:	a80a      	add	r0, sp, #40	; 0x28
 8000472:	f001 f869 	bl	8001548 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000476:	2210      	movs	r2, #16
 8000478:	2100      	movs	r1, #0
 800047a:	a804      	add	r0, sp, #16
 800047c:	f001 f864 	bl	8001548 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000480:	2210      	movs	r2, #16
 8000482:	2100      	movs	r1, #0
 8000484:	4668      	mov	r0, sp
 8000486:	f001 f85f 	bl	8001548 <memset>
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800048a:	2301      	movs	r3, #1
 800048c:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800048e:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000490:	2402      	movs	r4, #2
 8000492:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000494:	2280      	movs	r2, #128	; 0x80
 8000496:	0252      	lsls	r2, r2, #9
 8000498:	9211      	str	r2, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800049a:	22a0      	movs	r2, #160	; 0xa0
 800049c:	0392      	lsls	r2, r2, #14
 800049e:	9212      	str	r2, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80004a0:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a2:	a808      	add	r0, sp, #32
 80004a4:	f000 fc84 	bl	8000db0 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80004a8:	2307      	movs	r3, #7
 80004aa:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ac:	9405      	str	r4, [sp, #20]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ae:	2300      	movs	r3, #0
 80004b0:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b2:	9307      	str	r3, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004b4:	2101      	movs	r1, #1
 80004b6:	a804      	add	r0, sp, #16
 80004b8:	f000 fefe 	bl	80012b8 <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80004bc:	2320      	movs	r3, #32
 80004be:	9300      	str	r3, [sp, #0]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 80004c0:	3b10      	subs	r3, #16
 80004c2:	9303      	str	r3, [sp, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004c4:	4668      	mov	r0, sp
 80004c6:	f000 ff8f 	bl	80013e8 <HAL_RCCEx_PeriphCLKConfig>
}
 80004ca:	b014      	add	sp, #80	; 0x50
 80004cc:	bd10      	pop	{r4, pc}
	...

080004d0 <main>:
{
 80004d0:	b510      	push	{r4, lr}
	HAL_Init();
 80004d2:	f000 f8d7 	bl	8000684 <HAL_Init>
	SystemClock_Config();
 80004d6:	f7ff ffc7 	bl	8000468 <SystemClock_Config>
	MX_GPIO_Init();
 80004da:	f7ff ff8b 	bl	80003f4 <MX_GPIO_Init>
	MX_I2C1_Init();
 80004de:	f7ff ffa1 	bl	8000424 <MX_I2C1_Init>
	LCD_ini();
 80004e2:	f7ff ff25 	bl	8000330 <LCD_ini>
		LCD_SetPos(0, 0);
 80004e6:	2100      	movs	r1, #0
 80004e8:	2000      	movs	r0, #0
 80004ea:	f7ff ff02 	bl	80002f2 <LCD_SetPos>
		LCD_String("Hello world");
 80004ee:	480d      	ldr	r0, [pc, #52]	; (8000524 <main+0x54>)
 80004f0:	f7ff ff72 	bl	80003d8 <LCD_String>
		LCD_SetPos(0, 1);
 80004f4:	2101      	movs	r1, #1
 80004f6:	2000      	movs	r0, #0
 80004f8:	f7ff fefb 	bl	80002f2 <LCD_SetPos>
		LCD_String("I'm coming");
 80004fc:	480a      	ldr	r0, [pc, #40]	; (8000528 <main+0x58>)
 80004fe:	f7ff ff6b 	bl	80003d8 <LCD_String>
		HAL_Delay(2000);
 8000502:	24fa      	movs	r4, #250	; 0xfa
 8000504:	00e4      	lsls	r4, r4, #3
 8000506:	0020      	movs	r0, r4
 8000508:	f000 f8de 	bl	80006c8 <HAL_Delay>
		LCD_String(" to Y");
 800050c:	4807      	ldr	r0, [pc, #28]	; (800052c <main+0x5c>)
 800050e:	f7ff ff63 	bl	80003d8 <LCD_String>
		HAL_Delay(2000);
 8000512:	0020      	movs	r0, r4
 8000514:	f000 f8d8 	bl	80006c8 <HAL_Delay>
		LCD_Clear();
 8000518:	f7ff fee2 	bl	80002e0 <LCD_Clear>
		HAL_Delay(2000);
 800051c:	0020      	movs	r0, r4
 800051e:	f000 f8d3 	bl	80006c8 <HAL_Delay>
 8000522:	e7e0      	b.n	80004e6 <main+0x16>
 8000524:	08001590 	.word	0x08001590
 8000528:	0800159c 	.word	0x0800159c
 800052c:	080015a8 	.word	0x080015a8

08000530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000530:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000532:	4b0a      	ldr	r3, [pc, #40]	; (800055c <HAL_MspInit+0x2c>)
 8000534:	6999      	ldr	r1, [r3, #24]
 8000536:	2201      	movs	r2, #1
 8000538:	4311      	orrs	r1, r2
 800053a:	6199      	str	r1, [r3, #24]
 800053c:	6999      	ldr	r1, [r3, #24]
 800053e:	400a      	ands	r2, r1
 8000540:	9200      	str	r2, [sp, #0]
 8000542:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	69da      	ldr	r2, [r3, #28]
 8000546:	2180      	movs	r1, #128	; 0x80
 8000548:	0549      	lsls	r1, r1, #21
 800054a:	430a      	orrs	r2, r1
 800054c:	61da      	str	r2, [r3, #28]
 800054e:	69db      	ldr	r3, [r3, #28]
 8000550:	400b      	ands	r3, r1
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000556:	b002      	add	sp, #8
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	40021000 	.word	0x40021000

08000560 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000560:	b510      	push	{r4, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	2214      	movs	r2, #20
 8000568:	2100      	movs	r1, #0
 800056a:	a803      	add	r0, sp, #12
 800056c:	f000 ffec 	bl	8001548 <memset>
  if(hi2c->Instance==I2C1)
 8000570:	6822      	ldr	r2, [r4, #0]
 8000572:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <HAL_I2C_MspInit+0x64>)
 8000574:	429a      	cmp	r2, r3
 8000576:	d001      	beq.n	800057c <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000578:	b008      	add	sp, #32
 800057a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800057c:	4c12      	ldr	r4, [pc, #72]	; (80005c8 <HAL_I2C_MspInit+0x68>)
 800057e:	6962      	ldr	r2, [r4, #20]
 8000580:	2180      	movs	r1, #128	; 0x80
 8000582:	0289      	lsls	r1, r1, #10
 8000584:	430a      	orrs	r2, r1
 8000586:	6162      	str	r2, [r4, #20]
 8000588:	6963      	ldr	r3, [r4, #20]
 800058a:	400b      	ands	r3, r1
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000590:	23c0      	movs	r3, #192	; 0xc0
 8000592:	00db      	lsls	r3, r3, #3
 8000594:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000596:	2312      	movs	r3, #18
 8000598:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800059a:	3b11      	subs	r3, #17
 800059c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059e:	3302      	adds	r3, #2
 80005a0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005a2:	3301      	adds	r3, #1
 80005a4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a6:	2090      	movs	r0, #144	; 0x90
 80005a8:	a903      	add	r1, sp, #12
 80005aa:	05c0      	lsls	r0, r0, #23
 80005ac:	f000 f8ec 	bl	8000788 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005b0:	69e2      	ldr	r2, [r4, #28]
 80005b2:	2180      	movs	r1, #128	; 0x80
 80005b4:	0389      	lsls	r1, r1, #14
 80005b6:	430a      	orrs	r2, r1
 80005b8:	61e2      	str	r2, [r4, #28]
 80005ba:	69e3      	ldr	r3, [r4, #28]
 80005bc:	400b      	ands	r3, r1
 80005be:	9302      	str	r3, [sp, #8]
 80005c0:	9b02      	ldr	r3, [sp, #8]
}
 80005c2:	e7d9      	b.n	8000578 <HAL_I2C_MspInit+0x18>
 80005c4:	40005400 	.word	0x40005400
 80005c8:	40021000 	.word	0x40021000

080005cc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005cc:	4770      	bx	lr

080005ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ce:	e7fe      	b.n	80005ce <HardFault_Handler>

080005d0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005d0:	4770      	bx	lr

080005d2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005d2:	4770      	bx	lr

080005d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d6:	f000 f865 	bl	80006a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005da:	bd10      	pop	{r4, pc}

080005dc <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005dc:	4770      	bx	lr
	...

080005e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005e0:	480d      	ldr	r0, [pc, #52]	; (8000618 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e4:	480d      	ldr	r0, [pc, #52]	; (800061c <LoopForever+0x6>)
  ldr r1, =_edata
 80005e6:	490e      	ldr	r1, [pc, #56]	; (8000620 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005e8:	4a0e      	ldr	r2, [pc, #56]	; (8000624 <LoopForever+0xe>)
  movs r3, #0
 80005ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ec:	e002      	b.n	80005f4 <LoopCopyDataInit>

080005ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f2:	3304      	adds	r3, #4

080005f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f8:	d3f9      	bcc.n	80005ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fa:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005fc:	4c0b      	ldr	r4, [pc, #44]	; (800062c <LoopForever+0x16>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000600:	e001      	b.n	8000606 <LoopFillZerobss>

08000602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000604:	3204      	adds	r2, #4

08000606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000608:	d3fb      	bcc.n	8000602 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800060a:	f7ff ffe7 	bl	80005dc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800060e:	f000 ff77 	bl	8001500 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000612:	f7ff ff5d 	bl	80004d0 <main>

08000616 <LoopForever>:

LoopForever:
    b LoopForever
 8000616:	e7fe      	b.n	8000616 <LoopForever>
  ldr   r0, =_estack
 8000618:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800061c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000620:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000624:	080015c8 	.word	0x080015c8
  ldr r2, =_sbss
 8000628:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800062c:	200000e4 	.word	0x200000e4

08000630 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000630:	e7fe      	b.n	8000630 <ADC1_IRQHandler>
	...

08000634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000634:	b510      	push	{r4, lr}
 8000636:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <HAL_InitTick+0x44>)
 800063a:	7819      	ldrb	r1, [r3, #0]
 800063c:	20fa      	movs	r0, #250	; 0xfa
 800063e:	0080      	lsls	r0, r0, #2
 8000640:	f7ff fd62 	bl	8000108 <__udivsi3>
 8000644:	0001      	movs	r1, r0
 8000646:	4b0d      	ldr	r3, [pc, #52]	; (800067c <HAL_InitTick+0x48>)
 8000648:	6818      	ldr	r0, [r3, #0]
 800064a:	f7ff fd5d 	bl	8000108 <__udivsi3>
 800064e:	f000 f87f 	bl	8000750 <HAL_SYSTICK_Config>
 8000652:	2800      	cmp	r0, #0
 8000654:	d10d      	bne.n	8000672 <HAL_InitTick+0x3e>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000656:	2c03      	cmp	r4, #3
 8000658:	d901      	bls.n	800065e <HAL_InitTick+0x2a>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800065a:	2001      	movs	r0, #1
 800065c:	e00a      	b.n	8000674 <HAL_InitTick+0x40>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800065e:	3001      	adds	r0, #1
 8000660:	2200      	movs	r2, #0
 8000662:	0021      	movs	r1, r4
 8000664:	4240      	negs	r0, r0
 8000666:	f000 f841 	bl	80006ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800066a:	4b05      	ldr	r3, [pc, #20]	; (8000680 <HAL_InitTick+0x4c>)
 800066c:	601c      	str	r4, [r3, #0]
  }

   /* Return function status */
  return HAL_OK;
 800066e:	2000      	movs	r0, #0
 8000670:	e000      	b.n	8000674 <HAL_InitTick+0x40>
    return HAL_ERROR;
 8000672:	2001      	movs	r0, #1
}
 8000674:	bd10      	pop	{r4, pc}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	20000004 	.word	0x20000004
 800067c:	20000000 	.word	0x20000000
 8000680:	20000008 	.word	0x20000008

08000684 <HAL_Init>:
{
 8000684:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000686:	4a06      	ldr	r2, [pc, #24]	; (80006a0 <HAL_Init+0x1c>)
 8000688:	6813      	ldr	r3, [r2, #0]
 800068a:	2110      	movs	r1, #16
 800068c:	430b      	orrs	r3, r1
 800068e:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff ffcf 	bl	8000634 <HAL_InitTick>
  HAL_MspInit();
 8000696:	f7ff ff4b 	bl	8000530 <HAL_MspInit>
}
 800069a:	2000      	movs	r0, #0
 800069c:	bd10      	pop	{r4, pc}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	40022000 	.word	0x40022000

080006a4 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006a4:	4a03      	ldr	r2, [pc, #12]	; (80006b4 <HAL_IncTick+0x10>)
 80006a6:	6811      	ldr	r1, [r2, #0]
 80006a8:	4b03      	ldr	r3, [pc, #12]	; (80006b8 <HAL_IncTick+0x14>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	185b      	adds	r3, r3, r1
 80006ae:	6013      	str	r3, [r2, #0]
}
 80006b0:	4770      	bx	lr
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	200000e0 	.word	0x200000e0
 80006b8:	20000004 	.word	0x20000004

080006bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006bc:	4b01      	ldr	r3, [pc, #4]	; (80006c4 <HAL_GetTick+0x8>)
 80006be:	6818      	ldr	r0, [r3, #0]
}
 80006c0:	4770      	bx	lr
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	200000e0 	.word	0x200000e0

080006c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006c8:	b570      	push	{r4, r5, r6, lr}
 80006ca:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80006cc:	f7ff fff6 	bl	80006bc <HAL_GetTick>
 80006d0:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006d2:	1c63      	adds	r3, r4, #1
 80006d4:	d002      	beq.n	80006dc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <HAL_Delay+0x20>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006dc:	f7ff ffee 	bl	80006bc <HAL_GetTick>
 80006e0:	1b40      	subs	r0, r0, r5
 80006e2:	42a0      	cmp	r0, r4
 80006e4:	d3fa      	bcc.n	80006dc <HAL_Delay+0x14>
  {
  }
}
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	20000004 	.word	0x20000004

080006ec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006ec:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80006ee:	2800      	cmp	r0, #0
 80006f0:	db11      	blt.n	8000716 <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006f2:	0883      	lsrs	r3, r0, #2
 80006f4:	4d14      	ldr	r5, [pc, #80]	; (8000748 <HAL_NVIC_SetPriority+0x5c>)
 80006f6:	33c0      	adds	r3, #192	; 0xc0
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	595c      	ldr	r4, [r3, r5]
 80006fc:	2203      	movs	r2, #3
 80006fe:	4010      	ands	r0, r2
 8000700:	00c0      	lsls	r0, r0, #3
 8000702:	32fc      	adds	r2, #252	; 0xfc
 8000704:	0016      	movs	r6, r2
 8000706:	4086      	lsls	r6, r0
 8000708:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800070a:	0189      	lsls	r1, r1, #6
 800070c:	400a      	ands	r2, r1
 800070e:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000710:	4322      	orrs	r2, r4
 8000712:	515a      	str	r2, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000714:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000716:	b2c0      	uxtb	r0, r0
 8000718:	230f      	movs	r3, #15
 800071a:	4003      	ands	r3, r0
 800071c:	3b08      	subs	r3, #8
 800071e:	089b      	lsrs	r3, r3, #2
 8000720:	3306      	adds	r3, #6
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	4a09      	ldr	r2, [pc, #36]	; (800074c <HAL_NVIC_SetPriority+0x60>)
 8000726:	4694      	mov	ip, r2
 8000728:	4463      	add	r3, ip
 800072a:	685d      	ldr	r5, [r3, #4]
 800072c:	2403      	movs	r4, #3
 800072e:	4020      	ands	r0, r4
 8000730:	00c0      	lsls	r0, r0, #3
 8000732:	22ff      	movs	r2, #255	; 0xff
 8000734:	0014      	movs	r4, r2
 8000736:	4084      	lsls	r4, r0
 8000738:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800073a:	0189      	lsls	r1, r1, #6
 800073c:	4011      	ands	r1, r2
 800073e:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000740:	4329      	orrs	r1, r5
 8000742:	6059      	str	r1, [r3, #4]
 8000744:	e7e6      	b.n	8000714 <HAL_NVIC_SetPriority+0x28>
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	e000e100 	.word	0xe000e100
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000750:	3801      	subs	r0, #1
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <HAL_SYSTICK_Config+0x2c>)
 8000754:	4298      	cmp	r0, r3
 8000756:	d80f      	bhi.n	8000778 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000758:	4a09      	ldr	r2, [pc, #36]	; (8000780 <HAL_SYSTICK_Config+0x30>)
 800075a:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800075c:	4809      	ldr	r0, [pc, #36]	; (8000784 <HAL_SYSTICK_Config+0x34>)
 800075e:	6a03      	ldr	r3, [r0, #32]
 8000760:	021b      	lsls	r3, r3, #8
 8000762:	0a1b      	lsrs	r3, r3, #8
 8000764:	21c0      	movs	r1, #192	; 0xc0
 8000766:	0609      	lsls	r1, r1, #24
 8000768:	430b      	orrs	r3, r1
 800076a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800076c:	2300      	movs	r3, #0
 800076e:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000770:	3307      	adds	r3, #7
 8000772:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000774:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000776:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000778:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 800077a:	e7fc      	b.n	8000776 <HAL_SYSTICK_Config+0x26>
 800077c:	00ffffff 	.word	0x00ffffff
 8000780:	e000e010 	.word	0xe000e010
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800078a:	46c6      	mov	lr, r8
 800078c:	b500      	push	{lr}
 800078e:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
 8000790:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000792:	e038      	b.n	8000806 <HAL_GPIO_Init+0x7e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000794:	2603      	movs	r6, #3
 8000796:	e000      	b.n	800079a <HAL_GPIO_Init+0x12>
 8000798:	2600      	movs	r6, #0
 800079a:	40ae      	lsls	r6, r5
 800079c:	0035      	movs	r5, r6
 800079e:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80007a0:	3402      	adds	r4, #2
 80007a2:	00a4      	lsls	r4, r4, #2
 80007a4:	4e55      	ldr	r6, [pc, #340]	; (80008fc <HAL_GPIO_Init+0x174>)
 80007a6:	51a5      	str	r5, [r4, r6]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80007a8:	4c55      	ldr	r4, [pc, #340]	; (8000900 <HAL_GPIO_Init+0x178>)
 80007aa:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80007ac:	4642      	mov	r2, r8
 80007ae:	43d4      	mvns	r4, r2
 80007b0:	002e      	movs	r6, r5
 80007b2:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007b4:	684a      	ldr	r2, [r1, #4]
 80007b6:	03d2      	lsls	r2, r2, #15
 80007b8:	d502      	bpl.n	80007c0 <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 80007ba:	4642      	mov	r2, r8
 80007bc:	4315      	orrs	r5, r2
 80007be:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 80007c0:	4d4f      	ldr	r5, [pc, #316]	; (8000900 <HAL_GPIO_Init+0x178>)
 80007c2:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 80007c4:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80007c6:	002e      	movs	r6, r5
 80007c8:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007ca:	684a      	ldr	r2, [r1, #4]
 80007cc:	0392      	lsls	r2, r2, #14
 80007ce:	d502      	bpl.n	80007d6 <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 80007d0:	4642      	mov	r2, r8
 80007d2:	4315      	orrs	r5, r2
 80007d4:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 80007d6:	4d4a      	ldr	r5, [pc, #296]	; (8000900 <HAL_GPIO_Init+0x178>)
 80007d8:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007da:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 80007dc:	002e      	movs	r6, r5
 80007de:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007e0:	684a      	ldr	r2, [r1, #4]
 80007e2:	02d2      	lsls	r2, r2, #11
 80007e4:	d502      	bpl.n	80007ec <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 80007e6:	4642      	mov	r2, r8
 80007e8:	4315      	orrs	r5, r2
 80007ea:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 80007ec:	4d44      	ldr	r5, [pc, #272]	; (8000900 <HAL_GPIO_Init+0x178>)
 80007ee:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 80007f0:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 80007f2:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007f4:	684a      	ldr	r2, [r1, #4]
 80007f6:	0292      	lsls	r2, r2, #10
 80007f8:	d502      	bpl.n	8000800 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 80007fa:	4642      	mov	r2, r8
 80007fc:	432a      	orrs	r2, r5
 80007fe:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 8000800:	4a3f      	ldr	r2, [pc, #252]	; (8000900 <HAL_GPIO_Init+0x178>)
 8000802:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8000804:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000806:	680a      	ldr	r2, [r1, #0]
 8000808:	0014      	movs	r4, r2
 800080a:	40dc      	lsrs	r4, r3
 800080c:	d071      	beq.n	80008f2 <HAL_GPIO_Init+0x16a>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800080e:	2501      	movs	r5, #1
 8000810:	409d      	lsls	r5, r3
 8000812:	402a      	ands	r2, r5
 8000814:	4690      	mov	r8, r2
    if (iocurrent != 0x00u)
 8000816:	d0f5      	beq.n	8000804 <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000818:	684c      	ldr	r4, [r1, #4]
 800081a:	2c02      	cmp	r4, #2
 800081c:	d001      	beq.n	8000822 <HAL_GPIO_Init+0x9a>
 800081e:	2c12      	cmp	r4, #18
 8000820:	d10e      	bne.n	8000840 <HAL_GPIO_Init+0xb8>
        temp = GPIOx->AFR[position >> 3u];
 8000822:	08dc      	lsrs	r4, r3, #3
 8000824:	3408      	adds	r4, #8
 8000826:	00a4      	lsls	r4, r4, #2
 8000828:	5827      	ldr	r7, [r4, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800082a:	2607      	movs	r6, #7
 800082c:	401e      	ands	r6, r3
 800082e:	00b6      	lsls	r6, r6, #2
 8000830:	220f      	movs	r2, #15
 8000832:	40b2      	lsls	r2, r6
 8000834:	4397      	bics	r7, r2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000836:	690a      	ldr	r2, [r1, #16]
 8000838:	40b2      	lsls	r2, r6
 800083a:	0016      	movs	r6, r2
 800083c:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3u] = temp;
 800083e:	5026      	str	r6, [r4, r0]
      temp = GPIOx->MODER;
 8000840:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000842:	005f      	lsls	r7, r3, #1
 8000844:	2403      	movs	r4, #3
 8000846:	0026      	movs	r6, r4
 8000848:	40be      	lsls	r6, r7
 800084a:	43f6      	mvns	r6, r6
 800084c:	4032      	ands	r2, r6
 800084e:	4694      	mov	ip, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000850:	684a      	ldr	r2, [r1, #4]
 8000852:	4014      	ands	r4, r2
 8000854:	40bc      	lsls	r4, r7
 8000856:	4662      	mov	r2, ip
 8000858:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 800085a:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800085c:	684c      	ldr	r4, [r1, #4]
 800085e:	1e62      	subs	r2, r4, #1
 8000860:	2a01      	cmp	r2, #1
 8000862:	d903      	bls.n	800086c <HAL_GPIO_Init+0xe4>
 8000864:	2c11      	cmp	r4, #17
 8000866:	d001      	beq.n	800086c <HAL_GPIO_Init+0xe4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000868:	2c12      	cmp	r4, #18
 800086a:	d110      	bne.n	800088e <HAL_GPIO_Init+0x106>
        temp = GPIOx->OSPEEDR;
 800086c:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800086e:	4034      	ands	r4, r6
 8000870:	46a4      	mov	ip, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000872:	68cc      	ldr	r4, [r1, #12]
 8000874:	40bc      	lsls	r4, r7
 8000876:	4662      	mov	r2, ip
 8000878:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 800087a:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800087c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800087e:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000880:	684a      	ldr	r2, [r1, #4]
 8000882:	0912      	lsrs	r2, r2, #4
 8000884:	2501      	movs	r5, #1
 8000886:	4015      	ands	r5, r2
 8000888:	409d      	lsls	r5, r3
 800088a:	4325      	orrs	r5, r4
        GPIOx->OTYPER = temp;
 800088c:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 800088e:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000890:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000892:	688c      	ldr	r4, [r1, #8]
 8000894:	40bc      	lsls	r4, r7
 8000896:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 8000898:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800089a:	684a      	ldr	r2, [r1, #4]
 800089c:	00d2      	lsls	r2, r2, #3
 800089e:	d5b1      	bpl.n	8000804 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a0:	4d18      	ldr	r5, [pc, #96]	; (8000904 <HAL_GPIO_Init+0x17c>)
 80008a2:	69ae      	ldr	r6, [r5, #24]
 80008a4:	2401      	movs	r4, #1
 80008a6:	4326      	orrs	r6, r4
 80008a8:	61ae      	str	r6, [r5, #24]
 80008aa:	69ad      	ldr	r5, [r5, #24]
 80008ac:	402c      	ands	r4, r5
 80008ae:	9401      	str	r4, [sp, #4]
 80008b0:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80008b2:	089c      	lsrs	r4, r3, #2
 80008b4:	1ca5      	adds	r5, r4, #2
 80008b6:	00ad      	lsls	r5, r5, #2
 80008b8:	4e10      	ldr	r6, [pc, #64]	; (80008fc <HAL_GPIO_Init+0x174>)
 80008ba:	59af      	ldr	r7, [r5, r6]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80008bc:	2503      	movs	r5, #3
 80008be:	401d      	ands	r5, r3
 80008c0:	00ad      	lsls	r5, r5, #2
 80008c2:	260f      	movs	r6, #15
 80008c4:	40ae      	lsls	r6, r5
 80008c6:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80008c8:	2690      	movs	r6, #144	; 0x90
 80008ca:	05f6      	lsls	r6, r6, #23
 80008cc:	42b0      	cmp	r0, r6
 80008ce:	d100      	bne.n	80008d2 <HAL_GPIO_Init+0x14a>
 80008d0:	e762      	b.n	8000798 <HAL_GPIO_Init+0x10>
 80008d2:	4e0d      	ldr	r6, [pc, #52]	; (8000908 <HAL_GPIO_Init+0x180>)
 80008d4:	42b0      	cmp	r0, r6
 80008d6:	d008      	beq.n	80008ea <HAL_GPIO_Init+0x162>
 80008d8:	4e0c      	ldr	r6, [pc, #48]	; (800090c <HAL_GPIO_Init+0x184>)
 80008da:	42b0      	cmp	r0, r6
 80008dc:	d007      	beq.n	80008ee <HAL_GPIO_Init+0x166>
 80008de:	4e0c      	ldr	r6, [pc, #48]	; (8000910 <HAL_GPIO_Init+0x188>)
 80008e0:	42b0      	cmp	r0, r6
 80008e2:	d100      	bne.n	80008e6 <HAL_GPIO_Init+0x15e>
 80008e4:	e756      	b.n	8000794 <HAL_GPIO_Init+0xc>
 80008e6:	2605      	movs	r6, #5
 80008e8:	e757      	b.n	800079a <HAL_GPIO_Init+0x12>
 80008ea:	2601      	movs	r6, #1
 80008ec:	e755      	b.n	800079a <HAL_GPIO_Init+0x12>
 80008ee:	2602      	movs	r6, #2
 80008f0:	e753      	b.n	800079a <HAL_GPIO_Init+0x12>
  } 
}
 80008f2:	b002      	add	sp, #8
 80008f4:	bc04      	pop	{r2}
 80008f6:	4690      	mov	r8, r2
 80008f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	40010000 	.word	0x40010000
 8000900:	40010400 	.word	0x40010400
 8000904:	40021000 	.word	0x40021000
 8000908:	48000400 	.word	0x48000400
 800090c:	48000800 	.word	0x48000800
 8000910:	48000c00 	.word	0x48000c00

08000914 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000914:	6803      	ldr	r3, [r0, #0]
 8000916:	699a      	ldr	r2, [r3, #24]
 8000918:	0792      	lsls	r2, r2, #30
 800091a:	d501      	bpl.n	8000920 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800091c:	2200      	movs	r2, #0
 800091e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000920:	6803      	ldr	r3, [r0, #0]
 8000922:	699a      	ldr	r2, [r3, #24]
 8000924:	07d2      	lsls	r2, r2, #31
 8000926:	d403      	bmi.n	8000930 <I2C_Flush_TXDR+0x1c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000928:	699a      	ldr	r2, [r3, #24]
 800092a:	2101      	movs	r1, #1
 800092c:	430a      	orrs	r2, r1
 800092e:	619a      	str	r2, [r3, #24]
  }
}
 8000930:	4770      	bx	lr
	...

08000934 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000936:	9c05      	ldr	r4, [sp, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000938:	6805      	ldr	r5, [r0, #0]
 800093a:	6868      	ldr	r0, [r5, #4]
 800093c:	0d66      	lsrs	r6, r4, #21
 800093e:	2780      	movs	r7, #128	; 0x80
 8000940:	00ff      	lsls	r7, r7, #3
 8000942:	4037      	ands	r7, r6
 8000944:	4e05      	ldr	r6, [pc, #20]	; (800095c <I2C_TransferConfig+0x28>)
 8000946:	433e      	orrs	r6, r7
 8000948:	43b0      	bics	r0, r6
 800094a:	0589      	lsls	r1, r1, #22
 800094c:	0d89      	lsrs	r1, r1, #22
 800094e:	0412      	lsls	r2, r2, #16
 8000950:	4311      	orrs	r1, r2
 8000952:	430b      	orrs	r3, r1
 8000954:	4323      	orrs	r3, r4
 8000956:	4303      	orrs	r3, r0
 8000958:	606b      	str	r3, [r5, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800095a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800095c:	03ff63ff 	.word	0x03ff63ff

08000960 <I2C_IsAcknowledgeFailed>:
{
 8000960:	b570      	push	{r4, r5, r6, lr}
 8000962:	0004      	movs	r4, r0
 8000964:	000e      	movs	r6, r1
 8000966:	0015      	movs	r5, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000968:	6803      	ldr	r3, [r0, #0]
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	06db      	lsls	r3, r3, #27
 800096e:	d519      	bpl.n	80009a4 <I2C_IsAcknowledgeFailed+0x44>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000970:	6823      	ldr	r3, [r4, #0]
 8000972:	699a      	ldr	r2, [r3, #24]
 8000974:	0692      	lsls	r2, r2, #26
 8000976:	d417      	bmi.n	80009a8 <I2C_IsAcknowledgeFailed+0x48>
      if (Timeout != HAL_MAX_DELAY)
 8000978:	1c73      	adds	r3, r6, #1
 800097a:	d0f9      	beq.n	8000970 <I2C_IsAcknowledgeFailed+0x10>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800097c:	f7ff fe9e 	bl	80006bc <HAL_GetTick>
 8000980:	1b40      	subs	r0, r0, r5
 8000982:	42b0      	cmp	r0, r6
 8000984:	d801      	bhi.n	800098a <I2C_IsAcknowledgeFailed+0x2a>
 8000986:	2e00      	cmp	r6, #0
 8000988:	d1f2      	bne.n	8000970 <I2C_IsAcknowledgeFailed+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800098a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800098c:	2220      	movs	r2, #32
 800098e:	4313      	orrs	r3, r2
 8000990:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000992:	2341      	movs	r3, #65	; 0x41
 8000994:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000996:	2300      	movs	r3, #0
 8000998:	3222      	adds	r2, #34	; 0x22
 800099a:	54a3      	strb	r3, [r4, r2]
          __HAL_UNLOCK(hi2c);
 800099c:	3a02      	subs	r2, #2
 800099e:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 80009a0:	2001      	movs	r0, #1
 80009a2:	e01a      	b.n	80009da <I2C_IsAcknowledgeFailed+0x7a>
  return HAL_OK;
 80009a4:	2000      	movs	r0, #0
 80009a6:	e018      	b.n	80009da <I2C_IsAcknowledgeFailed+0x7a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80009a8:	2210      	movs	r2, #16
 80009aa:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80009ac:	6823      	ldr	r3, [r4, #0]
 80009ae:	2520      	movs	r5, #32
 80009b0:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80009b2:	0020      	movs	r0, r4
 80009b4:	f7ff ffae 	bl	8000914 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80009b8:	6822      	ldr	r2, [r4, #0]
 80009ba:	6853      	ldr	r3, [r2, #4]
 80009bc:	4907      	ldr	r1, [pc, #28]	; (80009dc <I2C_IsAcknowledgeFailed+0x7c>)
 80009be:	400b      	ands	r3, r1
 80009c0:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80009c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80009c4:	2204      	movs	r2, #4
 80009c6:	4313      	orrs	r3, r2
 80009c8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80009ca:	2341      	movs	r3, #65	; 0x41
 80009cc:	54e5      	strb	r5, [r4, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	323e      	adds	r2, #62	; 0x3e
 80009d2:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 80009d4:	3a02      	subs	r2, #2
 80009d6:	54a3      	strb	r3, [r4, r2]
    return HAL_ERROR;
 80009d8:	2001      	movs	r0, #1
}
 80009da:	bd70      	pop	{r4, r5, r6, pc}
 80009dc:	fe00e800 	.word	0xfe00e800

080009e0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80009e0:	b570      	push	{r4, r5, r6, lr}
 80009e2:	0004      	movs	r4, r0
 80009e4:	000d      	movs	r5, r1
 80009e6:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80009e8:	6823      	ldr	r3, [r4, #0]
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	079b      	lsls	r3, r3, #30
 80009ee:	d41c      	bmi.n	8000a2a <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80009f0:	0032      	movs	r2, r6
 80009f2:	0029      	movs	r1, r5
 80009f4:	0020      	movs	r0, r4
 80009f6:	f7ff ffb3 	bl	8000960 <I2C_IsAcknowledgeFailed>
 80009fa:	2800      	cmp	r0, #0
 80009fc:	d117      	bne.n	8000a2e <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80009fe:	1c6b      	adds	r3, r5, #1
 8000a00:	d0f2      	beq.n	80009e8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000a02:	f7ff fe5b 	bl	80006bc <HAL_GetTick>
 8000a06:	1b80      	subs	r0, r0, r6
 8000a08:	42a8      	cmp	r0, r5
 8000a0a:	d801      	bhi.n	8000a10 <I2C_WaitOnTXISFlagUntilTimeout+0x30>
 8000a0c:	2d00      	cmp	r5, #0
 8000a0e:	d1eb      	bne.n	80009e8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000a10:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a12:	2220      	movs	r2, #32
 8000a14:	4313      	orrs	r3, r2
 8000a16:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000a18:	2341      	movs	r3, #65	; 0x41
 8000a1a:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	3222      	adds	r2, #34	; 0x22
 8000a20:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8000a22:	3a02      	subs	r2, #2
 8000a24:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 8000a26:	2001      	movs	r0, #1
 8000a28:	e000      	b.n	8000a2c <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
  return HAL_OK;
 8000a2a:	2000      	movs	r0, #0
}
 8000a2c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000a2e:	2001      	movs	r0, #1
 8000a30:	e7fc      	b.n	8000a2c <I2C_WaitOnTXISFlagUntilTimeout+0x4c>

08000a32 <I2C_WaitOnFlagUntilTimeout>:
{
 8000a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a34:	0006      	movs	r6, r0
 8000a36:	000c      	movs	r4, r1
 8000a38:	0017      	movs	r7, r2
 8000a3a:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000a3c:	6833      	ldr	r3, [r6, #0]
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4023      	ands	r3, r4
 8000a42:	1b1b      	subs	r3, r3, r4
 8000a44:	425a      	negs	r2, r3
 8000a46:	4153      	adcs	r3, r2
 8000a48:	42bb      	cmp	r3, r7
 8000a4a:	d116      	bne.n	8000a7a <I2C_WaitOnFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8000a4c:	1c6b      	adds	r3, r5, #1
 8000a4e:	d0f5      	beq.n	8000a3c <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000a50:	f7ff fe34 	bl	80006bc <HAL_GetTick>
 8000a54:	9b06      	ldr	r3, [sp, #24]
 8000a56:	1ac0      	subs	r0, r0, r3
 8000a58:	42a8      	cmp	r0, r5
 8000a5a:	d801      	bhi.n	8000a60 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8000a5c:	2d00      	cmp	r5, #0
 8000a5e:	d1ed      	bne.n	8000a3c <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000a60:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000a62:	2220      	movs	r2, #32
 8000a64:	4313      	orrs	r3, r2
 8000a66:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000a68:	2341      	movs	r3, #65	; 0x41
 8000a6a:	54f2      	strb	r2, [r6, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	3222      	adds	r2, #34	; 0x22
 8000a70:	54b3      	strb	r3, [r6, r2]
        __HAL_UNLOCK(hi2c);
 8000a72:	3a02      	subs	r2, #2
 8000a74:	54b3      	strb	r3, [r6, r2]
        return HAL_ERROR;
 8000a76:	2001      	movs	r0, #1
 8000a78:	e000      	b.n	8000a7c <I2C_WaitOnFlagUntilTimeout+0x4a>
  return HAL_OK;
 8000a7a:	2000      	movs	r0, #0
}
 8000a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000a7e <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000a7e:	b570      	push	{r4, r5, r6, lr}
 8000a80:	0005      	movs	r5, r0
 8000a82:	000c      	movs	r4, r1
 8000a84:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000a86:	682b      	ldr	r3, [r5, #0]
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	069b      	lsls	r3, r3, #26
 8000a8c:	d41a      	bmi.n	8000ac4 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000a8e:	0032      	movs	r2, r6
 8000a90:	0021      	movs	r1, r4
 8000a92:	0028      	movs	r0, r5
 8000a94:	f7ff ff64 	bl	8000960 <I2C_IsAcknowledgeFailed>
 8000a98:	2800      	cmp	r0, #0
 8000a9a:	d115      	bne.n	8000ac8 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000a9c:	f7ff fe0e 	bl	80006bc <HAL_GetTick>
 8000aa0:	1b80      	subs	r0, r0, r6
 8000aa2:	42a0      	cmp	r0, r4
 8000aa4:	d801      	bhi.n	8000aaa <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8000aa6:	2c00      	cmp	r4, #0
 8000aa8:	d1ed      	bne.n	8000a86 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000aaa:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000aac:	2220      	movs	r2, #32
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000ab2:	2341      	movs	r3, #65	; 0x41
 8000ab4:	54ea      	strb	r2, [r5, r3]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	3222      	adds	r2, #34	; 0x22
 8000aba:	54ab      	strb	r3, [r5, r2]
      __HAL_UNLOCK(hi2c);
 8000abc:	3a02      	subs	r2, #2
 8000abe:	54ab      	strb	r3, [r5, r2]
      return HAL_ERROR;
 8000ac0:	2001      	movs	r0, #1
}
 8000ac2:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	e7fc      	b.n	8000ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
      return HAL_ERROR;
 8000ac8:	2001      	movs	r0, #1
 8000aca:	e7fa      	b.n	8000ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>

08000acc <HAL_I2C_Init>:
{
 8000acc:	b510      	push	{r4, lr}
 8000ace:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 8000ad0:	d059      	beq.n	8000b86 <HAL_I2C_Init+0xba>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ad2:	2341      	movs	r3, #65	; 0x41
 8000ad4:	5cc3      	ldrb	r3, [r0, r3]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d043      	beq.n	8000b62 <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ada:	2341      	movs	r3, #65	; 0x41
 8000adc:	2224      	movs	r2, #36	; 0x24
 8000ade:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8000ae0:	6822      	ldr	r2, [r4, #0]
 8000ae2:	6813      	ldr	r3, [r2, #0]
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	438b      	bics	r3, r1
 8000ae8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000aea:	6822      	ldr	r2, [r4, #0]
 8000aec:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <HAL_I2C_Init+0xc0>)
 8000aee:	6861      	ldr	r1, [r4, #4]
 8000af0:	400b      	ands	r3, r1
 8000af2:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000af4:	6822      	ldr	r2, [r4, #0]
 8000af6:	6893      	ldr	r3, [r2, #8]
 8000af8:	4925      	ldr	r1, [pc, #148]	; (8000b90 <HAL_I2C_Init+0xc4>)
 8000afa:	400b      	ands	r3, r1
 8000afc:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000afe:	68e3      	ldr	r3, [r4, #12]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d034      	beq.n	8000b6e <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000b04:	6822      	ldr	r2, [r4, #0]
 8000b06:	2384      	movs	r3, #132	; 0x84
 8000b08:	021b      	lsls	r3, r3, #8
 8000b0a:	68a1      	ldr	r1, [r4, #8]
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000b10:	68e3      	ldr	r3, [r4, #12]
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d032      	beq.n	8000b7c <HAL_I2C_Init+0xb0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000b16:	6822      	ldr	r2, [r4, #0]
 8000b18:	6851      	ldr	r1, [r2, #4]
 8000b1a:	4b1e      	ldr	r3, [pc, #120]	; (8000b94 <HAL_I2C_Init+0xc8>)
 8000b1c:	430b      	orrs	r3, r1
 8000b1e:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000b20:	6822      	ldr	r2, [r4, #0]
 8000b22:	68d3      	ldr	r3, [r2, #12]
 8000b24:	491a      	ldr	r1, [pc, #104]	; (8000b90 <HAL_I2C_Init+0xc4>)
 8000b26:	400b      	ands	r3, r1
 8000b28:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000b2a:	6923      	ldr	r3, [r4, #16]
 8000b2c:	6962      	ldr	r2, [r4, #20]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	69a2      	ldr	r2, [r4, #24]
 8000b32:	0212      	lsls	r2, r2, #8
 8000b34:	6821      	ldr	r1, [r4, #0]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000b3a:	6822      	ldr	r2, [r4, #0]
 8000b3c:	69e3      	ldr	r3, [r4, #28]
 8000b3e:	6a21      	ldr	r1, [r4, #32]
 8000b40:	430b      	orrs	r3, r1
 8000b42:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000b44:	6822      	ldr	r2, [r4, #0]
 8000b46:	6813      	ldr	r3, [r2, #0]
 8000b48:	2101      	movs	r1, #1
 8000b4a:	430b      	orrs	r3, r1
 8000b4c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000b52:	2241      	movs	r2, #65	; 0x41
 8000b54:	311f      	adds	r1, #31
 8000b56:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000b58:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b5a:	3201      	adds	r2, #1
 8000b5c:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8000b5e:	2000      	movs	r0, #0
}
 8000b60:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8000b62:	3340      	adds	r3, #64	; 0x40
 8000b64:	2200      	movs	r2, #0
 8000b66:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8000b68:	f7ff fcfa 	bl	8000560 <HAL_I2C_MspInit>
 8000b6c:	e7b5      	b.n	8000ada <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000b6e:	6822      	ldr	r2, [r4, #0]
 8000b70:	2380      	movs	r3, #128	; 0x80
 8000b72:	021b      	lsls	r3, r3, #8
 8000b74:	68a1      	ldr	r1, [r4, #8]
 8000b76:	430b      	orrs	r3, r1
 8000b78:	6093      	str	r3, [r2, #8]
 8000b7a:	e7c9      	b.n	8000b10 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000b7c:	6823      	ldr	r3, [r4, #0]
 8000b7e:	2280      	movs	r2, #128	; 0x80
 8000b80:	0112      	lsls	r2, r2, #4
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	e7c7      	b.n	8000b16 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8000b86:	2001      	movs	r0, #1
 8000b88:	e7ea      	b.n	8000b60 <HAL_I2C_Init+0x94>
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	f0ffffff 	.word	0xf0ffffff
 8000b90:	ffff7fff 	.word	0xffff7fff
 8000b94:	02008000 	.word	0x02008000

08000b98 <HAL_I2C_Master_Transmit>:
{
 8000b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	0005      	movs	r5, r0
 8000b9e:	9103      	str	r1, [sp, #12]
 8000ba0:	0017      	movs	r7, r2
 8000ba2:	001e      	movs	r6, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ba4:	2341      	movs	r3, #65	; 0x41
 8000ba6:	5cc3      	ldrb	r3, [r0, r3]
 8000ba8:	2b20      	cmp	r3, #32
 8000baa:	d000      	beq.n	8000bae <HAL_I2C_Master_Transmit+0x16>
 8000bac:	e099      	b.n	8000ce2 <HAL_I2C_Master_Transmit+0x14a>
    __HAL_LOCK(hi2c);
 8000bae:	3320      	adds	r3, #32
 8000bb0:	5cc3      	ldrb	r3, [r0, r3]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d100      	bne.n	8000bb8 <HAL_I2C_Master_Transmit+0x20>
 8000bb6:	e097      	b.n	8000ce8 <HAL_I2C_Master_Transmit+0x150>
 8000bb8:	2340      	movs	r3, #64	; 0x40
 8000bba:	2201      	movs	r2, #1
 8000bbc:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8000bbe:	f7ff fd7d 	bl	80006bc <HAL_GetTick>
 8000bc2:	0004      	movs	r4, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000bc4:	2180      	movs	r1, #128	; 0x80
 8000bc6:	9000      	str	r0, [sp, #0]
 8000bc8:	2319      	movs	r3, #25
 8000bca:	2201      	movs	r2, #1
 8000bcc:	0209      	lsls	r1, r1, #8
 8000bce:	0028      	movs	r0, r5
 8000bd0:	f7ff ff2f 	bl	8000a32 <I2C_WaitOnFlagUntilTimeout>
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	d000      	beq.n	8000bda <HAL_I2C_Master_Transmit+0x42>
 8000bd8:	e088      	b.n	8000cec <HAL_I2C_Master_Transmit+0x154>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000bda:	2341      	movs	r3, #65	; 0x41
 8000bdc:	2221      	movs	r2, #33	; 0x21
 8000bde:	54ea      	strb	r2, [r5, r3]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000be0:	3301      	adds	r3, #1
 8000be2:	3a11      	subs	r2, #17
 8000be4:	54ea      	strb	r2, [r5, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000bea:	626f      	str	r7, [r5, #36]	; 0x24
    hi2c->XferCount = Size;
 8000bec:	856e      	strh	r6, [r5, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000bee:	636b      	str	r3, [r5, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000bf0:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	2bff      	cmp	r3, #255	; 0xff
 8000bf6:	d90b      	bls.n	8000c10 <HAL_I2C_Master_Transmit+0x78>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000bf8:	23ff      	movs	r3, #255	; 0xff
 8000bfa:	852b      	strh	r3, [r5, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000bfc:	3b7f      	subs	r3, #127	; 0x7f
 8000bfe:	4a3f      	ldr	r2, [pc, #252]	; (8000cfc <HAL_I2C_Master_Transmit+0x164>)
 8000c00:	9200      	str	r2, [sp, #0]
 8000c02:	045b      	lsls	r3, r3, #17
 8000c04:	22ff      	movs	r2, #255	; 0xff
 8000c06:	9903      	ldr	r1, [sp, #12]
 8000c08:	0028      	movs	r0, r5
 8000c0a:	f7ff fe93 	bl	8000934 <I2C_TransferConfig>
 8000c0e:	e018      	b.n	8000c42 <HAL_I2C_Master_Transmit+0xaa>
      hi2c->XferSize = hi2c->XferCount;
 8000c10:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 8000c12:	b292      	uxth	r2, r2
 8000c14:	852a      	strh	r2, [r5, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000c16:	2380      	movs	r3, #128	; 0x80
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	4938      	ldr	r1, [pc, #224]	; (8000cfc <HAL_I2C_Master_Transmit+0x164>)
 8000c1c:	9100      	str	r1, [sp, #0]
 8000c1e:	049b      	lsls	r3, r3, #18
 8000c20:	9903      	ldr	r1, [sp, #12]
 8000c22:	0028      	movs	r0, r5
 8000c24:	f7ff fe86 	bl	8000934 <I2C_TransferConfig>
 8000c28:	e00b      	b.n	8000c42 <HAL_I2C_Master_Transmit+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8000c2a:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 8000c2c:	b292      	uxth	r2, r2
 8000c2e:	852a      	strh	r2, [r5, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	2100      	movs	r1, #0
 8000c36:	9100      	str	r1, [sp, #0]
 8000c38:	049b      	lsls	r3, r3, #18
 8000c3a:	9903      	ldr	r1, [sp, #12]
 8000c3c:	0028      	movs	r0, r5
 8000c3e:	f7ff fe79 	bl	8000934 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000c42:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d034      	beq.n	8000cb4 <HAL_I2C_Master_Transmit+0x11c>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c4a:	0022      	movs	r2, r4
 8000c4c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000c4e:	0028      	movs	r0, r5
 8000c50:	f7ff fec6 	bl	80009e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8000c54:	2800      	cmp	r0, #0
 8000c56:	d14b      	bne.n	8000cf0 <HAL_I2C_Master_Transmit+0x158>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000c58:	682b      	ldr	r3, [r5, #0]
 8000c5a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000c5c:	7812      	ldrb	r2, [r2, #0]
 8000c5e:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000c60:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000c62:	3301      	adds	r3, #1
 8000c64:	626b      	str	r3, [r5, #36]	; 0x24
      hi2c->XferCount--;
 8000c66:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	856b      	strh	r3, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 8000c6e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8000c70:	3b01      	subs	r3, #1
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	852b      	strh	r3, [r5, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000c76:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 8000c78:	b292      	uxth	r2, r2
 8000c7a:	2a00      	cmp	r2, #0
 8000c7c:	d0e1      	beq.n	8000c42 <HAL_I2C_Master_Transmit+0xaa>
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1df      	bne.n	8000c42 <HAL_I2C_Master_Transmit+0xaa>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000c82:	9400      	str	r4, [sp, #0]
 8000c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000c86:	2200      	movs	r2, #0
 8000c88:	2180      	movs	r1, #128	; 0x80
 8000c8a:	0028      	movs	r0, r5
 8000c8c:	f7ff fed1 	bl	8000a32 <I2C_WaitOnFlagUntilTimeout>
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d12f      	bne.n	8000cf4 <HAL_I2C_Master_Transmit+0x15c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000c94:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	2bff      	cmp	r3, #255	; 0xff
 8000c9a:	d9c6      	bls.n	8000c2a <HAL_I2C_Master_Transmit+0x92>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000c9c:	23ff      	movs	r3, #255	; 0xff
 8000c9e:	852b      	strh	r3, [r5, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000ca0:	3b7f      	subs	r3, #127	; 0x7f
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	9200      	str	r2, [sp, #0]
 8000ca6:	045b      	lsls	r3, r3, #17
 8000ca8:	32ff      	adds	r2, #255	; 0xff
 8000caa:	9903      	ldr	r1, [sp, #12]
 8000cac:	0028      	movs	r0, r5
 8000cae:	f7ff fe41 	bl	8000934 <I2C_TransferConfig>
 8000cb2:	e7c6      	b.n	8000c42 <HAL_I2C_Master_Transmit+0xaa>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000cb4:	0022      	movs	r2, r4
 8000cb6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000cb8:	0028      	movs	r0, r5
 8000cba:	f7ff fee0 	bl	8000a7e <I2C_WaitOnSTOPFlagUntilTimeout>
 8000cbe:	2800      	cmp	r0, #0
 8000cc0:	d11a      	bne.n	8000cf8 <HAL_I2C_Master_Transmit+0x160>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000cc2:	682b      	ldr	r3, [r5, #0]
 8000cc4:	2220      	movs	r2, #32
 8000cc6:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000cc8:	6829      	ldr	r1, [r5, #0]
 8000cca:	684b      	ldr	r3, [r1, #4]
 8000ccc:	4c0c      	ldr	r4, [pc, #48]	; (8000d00 <HAL_I2C_Master_Transmit+0x168>)
 8000cce:	4023      	ands	r3, r4
 8000cd0:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000cd2:	2341      	movs	r3, #65	; 0x41
 8000cd4:	54ea      	strb	r2, [r5, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	3222      	adds	r2, #34	; 0x22
 8000cda:	54ab      	strb	r3, [r5, r2]
    __HAL_UNLOCK(hi2c);
 8000cdc:	3a02      	subs	r2, #2
 8000cde:	54ab      	strb	r3, [r5, r2]
    return HAL_OK;
 8000ce0:	e000      	b.n	8000ce4 <HAL_I2C_Master_Transmit+0x14c>
    return HAL_BUSY;
 8000ce2:	2002      	movs	r0, #2
}
 8000ce4:	b005      	add	sp, #20
 8000ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8000ce8:	2002      	movs	r0, #2
 8000cea:	e7fb      	b.n	8000ce4 <HAL_I2C_Master_Transmit+0x14c>
      return HAL_ERROR;
 8000cec:	2001      	movs	r0, #1
 8000cee:	e7f9      	b.n	8000ce4 <HAL_I2C_Master_Transmit+0x14c>
        return HAL_ERROR;
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	e7f7      	b.n	8000ce4 <HAL_I2C_Master_Transmit+0x14c>
          return HAL_ERROR;
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	e7f5      	b.n	8000ce4 <HAL_I2C_Master_Transmit+0x14c>
      return HAL_ERROR;
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	e7f3      	b.n	8000ce4 <HAL_I2C_Master_Transmit+0x14c>
 8000cfc:	80002000 	.word	0x80002000
 8000d00:	fe00e800 	.word	0xfe00e800

08000d04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000d04:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d06:	2341      	movs	r3, #65	; 0x41
 8000d08:	5cc3      	ldrb	r3, [r0, r3]
 8000d0a:	2b20      	cmp	r3, #32
 8000d0c:	d120      	bne.n	8000d50 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d0e:	3320      	adds	r3, #32
 8000d10:	5cc3      	ldrb	r3, [r0, r3]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d01e      	beq.n	8000d54 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8000d16:	2440      	movs	r4, #64	; 0x40
 8000d18:	2201      	movs	r2, #1
 8000d1a:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d1c:	2541      	movs	r5, #65	; 0x41
 8000d1e:	2324      	movs	r3, #36	; 0x24
 8000d20:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d22:	6806      	ldr	r6, [r0, #0]
 8000d24:	6833      	ldr	r3, [r6, #0]
 8000d26:	4393      	bics	r3, r2
 8000d28:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000d2a:	6806      	ldr	r6, [r0, #0]
 8000d2c:	6833      	ldr	r3, [r6, #0]
 8000d2e:	4f0a      	ldr	r7, [pc, #40]	; (8000d58 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 8000d30:	403b      	ands	r3, r7
 8000d32:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000d34:	6806      	ldr	r6, [r0, #0]
 8000d36:	6833      	ldr	r3, [r6, #0]
 8000d38:	4319      	orrs	r1, r3
 8000d3a:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d3c:	6801      	ldr	r1, [r0, #0]
 8000d3e:	680b      	ldr	r3, [r1, #0]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000d44:	2320      	movs	r3, #32
 8000d46:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d48:	2300      	movs	r3, #0
 8000d4a:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	e000      	b.n	8000d52 <HAL_I2CEx_ConfigAnalogFilter+0x4e>
  }
  else
  {
    return HAL_BUSY;
 8000d50:	2002      	movs	r0, #2
  }
}
 8000d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8000d54:	2002      	movs	r0, #2
 8000d56:	e7fc      	b.n	8000d52 <HAL_I2CEx_ConfigAnalogFilter+0x4e>
 8000d58:	ffffefff 	.word	0xffffefff

08000d5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000d5c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d5e:	2341      	movs	r3, #65	; 0x41
 8000d60:	5cc3      	ldrb	r3, [r0, r3]
 8000d62:	2b20      	cmp	r3, #32
 8000d64:	d11e      	bne.n	8000da4 <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d66:	3320      	adds	r3, #32
 8000d68:	5cc3      	ldrb	r3, [r0, r3]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d01c      	beq.n	8000da8 <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 8000d6e:	2440      	movs	r4, #64	; 0x40
 8000d70:	2201      	movs	r2, #1
 8000d72:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d74:	2541      	movs	r5, #65	; 0x41
 8000d76:	2324      	movs	r3, #36	; 0x24
 8000d78:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d7a:	6806      	ldr	r6, [r0, #0]
 8000d7c:	6833      	ldr	r3, [r6, #0]
 8000d7e:	4393      	bics	r3, r2
 8000d80:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000d82:	6806      	ldr	r6, [r0, #0]
 8000d84:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000d86:	4f09      	ldr	r7, [pc, #36]	; (8000dac <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 8000d88:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000d8a:	0209      	lsls	r1, r1, #8
 8000d8c:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000d8e:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d90:	6801      	ldr	r1, [r0, #0]
 8000d92:	680b      	ldr	r3, [r1, #0]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000d98:	2320      	movs	r3, #32
 8000d9a:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8000da0:	2000      	movs	r0, #0
 8000da2:	e000      	b.n	8000da6 <HAL_I2CEx_ConfigDigitalFilter+0x4a>
  }
  else
  {
    return HAL_BUSY;
 8000da4:	2002      	movs	r0, #2
  }
}
 8000da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8000da8:	2002      	movs	r0, #2
 8000daa:	e7fc      	b.n	8000da6 <HAL_I2CEx_ConfigDigitalFilter+0x4a>
 8000dac:	fffff0ff 	.word	0xfffff0ff

08000db0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000db0:	b570      	push	{r4, r5, r6, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000db6:	d100      	bne.n	8000dba <HAL_RCC_OscConfig+0xa>
 8000db8:	e232      	b.n	8001220 <HAL_RCC_OscConfig+0x470>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dba:	6803      	ldr	r3, [r0, #0]
 8000dbc:	07db      	lsls	r3, r3, #31
 8000dbe:	d526      	bpl.n	8000e0e <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dc0:	4bae      	ldr	r3, [pc, #696]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	230c      	movs	r3, #12
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	d018      	beq.n	8000dfe <HAL_RCC_OscConfig+0x4e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dcc:	4bab      	ldr	r3, [pc, #684]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8000dce:	685a      	ldr	r2, [r3, #4]
 8000dd0:	230c      	movs	r3, #12
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	2b08      	cmp	r3, #8
 8000dd6:	d00e      	beq.n	8000df6 <HAL_RCC_OscConfig+0x46>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dd8:	6863      	ldr	r3, [r4, #4]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d03c      	beq.n	8000e58 <HAL_RCC_OscConfig+0xa8>
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d151      	bne.n	8000e86 <HAL_RCC_OscConfig+0xd6>
 8000de2:	4ba6      	ldr	r3, [pc, #664]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	49a6      	ldr	r1, [pc, #664]	; (8001080 <HAL_RCC_OscConfig+0x2d0>)
 8000de8:	400a      	ands	r2, r1
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	49a5      	ldr	r1, [pc, #660]	; (8001084 <HAL_RCC_OscConfig+0x2d4>)
 8000df0:	400a      	ands	r2, r1
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	e036      	b.n	8000e64 <HAL_RCC_OscConfig+0xb4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000df6:	4ba1      	ldr	r3, [pc, #644]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	03db      	lsls	r3, r3, #15
 8000dfc:	d5ec      	bpl.n	8000dd8 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dfe:	4b9f      	ldr	r3, [pc, #636]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	039b      	lsls	r3, r3, #14
 8000e04:	d503      	bpl.n	8000e0e <HAL_RCC_OscConfig+0x5e>
 8000e06:	6863      	ldr	r3, [r4, #4]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d100      	bne.n	8000e0e <HAL_RCC_OscConfig+0x5e>
 8000e0c:	e20b      	b.n	8001226 <HAL_RCC_OscConfig+0x476>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e0e:	6823      	ldr	r3, [r4, #0]
 8000e10:	079b      	lsls	r3, r3, #30
 8000e12:	d573      	bpl.n	8000efc <HAL_RCC_OscConfig+0x14c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e14:	4b99      	ldr	r3, [pc, #612]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	220c      	movs	r2, #12
 8000e1a:	421a      	tst	r2, r3
 8000e1c:	d05d      	beq.n	8000eda <HAL_RCC_OscConfig+0x12a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e1e:	4b97      	ldr	r3, [pc, #604]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8000e20:	685a      	ldr	r2, [r3, #4]
 8000e22:	230c      	movs	r3, #12
 8000e24:	4013      	ands	r3, r2
 8000e26:	2b08      	cmp	r3, #8
 8000e28:	d053      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x122>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e2a:	68e3      	ldr	r3, [r4, #12]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d100      	bne.n	8000e32 <HAL_RCC_OscConfig+0x82>
 8000e30:	e086      	b.n	8000f40 <HAL_RCC_OscConfig+0x190>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e32:	4a92      	ldr	r2, [pc, #584]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8000e34:	6813      	ldr	r3, [r2, #0]
 8000e36:	2101      	movs	r1, #1
 8000e38:	430b      	orrs	r3, r1
 8000e3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e3c:	f7ff fc3e 	bl	80006bc <HAL_GetTick>
 8000e40:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e42:	4b8e      	ldr	r3, [pc, #568]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	079b      	lsls	r3, r3, #30
 8000e48:	d471      	bmi.n	8000f2e <HAL_RCC_OscConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e4a:	f7ff fc37 	bl	80006bc <HAL_GetTick>
 8000e4e:	1b40      	subs	r0, r0, r5
 8000e50:	2802      	cmp	r0, #2
 8000e52:	d9f6      	bls.n	8000e42 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8000e54:	2003      	movs	r0, #3
 8000e56:	e1e4      	b.n	8001222 <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e58:	4a88      	ldr	r2, [pc, #544]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8000e5a:	6811      	ldr	r1, [r2, #0]
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	025b      	lsls	r3, r3, #9
 8000e60:	430b      	orrs	r3, r1
 8000e62:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e64:	6863      	ldr	r3, [r4, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d025      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8000e6a:	f7ff fc27 	bl	80006bc <HAL_GetTick>
 8000e6e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e70:	4b82      	ldr	r3, [pc, #520]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	039b      	lsls	r3, r3, #14
 8000e76:	d4ca      	bmi.n	8000e0e <HAL_RCC_OscConfig+0x5e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e78:	f7ff fc20 	bl	80006bc <HAL_GetTick>
 8000e7c:	1b40      	subs	r0, r0, r5
 8000e7e:	2864      	cmp	r0, #100	; 0x64
 8000e80:	d9f6      	bls.n	8000e70 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 8000e82:	2003      	movs	r0, #3
 8000e84:	e1cd      	b.n	8001222 <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e86:	2b05      	cmp	r3, #5
 8000e88:	d009      	beq.n	8000e9e <HAL_RCC_OscConfig+0xee>
 8000e8a:	4b7c      	ldr	r3, [pc, #496]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	497c      	ldr	r1, [pc, #496]	; (8001080 <HAL_RCC_OscConfig+0x2d0>)
 8000e90:	400a      	ands	r2, r1
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	497b      	ldr	r1, [pc, #492]	; (8001084 <HAL_RCC_OscConfig+0x2d4>)
 8000e98:	400a      	ands	r2, r1
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	e7e2      	b.n	8000e64 <HAL_RCC_OscConfig+0xb4>
 8000e9e:	4b77      	ldr	r3, [pc, #476]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8000ea0:	6819      	ldr	r1, [r3, #0]
 8000ea2:	2280      	movs	r2, #128	; 0x80
 8000ea4:	02d2      	lsls	r2, r2, #11
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	6819      	ldr	r1, [r3, #0]
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0252      	lsls	r2, r2, #9
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	e7d6      	b.n	8000e64 <HAL_RCC_OscConfig+0xb4>
        tickstart = HAL_GetTick();
 8000eb6:	f7ff fc01 	bl	80006bc <HAL_GetTick>
 8000eba:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ebc:	4b6f      	ldr	r3, [pc, #444]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	039b      	lsls	r3, r3, #14
 8000ec2:	d5a4      	bpl.n	8000e0e <HAL_RCC_OscConfig+0x5e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ec4:	f7ff fbfa 	bl	80006bc <HAL_GetTick>
 8000ec8:	1b40      	subs	r0, r0, r5
 8000eca:	2864      	cmp	r0, #100	; 0x64
 8000ecc:	d9f6      	bls.n	8000ebc <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 8000ece:	2003      	movs	r0, #3
 8000ed0:	e1a7      	b.n	8001222 <HAL_RCC_OscConfig+0x472>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ed2:	4b6a      	ldr	r3, [pc, #424]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	03db      	lsls	r3, r3, #15
 8000ed8:	d4a7      	bmi.n	8000e2a <HAL_RCC_OscConfig+0x7a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eda:	4b68      	ldr	r3, [pc, #416]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	079b      	lsls	r3, r3, #30
 8000ee0:	d504      	bpl.n	8000eec <HAL_RCC_OscConfig+0x13c>
 8000ee2:	68e3      	ldr	r3, [r4, #12]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d001      	beq.n	8000eec <HAL_RCC_OscConfig+0x13c>
        return HAL_ERROR;
 8000ee8:	2001      	movs	r0, #1
 8000eea:	e19a      	b.n	8001222 <HAL_RCC_OscConfig+0x472>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eec:	4963      	ldr	r1, [pc, #396]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8000eee:	680b      	ldr	r3, [r1, #0]
 8000ef0:	22f8      	movs	r2, #248	; 0xf8
 8000ef2:	4393      	bics	r3, r2
 8000ef4:	6922      	ldr	r2, [r4, #16]
 8000ef6:	00d2      	lsls	r2, r2, #3
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000efc:	6823      	ldr	r3, [r4, #0]
 8000efe:	071b      	lsls	r3, r3, #28
 8000f00:	d544      	bpl.n	8000f8c <HAL_RCC_OscConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f02:	69e3      	ldr	r3, [r4, #28]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d02e      	beq.n	8000f66 <HAL_RCC_OscConfig+0x1b6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f08:	4a5c      	ldr	r2, [pc, #368]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8000f0a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	430b      	orrs	r3, r1
 8000f10:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f12:	f7ff fbd3 	bl	80006bc <HAL_GetTick>
 8000f16:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f18:	4b58      	ldr	r3, [pc, #352]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8000f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1c:	079b      	lsls	r3, r3, #30
 8000f1e:	d435      	bmi.n	8000f8c <HAL_RCC_OscConfig+0x1dc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f20:	f7ff fbcc 	bl	80006bc <HAL_GetTick>
 8000f24:	1b40      	subs	r0, r0, r5
 8000f26:	2802      	cmp	r0, #2
 8000f28:	d9f6      	bls.n	8000f18 <HAL_RCC_OscConfig+0x168>
        {
          return HAL_TIMEOUT;
 8000f2a:	2003      	movs	r0, #3
 8000f2c:	e179      	b.n	8001222 <HAL_RCC_OscConfig+0x472>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f2e:	4953      	ldr	r1, [pc, #332]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8000f30:	680b      	ldr	r3, [r1, #0]
 8000f32:	22f8      	movs	r2, #248	; 0xf8
 8000f34:	4393      	bics	r3, r2
 8000f36:	6922      	ldr	r2, [r4, #16]
 8000f38:	00d2      	lsls	r2, r2, #3
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	600b      	str	r3, [r1, #0]
 8000f3e:	e7dd      	b.n	8000efc <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_DISABLE();
 8000f40:	4a4e      	ldr	r2, [pc, #312]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8000f42:	6813      	ldr	r3, [r2, #0]
 8000f44:	2101      	movs	r1, #1
 8000f46:	438b      	bics	r3, r1
 8000f48:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000f4a:	f7ff fbb7 	bl	80006bc <HAL_GetTick>
 8000f4e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f50:	4b4a      	ldr	r3, [pc, #296]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	079b      	lsls	r3, r3, #30
 8000f56:	d5d1      	bpl.n	8000efc <HAL_RCC_OscConfig+0x14c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f58:	f7ff fbb0 	bl	80006bc <HAL_GetTick>
 8000f5c:	1b40      	subs	r0, r0, r5
 8000f5e:	2802      	cmp	r0, #2
 8000f60:	d9f6      	bls.n	8000f50 <HAL_RCC_OscConfig+0x1a0>
            return HAL_TIMEOUT;
 8000f62:	2003      	movs	r0, #3
 8000f64:	e15d      	b.n	8001222 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f66:	4a45      	ldr	r2, [pc, #276]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8000f68:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	438b      	bics	r3, r1
 8000f6e:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f70:	f7ff fba4 	bl	80006bc <HAL_GetTick>
 8000f74:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f76:	4b41      	ldr	r3, [pc, #260]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8000f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7a:	079b      	lsls	r3, r3, #30
 8000f7c:	d506      	bpl.n	8000f8c <HAL_RCC_OscConfig+0x1dc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f7e:	f7ff fb9d 	bl	80006bc <HAL_GetTick>
 8000f82:	1b40      	subs	r0, r0, r5
 8000f84:	2802      	cmp	r0, #2
 8000f86:	d9f6      	bls.n	8000f76 <HAL_RCC_OscConfig+0x1c6>
        {
          return HAL_TIMEOUT;
 8000f88:	2003      	movs	r0, #3
 8000f8a:	e14a      	b.n	8001222 <HAL_RCC_OscConfig+0x472>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f8c:	6823      	ldr	r3, [r4, #0]
 8000f8e:	075b      	lsls	r3, r3, #29
 8000f90:	d400      	bmi.n	8000f94 <HAL_RCC_OscConfig+0x1e4>
 8000f92:	e07f      	b.n	8001094 <HAL_RCC_OscConfig+0x2e4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f94:	4b39      	ldr	r3, [pc, #228]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8000f96:	69db      	ldr	r3, [r3, #28]
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	d41d      	bmi.n	8000fd8 <HAL_RCC_OscConfig+0x228>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f9c:	4a37      	ldr	r2, [pc, #220]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8000f9e:	69d1      	ldr	r1, [r2, #28]
 8000fa0:	2080      	movs	r0, #128	; 0x80
 8000fa2:	0540      	lsls	r0, r0, #21
 8000fa4:	4301      	orrs	r1, r0
 8000fa6:	61d1      	str	r1, [r2, #28]
 8000fa8:	69d3      	ldr	r3, [r2, #28]
 8000faa:	4003      	ands	r3, r0
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000fb0:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb2:	4b35      	ldr	r3, [pc, #212]	; (8001088 <HAL_RCC_OscConfig+0x2d8>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	05db      	lsls	r3, r3, #23
 8000fb8:	d510      	bpl.n	8000fdc <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fba:	68a3      	ldr	r3, [r4, #8]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d021      	beq.n	8001004 <HAL_RCC_OscConfig+0x254>
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d136      	bne.n	8001032 <HAL_RCC_OscConfig+0x282>
 8000fc4:	4b2d      	ldr	r3, [pc, #180]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8000fc6:	6a1a      	ldr	r2, [r3, #32]
 8000fc8:	2101      	movs	r1, #1
 8000fca:	438a      	bics	r2, r1
 8000fcc:	621a      	str	r2, [r3, #32]
 8000fce:	6a1a      	ldr	r2, [r3, #32]
 8000fd0:	3103      	adds	r1, #3
 8000fd2:	438a      	bics	r2, r1
 8000fd4:	621a      	str	r2, [r3, #32]
 8000fd6:	e01a      	b.n	800100e <HAL_RCC_OscConfig+0x25e>
    FlagStatus       pwrclkchanged = RESET;
 8000fd8:	2500      	movs	r5, #0
 8000fda:	e7ea      	b.n	8000fb2 <HAL_RCC_OscConfig+0x202>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fdc:	4a2a      	ldr	r2, [pc, #168]	; (8001088 <HAL_RCC_OscConfig+0x2d8>)
 8000fde:	6811      	ldr	r1, [r2, #0]
 8000fe0:	2380      	movs	r3, #128	; 0x80
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	430b      	orrs	r3, r1
 8000fe6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000fe8:	f7ff fb68 	bl	80006bc <HAL_GetTick>
 8000fec:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fee:	4b26      	ldr	r3, [pc, #152]	; (8001088 <HAL_RCC_OscConfig+0x2d8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	05db      	lsls	r3, r3, #23
 8000ff4:	d4e1      	bmi.n	8000fba <HAL_RCC_OscConfig+0x20a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ff6:	f7ff fb61 	bl	80006bc <HAL_GetTick>
 8000ffa:	1b80      	subs	r0, r0, r6
 8000ffc:	2864      	cmp	r0, #100	; 0x64
 8000ffe:	d9f6      	bls.n	8000fee <HAL_RCC_OscConfig+0x23e>
          return HAL_TIMEOUT;
 8001000:	2003      	movs	r0, #3
 8001002:	e10e      	b.n	8001222 <HAL_RCC_OscConfig+0x472>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001004:	4a1d      	ldr	r2, [pc, #116]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8001006:	6a13      	ldr	r3, [r2, #32]
 8001008:	2101      	movs	r1, #1
 800100a:	430b      	orrs	r3, r1
 800100c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800100e:	68a3      	ldr	r3, [r4, #8]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d024      	beq.n	800105e <HAL_RCC_OscConfig+0x2ae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001014:	f7ff fb52 	bl	80006bc <HAL_GetTick>
 8001018:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	079b      	lsls	r3, r3, #30
 8001020:	d436      	bmi.n	8001090 <HAL_RCC_OscConfig+0x2e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001022:	f7ff fb4b 	bl	80006bc <HAL_GetTick>
 8001026:	1b80      	subs	r0, r0, r6
 8001028:	4b18      	ldr	r3, [pc, #96]	; (800108c <HAL_RCC_OscConfig+0x2dc>)
 800102a:	4298      	cmp	r0, r3
 800102c:	d9f5      	bls.n	800101a <HAL_RCC_OscConfig+0x26a>
        {
          return HAL_TIMEOUT;
 800102e:	2003      	movs	r0, #3
 8001030:	e0f7      	b.n	8001222 <HAL_RCC_OscConfig+0x472>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001032:	2b05      	cmp	r3, #5
 8001034:	d009      	beq.n	800104a <HAL_RCC_OscConfig+0x29a>
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8001038:	6a1a      	ldr	r2, [r3, #32]
 800103a:	2101      	movs	r1, #1
 800103c:	438a      	bics	r2, r1
 800103e:	621a      	str	r2, [r3, #32]
 8001040:	6a1a      	ldr	r2, [r3, #32]
 8001042:	3103      	adds	r1, #3
 8001044:	438a      	bics	r2, r1
 8001046:	621a      	str	r2, [r3, #32]
 8001048:	e7e1      	b.n	800100e <HAL_RCC_OscConfig+0x25e>
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 800104c:	6a1a      	ldr	r2, [r3, #32]
 800104e:	2104      	movs	r1, #4
 8001050:	430a      	orrs	r2, r1
 8001052:	621a      	str	r2, [r3, #32]
 8001054:	6a1a      	ldr	r2, [r3, #32]
 8001056:	3903      	subs	r1, #3
 8001058:	430a      	orrs	r2, r1
 800105a:	621a      	str	r2, [r3, #32]
 800105c:	e7d7      	b.n	800100e <HAL_RCC_OscConfig+0x25e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800105e:	f7ff fb2d 	bl	80006bc <HAL_GetTick>
 8001062:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <HAL_RCC_OscConfig+0x2cc>)
 8001066:	6a1b      	ldr	r3, [r3, #32]
 8001068:	079b      	lsls	r3, r3, #30
 800106a:	d511      	bpl.n	8001090 <HAL_RCC_OscConfig+0x2e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800106c:	f7ff fb26 	bl	80006bc <HAL_GetTick>
 8001070:	1b80      	subs	r0, r0, r6
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_RCC_OscConfig+0x2dc>)
 8001074:	4298      	cmp	r0, r3
 8001076:	d9f5      	bls.n	8001064 <HAL_RCC_OscConfig+0x2b4>
        {
          return HAL_TIMEOUT;
 8001078:	2003      	movs	r0, #3
 800107a:	e0d2      	b.n	8001222 <HAL_RCC_OscConfig+0x472>
 800107c:	40021000 	.word	0x40021000
 8001080:	fffeffff 	.word	0xfffeffff
 8001084:	fffbffff 	.word	0xfffbffff
 8001088:	40007000 	.word	0x40007000
 800108c:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001090:	2d01      	cmp	r5, #1
 8001092:	d033      	beq.n	80010fc <HAL_RCC_OscConfig+0x34c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001094:	6823      	ldr	r3, [r4, #0]
 8001096:	06db      	lsls	r3, r3, #27
 8001098:	d510      	bpl.n	80010bc <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800109a:	6963      	ldr	r3, [r4, #20]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d033      	beq.n	8001108 <HAL_RCC_OscConfig+0x358>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80010a0:	3305      	adds	r3, #5
 80010a2:	d151      	bne.n	8001148 <HAL_RCC_OscConfig+0x398>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80010a4:	4a64      	ldr	r2, [pc, #400]	; (8001238 <HAL_RCC_OscConfig+0x488>)
 80010a6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80010a8:	2104      	movs	r1, #4
 80010aa:	438b      	bics	r3, r1
 80010ac:	6353      	str	r3, [r2, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80010ae:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80010b0:	31f4      	adds	r1, #244	; 0xf4
 80010b2:	438b      	bics	r3, r1
 80010b4:	69a1      	ldr	r1, [r4, #24]
 80010b6:	00c9      	lsls	r1, r1, #3
 80010b8:	430b      	orrs	r3, r1
 80010ba:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010bc:	6a23      	ldr	r3, [r4, #32]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d100      	bne.n	80010c4 <HAL_RCC_OscConfig+0x314>
 80010c2:	e0b2      	b.n	800122a <HAL_RCC_OscConfig+0x47a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010c4:	4a5c      	ldr	r2, [pc, #368]	; (8001238 <HAL_RCC_OscConfig+0x488>)
 80010c6:	6851      	ldr	r1, [r2, #4]
 80010c8:	220c      	movs	r2, #12
 80010ca:	400a      	ands	r2, r1
 80010cc:	2a08      	cmp	r2, #8
 80010ce:	d100      	bne.n	80010d2 <HAL_RCC_OscConfig+0x322>
 80010d0:	e08a      	b.n	80011e8 <HAL_RCC_OscConfig+0x438>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d04f      	beq.n	8001176 <HAL_RCC_OscConfig+0x3c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010d6:	4a58      	ldr	r2, [pc, #352]	; (8001238 <HAL_RCC_OscConfig+0x488>)
 80010d8:	6813      	ldr	r3, [r2, #0]
 80010da:	4958      	ldr	r1, [pc, #352]	; (800123c <HAL_RCC_OscConfig+0x48c>)
 80010dc:	400b      	ands	r3, r1
 80010de:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e0:	f7ff faec 	bl	80006bc <HAL_GetTick>
 80010e4:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010e6:	4b54      	ldr	r3, [pc, #336]	; (8001238 <HAL_RCC_OscConfig+0x488>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	019b      	lsls	r3, r3, #6
 80010ec:	d57a      	bpl.n	80011e4 <HAL_RCC_OscConfig+0x434>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010ee:	f7ff fae5 	bl	80006bc <HAL_GetTick>
 80010f2:	1b00      	subs	r0, r0, r4
 80010f4:	2802      	cmp	r0, #2
 80010f6:	d9f6      	bls.n	80010e6 <HAL_RCC_OscConfig+0x336>
          {
            return HAL_TIMEOUT;
 80010f8:	2003      	movs	r0, #3
 80010fa:	e092      	b.n	8001222 <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010fc:	4a4e      	ldr	r2, [pc, #312]	; (8001238 <HAL_RCC_OscConfig+0x488>)
 80010fe:	69d3      	ldr	r3, [r2, #28]
 8001100:	494f      	ldr	r1, [pc, #316]	; (8001240 <HAL_RCC_OscConfig+0x490>)
 8001102:	400b      	ands	r3, r1
 8001104:	61d3      	str	r3, [r2, #28]
 8001106:	e7c5      	b.n	8001094 <HAL_RCC_OscConfig+0x2e4>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001108:	4b4b      	ldr	r3, [pc, #300]	; (8001238 <HAL_RCC_OscConfig+0x488>)
 800110a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800110c:	2104      	movs	r1, #4
 800110e:	430a      	orrs	r2, r1
 8001110:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001114:	3903      	subs	r1, #3
 8001116:	430a      	orrs	r2, r1
 8001118:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 800111a:	f7ff facf 	bl	80006bc <HAL_GetTick>
 800111e:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001120:	4b45      	ldr	r3, [pc, #276]	; (8001238 <HAL_RCC_OscConfig+0x488>)
 8001122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001124:	079b      	lsls	r3, r3, #30
 8001126:	d406      	bmi.n	8001136 <HAL_RCC_OscConfig+0x386>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001128:	f7ff fac8 	bl	80006bc <HAL_GetTick>
 800112c:	1b40      	subs	r0, r0, r5
 800112e:	2802      	cmp	r0, #2
 8001130:	d9f6      	bls.n	8001120 <HAL_RCC_OscConfig+0x370>
          return HAL_TIMEOUT;
 8001132:	2003      	movs	r0, #3
 8001134:	e075      	b.n	8001222 <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001136:	4940      	ldr	r1, [pc, #256]	; (8001238 <HAL_RCC_OscConfig+0x488>)
 8001138:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800113a:	22f8      	movs	r2, #248	; 0xf8
 800113c:	4393      	bics	r3, r2
 800113e:	69a2      	ldr	r2, [r4, #24]
 8001140:	00d2      	lsls	r2, r2, #3
 8001142:	4313      	orrs	r3, r2
 8001144:	634b      	str	r3, [r1, #52]	; 0x34
 8001146:	e7b9      	b.n	80010bc <HAL_RCC_OscConfig+0x30c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001148:	4b3b      	ldr	r3, [pc, #236]	; (8001238 <HAL_RCC_OscConfig+0x488>)
 800114a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800114c:	2104      	movs	r1, #4
 800114e:	430a      	orrs	r2, r1
 8001150:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001152:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001154:	3903      	subs	r1, #3
 8001156:	438a      	bics	r2, r1
 8001158:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 800115a:	f7ff faaf 	bl	80006bc <HAL_GetTick>
 800115e:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001160:	4b35      	ldr	r3, [pc, #212]	; (8001238 <HAL_RCC_OscConfig+0x488>)
 8001162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001164:	079b      	lsls	r3, r3, #30
 8001166:	d5a9      	bpl.n	80010bc <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001168:	f7ff faa8 	bl	80006bc <HAL_GetTick>
 800116c:	1b40      	subs	r0, r0, r5
 800116e:	2802      	cmp	r0, #2
 8001170:	d9f6      	bls.n	8001160 <HAL_RCC_OscConfig+0x3b0>
          return HAL_TIMEOUT;
 8001172:	2003      	movs	r0, #3
 8001174:	e055      	b.n	8001222 <HAL_RCC_OscConfig+0x472>
        __HAL_RCC_PLL_DISABLE();
 8001176:	4a30      	ldr	r2, [pc, #192]	; (8001238 <HAL_RCC_OscConfig+0x488>)
 8001178:	6813      	ldr	r3, [r2, #0]
 800117a:	4930      	ldr	r1, [pc, #192]	; (800123c <HAL_RCC_OscConfig+0x48c>)
 800117c:	400b      	ands	r3, r1
 800117e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001180:	f7ff fa9c 	bl	80006bc <HAL_GetTick>
 8001184:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001186:	4b2c      	ldr	r3, [pc, #176]	; (8001238 <HAL_RCC_OscConfig+0x488>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	019b      	lsls	r3, r3, #6
 800118c:	d506      	bpl.n	800119c <HAL_RCC_OscConfig+0x3ec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800118e:	f7ff fa95 	bl	80006bc <HAL_GetTick>
 8001192:	1b40      	subs	r0, r0, r5
 8001194:	2802      	cmp	r0, #2
 8001196:	d9f6      	bls.n	8001186 <HAL_RCC_OscConfig+0x3d6>
            return HAL_TIMEOUT;
 8001198:	2003      	movs	r0, #3
 800119a:	e042      	b.n	8001222 <HAL_RCC_OscConfig+0x472>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800119c:	4b26      	ldr	r3, [pc, #152]	; (8001238 <HAL_RCC_OscConfig+0x488>)
 800119e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011a0:	210f      	movs	r1, #15
 80011a2:	438a      	bics	r2, r1
 80011a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80011a6:	430a      	orrs	r2, r1
 80011a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	4925      	ldr	r1, [pc, #148]	; (8001244 <HAL_RCC_OscConfig+0x494>)
 80011ae:	400a      	ands	r2, r1
 80011b0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80011b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80011b4:	4301      	orrs	r1, r0
 80011b6:	430a      	orrs	r2, r1
 80011b8:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80011ba:	6819      	ldr	r1, [r3, #0]
 80011bc:	2280      	movs	r2, #128	; 0x80
 80011be:	0452      	lsls	r2, r2, #17
 80011c0:	430a      	orrs	r2, r1
 80011c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011c4:	f7ff fa7a 	bl	80006bc <HAL_GetTick>
 80011c8:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011ca:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <HAL_RCC_OscConfig+0x488>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	019b      	lsls	r3, r3, #6
 80011d0:	d406      	bmi.n	80011e0 <HAL_RCC_OscConfig+0x430>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011d2:	f7ff fa73 	bl	80006bc <HAL_GetTick>
 80011d6:	1b00      	subs	r0, r0, r4
 80011d8:	2802      	cmp	r0, #2
 80011da:	d9f6      	bls.n	80011ca <HAL_RCC_OscConfig+0x41a>
            return HAL_TIMEOUT;
 80011dc:	2003      	movs	r0, #3
 80011de:	e020      	b.n	8001222 <HAL_RCC_OscConfig+0x472>
        }
      }
    }
  }

  return HAL_OK;
 80011e0:	2000      	movs	r0, #0
 80011e2:	e01e      	b.n	8001222 <HAL_RCC_OscConfig+0x472>
 80011e4:	2000      	movs	r0, #0
 80011e6:	e01c      	b.n	8001222 <HAL_RCC_OscConfig+0x472>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d020      	beq.n	800122e <HAL_RCC_OscConfig+0x47e>
        pll_config  = RCC->CFGR;
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_RCC_OscConfig+0x488>)
 80011ee:	685a      	ldr	r2, [r3, #4]
        pll_config2 = RCC->CFGR2;
 80011f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011f2:	2380      	movs	r3, #128	; 0x80
 80011f4:	025b      	lsls	r3, r3, #9
 80011f6:	4013      	ands	r3, r2
 80011f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80011fa:	4283      	cmp	r3, r0
 80011fc:	d001      	beq.n	8001202 <HAL_RCC_OscConfig+0x452>
          return HAL_ERROR;
 80011fe:	2001      	movs	r0, #1
 8001200:	e00f      	b.n	8001222 <HAL_RCC_OscConfig+0x472>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001202:	230f      	movs	r3, #15
 8001204:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001206:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001208:	428b      	cmp	r3, r1
 800120a:	d001      	beq.n	8001210 <HAL_RCC_OscConfig+0x460>
          return HAL_ERROR;
 800120c:	2001      	movs	r0, #1
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0x472>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001210:	23f0      	movs	r3, #240	; 0xf0
 8001212:	039b      	lsls	r3, r3, #14
 8001214:	401a      	ands	r2, r3
 8001216:	6aa3      	ldr	r3, [r4, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001218:	429a      	cmp	r2, r3
 800121a:	d00a      	beq.n	8001232 <HAL_RCC_OscConfig+0x482>
          return HAL_ERROR;
 800121c:	2001      	movs	r0, #1
 800121e:	e000      	b.n	8001222 <HAL_RCC_OscConfig+0x472>
    return HAL_ERROR;
 8001220:	2001      	movs	r0, #1
}
 8001222:	b002      	add	sp, #8
 8001224:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001226:	2001      	movs	r0, #1
 8001228:	e7fb      	b.n	8001222 <HAL_RCC_OscConfig+0x472>
  return HAL_OK;
 800122a:	2000      	movs	r0, #0
 800122c:	e7f9      	b.n	8001222 <HAL_RCC_OscConfig+0x472>
        return HAL_ERROR;
 800122e:	2001      	movs	r0, #1
 8001230:	e7f7      	b.n	8001222 <HAL_RCC_OscConfig+0x472>
  return HAL_OK;
 8001232:	2000      	movs	r0, #0
 8001234:	e7f5      	b.n	8001222 <HAL_RCC_OscConfig+0x472>
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	40021000 	.word	0x40021000
 800123c:	feffffff 	.word	0xfeffffff
 8001240:	efffffff 	.word	0xefffffff
 8001244:	ffc2ffff 	.word	0xffc2ffff

08001248 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001248:	b530      	push	{r4, r5, lr}
 800124a:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800124c:	aa04      	add	r2, sp, #16
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <HAL_RCC_GetSysClockFreq+0x64>)
 8001250:	0018      	movs	r0, r3
 8001252:	c832      	ldmia	r0!, {r1, r4, r5}
 8001254:	c232      	stmia	r2!, {r1, r4, r5}
 8001256:	0011      	movs	r1, r2
 8001258:	6802      	ldr	r2, [r0, #0]
 800125a:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800125c:	466a      	mov	r2, sp
 800125e:	3310      	adds	r3, #16
 8001260:	cb13      	ldmia	r3!, {r0, r1, r4}
 8001262:	c213      	stmia	r2!, {r0, r1, r4}
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <HAL_RCC_GetSysClockFreq+0x68>)
 800126a:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800126c:	230c      	movs	r3, #12
 800126e:	4013      	ands	r3, r2
 8001270:	2b08      	cmp	r3, #8
 8001272:	d119      	bne.n	80012a8 <HAL_RCC_GetSysClockFreq+0x60>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001274:	0c91      	lsrs	r1, r2, #18
 8001276:	3307      	adds	r3, #7
 8001278:	4019      	ands	r1, r3
 800127a:	a804      	add	r0, sp, #16
 800127c:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800127e:	490c      	ldr	r1, [pc, #48]	; (80012b0 <HAL_RCC_GetSysClockFreq+0x68>)
 8001280:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001282:	400b      	ands	r3, r1
 8001284:	4669      	mov	r1, sp
 8001286:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001288:	03d3      	lsls	r3, r2, #15
 800128a:	d408      	bmi.n	800129e <HAL_RCC_GetSysClockFreq+0x56>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800128c:	0163      	lsls	r3, r4, #5
 800128e:	1b1b      	subs	r3, r3, r4
 8001290:	0198      	lsls	r0, r3, #6
 8001292:	1ac0      	subs	r0, r0, r3
 8001294:	00c0      	lsls	r0, r0, #3
 8001296:	1904      	adds	r4, r0, r4
 8001298:	0220      	lsls	r0, r4, #8
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800129a:	b009      	add	sp, #36	; 0x24
 800129c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <HAL_RCC_GetSysClockFreq+0x6c>)
 80012a0:	f7fe ff32 	bl	8000108 <__udivsi3>
 80012a4:	4360      	muls	r0, r4
 80012a6:	e7f8      	b.n	800129a <HAL_RCC_GetSysClockFreq+0x52>
      sysclockfreq = HSE_VALUE;
 80012a8:	4802      	ldr	r0, [pc, #8]	; (80012b4 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80012aa:	e7f6      	b.n	800129a <HAL_RCC_GetSysClockFreq+0x52>
 80012ac:	08001570 	.word	0x08001570
 80012b0:	40021000 	.word	0x40021000
 80012b4:	007a1200 	.word	0x007a1200

080012b8 <HAL_RCC_ClockConfig>:
{
 80012b8:	b570      	push	{r4, r5, r6, lr}
 80012ba:	0004      	movs	r4, r0
 80012bc:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80012be:	2800      	cmp	r0, #0
 80012c0:	d100      	bne.n	80012c4 <HAL_RCC_ClockConfig+0xc>
 80012c2:	e081      	b.n	80013c8 <HAL_RCC_ClockConfig+0x110>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012c4:	4b42      	ldr	r3, [pc, #264]	; (80013d0 <HAL_RCC_ClockConfig+0x118>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	2301      	movs	r3, #1
 80012ca:	4013      	ands	r3, r2
 80012cc:	428b      	cmp	r3, r1
 80012ce:	d20b      	bcs.n	80012e8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012d0:	493f      	ldr	r1, [pc, #252]	; (80013d0 <HAL_RCC_ClockConfig+0x118>)
 80012d2:	680b      	ldr	r3, [r1, #0]
 80012d4:	2201      	movs	r2, #1
 80012d6:	4393      	bics	r3, r2
 80012d8:	432b      	orrs	r3, r5
 80012da:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012dc:	680b      	ldr	r3, [r1, #0]
 80012de:	401a      	ands	r2, r3
 80012e0:	42aa      	cmp	r2, r5
 80012e2:	d001      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 80012e4:	2001      	movs	r0, #1
 80012e6:	e070      	b.n	80013ca <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012e8:	6823      	ldr	r3, [r4, #0]
 80012ea:	079a      	lsls	r2, r3, #30
 80012ec:	d50e      	bpl.n	800130c <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012ee:	075b      	lsls	r3, r3, #29
 80012f0:	d505      	bpl.n	80012fe <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80012f2:	4a38      	ldr	r2, [pc, #224]	; (80013d4 <HAL_RCC_ClockConfig+0x11c>)
 80012f4:	6851      	ldr	r1, [r2, #4]
 80012f6:	23e0      	movs	r3, #224	; 0xe0
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	430b      	orrs	r3, r1
 80012fc:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012fe:	4a35      	ldr	r2, [pc, #212]	; (80013d4 <HAL_RCC_ClockConfig+0x11c>)
 8001300:	6853      	ldr	r3, [r2, #4]
 8001302:	21f0      	movs	r1, #240	; 0xf0
 8001304:	438b      	bics	r3, r1
 8001306:	68a1      	ldr	r1, [r4, #8]
 8001308:	430b      	orrs	r3, r1
 800130a:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800130c:	6823      	ldr	r3, [r4, #0]
 800130e:	07db      	lsls	r3, r3, #31
 8001310:	d52d      	bpl.n	800136e <HAL_RCC_ClockConfig+0xb6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001312:	6863      	ldr	r3, [r4, #4]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d01e      	beq.n	8001356 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001318:	2b02      	cmp	r3, #2
 800131a:	d022      	beq.n	8001362 <HAL_RCC_ClockConfig+0xaa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131c:	4a2d      	ldr	r2, [pc, #180]	; (80013d4 <HAL_RCC_ClockConfig+0x11c>)
 800131e:	6812      	ldr	r2, [r2, #0]
 8001320:	0792      	lsls	r2, r2, #30
 8001322:	d553      	bpl.n	80013cc <HAL_RCC_ClockConfig+0x114>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001324:	492b      	ldr	r1, [pc, #172]	; (80013d4 <HAL_RCC_ClockConfig+0x11c>)
 8001326:	684a      	ldr	r2, [r1, #4]
 8001328:	2003      	movs	r0, #3
 800132a:	4382      	bics	r2, r0
 800132c:	4313      	orrs	r3, r2
 800132e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001330:	f7ff f9c4 	bl	80006bc <HAL_GetTick>
 8001334:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001336:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <HAL_RCC_ClockConfig+0x11c>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	220c      	movs	r2, #12
 800133c:	401a      	ands	r2, r3
 800133e:	6863      	ldr	r3, [r4, #4]
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	429a      	cmp	r2, r3
 8001344:	d013      	beq.n	800136e <HAL_RCC_ClockConfig+0xb6>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001346:	f7ff f9b9 	bl	80006bc <HAL_GetTick>
 800134a:	1b80      	subs	r0, r0, r6
 800134c:	4b22      	ldr	r3, [pc, #136]	; (80013d8 <HAL_RCC_ClockConfig+0x120>)
 800134e:	4298      	cmp	r0, r3
 8001350:	d9f1      	bls.n	8001336 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8001352:	2003      	movs	r0, #3
 8001354:	e039      	b.n	80013ca <HAL_RCC_ClockConfig+0x112>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001356:	4a1f      	ldr	r2, [pc, #124]	; (80013d4 <HAL_RCC_ClockConfig+0x11c>)
 8001358:	6812      	ldr	r2, [r2, #0]
 800135a:	0392      	lsls	r2, r2, #14
 800135c:	d4e2      	bmi.n	8001324 <HAL_RCC_ClockConfig+0x6c>
        return HAL_ERROR;
 800135e:	2001      	movs	r0, #1
 8001360:	e033      	b.n	80013ca <HAL_RCC_ClockConfig+0x112>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001362:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <HAL_RCC_ClockConfig+0x11c>)
 8001364:	6812      	ldr	r2, [r2, #0]
 8001366:	0192      	lsls	r2, r2, #6
 8001368:	d4dc      	bmi.n	8001324 <HAL_RCC_ClockConfig+0x6c>
        return HAL_ERROR;
 800136a:	2001      	movs	r0, #1
 800136c:	e02d      	b.n	80013ca <HAL_RCC_ClockConfig+0x112>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <HAL_RCC_ClockConfig+0x118>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	2301      	movs	r3, #1
 8001374:	4013      	ands	r3, r2
 8001376:	42ab      	cmp	r3, r5
 8001378:	d90b      	bls.n	8001392 <HAL_RCC_ClockConfig+0xda>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137a:	4915      	ldr	r1, [pc, #84]	; (80013d0 <HAL_RCC_ClockConfig+0x118>)
 800137c:	680b      	ldr	r3, [r1, #0]
 800137e:	2201      	movs	r2, #1
 8001380:	4393      	bics	r3, r2
 8001382:	432b      	orrs	r3, r5
 8001384:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001386:	680b      	ldr	r3, [r1, #0]
 8001388:	401a      	ands	r2, r3
 800138a:	42aa      	cmp	r2, r5
 800138c:	d001      	beq.n	8001392 <HAL_RCC_ClockConfig+0xda>
      return HAL_ERROR;
 800138e:	2001      	movs	r0, #1
 8001390:	e01b      	b.n	80013ca <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001392:	6823      	ldr	r3, [r4, #0]
 8001394:	075b      	lsls	r3, r3, #29
 8001396:	d506      	bpl.n	80013a6 <HAL_RCC_ClockConfig+0xee>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001398:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <HAL_RCC_ClockConfig+0x11c>)
 800139a:	6853      	ldr	r3, [r2, #4]
 800139c:	490f      	ldr	r1, [pc, #60]	; (80013dc <HAL_RCC_ClockConfig+0x124>)
 800139e:	400b      	ands	r3, r1
 80013a0:	68e1      	ldr	r1, [r4, #12]
 80013a2:	430b      	orrs	r3, r1
 80013a4:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80013a6:	f7ff ff4f 	bl	8001248 <HAL_RCC_GetSysClockFreq>
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_RCC_ClockConfig+0x11c>)
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	0912      	lsrs	r2, r2, #4
 80013b0:	230f      	movs	r3, #15
 80013b2:	4013      	ands	r3, r2
 80013b4:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <HAL_RCC_ClockConfig+0x128>)
 80013b6:	5cd3      	ldrb	r3, [r2, r3]
 80013b8:	40d8      	lsrs	r0, r3
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <HAL_RCC_ClockConfig+0x12c>)
 80013bc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80013be:	2000      	movs	r0, #0
 80013c0:	f7ff f938 	bl	8000634 <HAL_InitTick>
  return HAL_OK;
 80013c4:	2000      	movs	r0, #0
 80013c6:	e000      	b.n	80013ca <HAL_RCC_ClockConfig+0x112>
    return HAL_ERROR;
 80013c8:	2001      	movs	r0, #1
}
 80013ca:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80013cc:	2001      	movs	r0, #1
 80013ce:	e7fc      	b.n	80013ca <HAL_RCC_ClockConfig+0x112>
 80013d0:	40022000 	.word	0x40022000
 80013d4:	40021000 	.word	0x40021000
 80013d8:	00001388 	.word	0x00001388
 80013dc:	fffff8ff 	.word	0xfffff8ff
 80013e0:	080015b0 	.word	0x080015b0
 80013e4:	20000000 	.word	0x20000000

080013e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80013e8:	b570      	push	{r4, r5, r6, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80013ee:	6803      	ldr	r3, [r0, #0]
 80013f0:	03db      	lsls	r3, r3, #15
 80013f2:	d535      	bpl.n	8001460 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f4:	4b3c      	ldr	r3, [pc, #240]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	d448      	bmi.n	800148e <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80013fc:	4a3a      	ldr	r2, [pc, #232]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80013fe:	69d1      	ldr	r1, [r2, #28]
 8001400:	2080      	movs	r0, #128	; 0x80
 8001402:	0540      	lsls	r0, r0, #21
 8001404:	4301      	orrs	r1, r0
 8001406:	61d1      	str	r1, [r2, #28]
 8001408:	69d3      	ldr	r3, [r2, #28]
 800140a:	4003      	ands	r3, r0
 800140c:	9301      	str	r3, [sp, #4]
 800140e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001410:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001412:	4b36      	ldr	r3, [pc, #216]	; (80014ec <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	05db      	lsls	r3, r3, #23
 8001418:	d53b      	bpl.n	8001492 <HAL_RCCEx_PeriphCLKConfig+0xaa>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800141a:	4b33      	ldr	r3, [pc, #204]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 800141c:	6a1b      	ldr	r3, [r3, #32]
 800141e:	22c0      	movs	r2, #192	; 0xc0
 8001420:	0092      	lsls	r2, r2, #2
 8001422:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001424:	d013      	beq.n	800144e <HAL_RCCEx_PeriphCLKConfig+0x66>
 8001426:	6861      	ldr	r1, [r4, #4]
 8001428:	400a      	ands	r2, r1
 800142a:	429a      	cmp	r2, r3
 800142c:	d00f      	beq.n	800144e <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800142e:	4b2e      	ldr	r3, [pc, #184]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001430:	6a18      	ldr	r0, [r3, #32]
 8001432:	4a2f      	ldr	r2, [pc, #188]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001434:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001436:	6a1e      	ldr	r6, [r3, #32]
 8001438:	2180      	movs	r1, #128	; 0x80
 800143a:	0249      	lsls	r1, r1, #9
 800143c:	4331      	orrs	r1, r6
 800143e:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001440:	6a19      	ldr	r1, [r3, #32]
 8001442:	4e2c      	ldr	r6, [pc, #176]	; (80014f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001444:	4031      	ands	r1, r6
 8001446:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001448:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800144a:	07c3      	lsls	r3, r0, #31
 800144c:	d435      	bmi.n	80014ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800144e:	4a26      	ldr	r2, [pc, #152]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001450:	6a13      	ldr	r3, [r2, #32]
 8001452:	4927      	ldr	r1, [pc, #156]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001454:	400b      	ands	r3, r1
 8001456:	6861      	ldr	r1, [r4, #4]
 8001458:	430b      	orrs	r3, r1
 800145a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800145c:	2d01      	cmp	r5, #1
 800145e:	d03b      	beq.n	80014d8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001460:	6823      	ldr	r3, [r4, #0]
 8001462:	07db      	lsls	r3, r3, #31
 8001464:	d506      	bpl.n	8001474 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001466:	4a20      	ldr	r2, [pc, #128]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001468:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800146a:	2103      	movs	r1, #3
 800146c:	438b      	bics	r3, r1
 800146e:	68a1      	ldr	r1, [r4, #8]
 8001470:	430b      	orrs	r3, r1
 8001472:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001474:	6823      	ldr	r3, [r4, #0]
 8001476:	069b      	lsls	r3, r3, #26
 8001478:	d533      	bpl.n	80014e2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800147a:	4a1b      	ldr	r2, [pc, #108]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 800147c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800147e:	2110      	movs	r1, #16
 8001480:	438b      	bics	r3, r1
 8001482:	68e1      	ldr	r1, [r4, #12]
 8001484:	430b      	orrs	r3, r1
 8001486:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001488:	2000      	movs	r0, #0
}
 800148a:	b002      	add	sp, #8
 800148c:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 800148e:	2500      	movs	r5, #0
 8001490:	e7bf      	b.n	8001412 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001492:	4a16      	ldr	r2, [pc, #88]	; (80014ec <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8001494:	6811      	ldr	r1, [r2, #0]
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	430b      	orrs	r3, r1
 800149c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800149e:	f7ff f90d 	bl	80006bc <HAL_GetTick>
 80014a2:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <HAL_RCCEx_PeriphCLKConfig+0x104>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	05db      	lsls	r3, r3, #23
 80014aa:	d4b6      	bmi.n	800141a <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ac:	f7ff f906 	bl	80006bc <HAL_GetTick>
 80014b0:	1b80      	subs	r0, r0, r6
 80014b2:	2864      	cmp	r0, #100	; 0x64
 80014b4:	d9f6      	bls.n	80014a4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          return HAL_TIMEOUT;
 80014b6:	2003      	movs	r0, #3
 80014b8:	e7e7      	b.n	800148a <HAL_RCCEx_PeriphCLKConfig+0xa2>
        tickstart = HAL_GetTick();
 80014ba:	f7ff f8ff 	bl	80006bc <HAL_GetTick>
 80014be:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	079b      	lsls	r3, r3, #30
 80014c6:	d4c2      	bmi.n	800144e <HAL_RCCEx_PeriphCLKConfig+0x66>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014c8:	f7ff f8f8 	bl	80006bc <HAL_GetTick>
 80014cc:	1b80      	subs	r0, r0, r6
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80014d0:	4298      	cmp	r0, r3
 80014d2:	d9f5      	bls.n	80014c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
 80014d4:	2003      	movs	r0, #3
 80014d6:	e7d8      	b.n	800148a <HAL_RCCEx_PeriphCLKConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d8:	69d3      	ldr	r3, [r2, #28]
 80014da:	4908      	ldr	r1, [pc, #32]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80014dc:	400b      	ands	r3, r1
 80014de:	61d3      	str	r3, [r2, #28]
 80014e0:	e7be      	b.n	8001460 <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 80014e2:	2000      	movs	r0, #0
 80014e4:	e7d1      	b.n	800148a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40007000 	.word	0x40007000
 80014f0:	fffffcff 	.word	0xfffffcff
 80014f4:	fffeffff 	.word	0xfffeffff
 80014f8:	00001388 	.word	0x00001388
 80014fc:	efffffff 	.word	0xefffffff

08001500 <__libc_init_array>:
 8001500:	b570      	push	{r4, r5, r6, lr}
 8001502:	2600      	movs	r6, #0
 8001504:	4d0c      	ldr	r5, [pc, #48]	; (8001538 <__libc_init_array+0x38>)
 8001506:	4c0d      	ldr	r4, [pc, #52]	; (800153c <__libc_init_array+0x3c>)
 8001508:	1b64      	subs	r4, r4, r5
 800150a:	10a4      	asrs	r4, r4, #2
 800150c:	42a6      	cmp	r6, r4
 800150e:	d109      	bne.n	8001524 <__libc_init_array+0x24>
 8001510:	2600      	movs	r6, #0
 8001512:	f000 f821 	bl	8001558 <_init>
 8001516:	4d0a      	ldr	r5, [pc, #40]	; (8001540 <__libc_init_array+0x40>)
 8001518:	4c0a      	ldr	r4, [pc, #40]	; (8001544 <__libc_init_array+0x44>)
 800151a:	1b64      	subs	r4, r4, r5
 800151c:	10a4      	asrs	r4, r4, #2
 800151e:	42a6      	cmp	r6, r4
 8001520:	d105      	bne.n	800152e <__libc_init_array+0x2e>
 8001522:	bd70      	pop	{r4, r5, r6, pc}
 8001524:	00b3      	lsls	r3, r6, #2
 8001526:	58eb      	ldr	r3, [r5, r3]
 8001528:	4798      	blx	r3
 800152a:	3601      	adds	r6, #1
 800152c:	e7ee      	b.n	800150c <__libc_init_array+0xc>
 800152e:	00b3      	lsls	r3, r6, #2
 8001530:	58eb      	ldr	r3, [r5, r3]
 8001532:	4798      	blx	r3
 8001534:	3601      	adds	r6, #1
 8001536:	e7f2      	b.n	800151e <__libc_init_array+0x1e>
 8001538:	080015c0 	.word	0x080015c0
 800153c:	080015c0 	.word	0x080015c0
 8001540:	080015c0 	.word	0x080015c0
 8001544:	080015c4 	.word	0x080015c4

08001548 <memset>:
 8001548:	0003      	movs	r3, r0
 800154a:	1812      	adds	r2, r2, r0
 800154c:	4293      	cmp	r3, r2
 800154e:	d100      	bne.n	8001552 <memset+0xa>
 8001550:	4770      	bx	lr
 8001552:	7019      	strb	r1, [r3, #0]
 8001554:	3301      	adds	r3, #1
 8001556:	e7f9      	b.n	800154c <memset+0x4>

08001558 <_init>:
 8001558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800155e:	bc08      	pop	{r3}
 8001560:	469e      	mov	lr, r3
 8001562:	4770      	bx	lr

08001564 <_fini>:
 8001564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800156a:	bc08      	pop	{r3}
 800156c:	469e      	mov	lr, r3
 800156e:	4770      	bx	lr
