
f030_nrf_receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002428  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080024e8  080024e8  000124e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002534  08002534  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08002534  08002534  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002534  08002534  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002534  08002534  00012534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002538  08002538  00012538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800253c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000024  08002560  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08002560  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d462  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ce5  00000000  00000000  0002d4ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00007799  00000000  00000000  0002f193  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000008d8  00000000  00000000  00036930  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000898  00000000  00000000  00037208  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000c74d  00000000  00000000  00037aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000089e1  00000000  00000000  000441ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00042f1d  00000000  00000000  0004cbce  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0008faeb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000017dc  00000000  00000000  0008fb68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000024 	.word	0x20000024
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080024d0 	.word	0x080024d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000028 	.word	0x20000028
 8000104:	080024d0 	.word	0x080024d0

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <NRF24_ReadReg>:
    /* Wait till done */
    while (micros--);
}

//--------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr) {
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	b087      	sub	sp, #28
 8000238:	240f      	movs	r4, #15
 800023a:	446c      	add	r4, sp
 800023c:	7020      	strb	r0, [r4, #0]
    uint8_t dt = 0, cmd;
 800023e:	2517      	movs	r5, #23
 8000240:	446d      	add	r5, sp
 8000242:	2300      	movs	r3, #0
 8000244:	702b      	strb	r3, [r5, #0]
    CS_ON;
 8000246:	2090      	movs	r0, #144	; 0x90
 8000248:	2200      	movs	r2, #0
 800024a:	2101      	movs	r1, #1
 800024c:	05c0      	lsls	r0, r0, #23
 800024e:	f000 fe52 	bl	8000ef6 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, &addr, &dt, 1, 1000);
 8000252:	23fa      	movs	r3, #250	; 0xfa
 8000254:	009b      	lsls	r3, r3, #2
 8000256:	9300      	str	r3, [sp, #0]
 8000258:	2301      	movs	r3, #1
 800025a:	002a      	movs	r2, r5
 800025c:	0021      	movs	r1, r4
 800025e:	480f      	ldr	r0, [pc, #60]	; (800029c <NRF24_ReadReg+0x68>)
 8000260:	f001 fec0 	bl	8001fe4 <HAL_SPI_TransmitReceive>
    if (addr != STATUS) //если адрес равен адрес регистра статус то и возварщаем его состояние
 8000264:	7823      	ldrb	r3, [r4, #0]
 8000266:	2b07      	cmp	r3, #7
 8000268:	d00c      	beq.n	8000284 <NRF24_ReadReg+0x50>
    {
        cmd = 0xFF;
 800026a:	2116      	movs	r1, #22
 800026c:	4469      	add	r1, sp
 800026e:	23ff      	movs	r3, #255	; 0xff
 8000270:	700b      	strb	r3, [r1, #0]
        HAL_SPI_TransmitReceive(&hspi1, &cmd, &dt, 1, 1000);
 8000272:	23fa      	movs	r3, #250	; 0xfa
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	9300      	str	r3, [sp, #0]
 8000278:	2301      	movs	r3, #1
 800027a:	2217      	movs	r2, #23
 800027c:	446a      	add	r2, sp
 800027e:	4807      	ldr	r0, [pc, #28]	; (800029c <NRF24_ReadReg+0x68>)
 8000280:	f001 feb0 	bl	8001fe4 <HAL_SPI_TransmitReceive>
    }
    CS_OFF;
 8000284:	2090      	movs	r0, #144	; 0x90
 8000286:	2201      	movs	r2, #1
 8000288:	2101      	movs	r1, #1
 800028a:	05c0      	lsls	r0, r0, #23
 800028c:	f000 fe33 	bl	8000ef6 <HAL_GPIO_WritePin>
    return dt;
 8000290:	2317      	movs	r3, #23
 8000292:	446b      	add	r3, sp
 8000294:	7818      	ldrb	r0, [r3, #0]
}
 8000296:	b007      	add	sp, #28
 8000298:	bd30      	pop	{r4, r5, pc}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	200000a0 	.word	0x200000a0

080002a0 <NRF24_WriteReg>:
//------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt) {
 80002a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002a2:	b083      	sub	sp, #12
 80002a4:	466b      	mov	r3, sp
 80002a6:	1ddc      	adds	r4, r3, #7
 80002a8:	1d9e      	adds	r6, r3, #6
 80002aa:	7199      	strb	r1, [r3, #6]
    addr |= W_REGISTER; //включим бит записи в адрес
 80002ac:	2320      	movs	r3, #32
 80002ae:	4318      	orrs	r0, r3
 80002b0:	7020      	strb	r0, [r4, #0]
    CS_ON;
 80002b2:	2200      	movs	r2, #0
 80002b4:	2101      	movs	r1, #1
 80002b6:	2090      	movs	r0, #144	; 0x90
 80002b8:	05c0      	lsls	r0, r0, #23
 80002ba:	f000 fe1c 	bl	8000ef6 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &addr, 1, 1000); //отправим адрес в шину
 80002be:	27fa      	movs	r7, #250	; 0xfa
 80002c0:	00bf      	lsls	r7, r7, #2
 80002c2:	4d0a      	ldr	r5, [pc, #40]	; (80002ec <NRF24_WriteReg+0x4c>)
 80002c4:	003b      	movs	r3, r7
 80002c6:	2201      	movs	r2, #1
 80002c8:	0021      	movs	r1, r4
 80002ca:	0028      	movs	r0, r5
 80002cc:	f001 fd9a 	bl	8001e04 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, &dt, 1, 1000); //отправим данные в шину
 80002d0:	003b      	movs	r3, r7
 80002d2:	2201      	movs	r2, #1
 80002d4:	0031      	movs	r1, r6
 80002d6:	0028      	movs	r0, r5
 80002d8:	f001 fd94 	bl	8001e04 <HAL_SPI_Transmit>
    CS_OFF;
 80002dc:	2201      	movs	r2, #1
 80002de:	2101      	movs	r1, #1
 80002e0:	2090      	movs	r0, #144	; 0x90
 80002e2:	05c0      	lsls	r0, r0, #23
 80002e4:	f000 fe07 	bl	8000ef6 <HAL_GPIO_WritePin>
}
 80002e8:	b003      	add	sp, #12
 80002ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ec:	200000a0 	.word	0x200000a0

080002f0 <NRF24_ToggleFeatures>:
//------------------------------------------------
void NRF24_ToggleFeatures(void) {
 80002f0:	b510      	push	{r4, lr}
 80002f2:	b082      	sub	sp, #8
    uint8_t dt[1] = { ACTIVATE };
 80002f4:	ac01      	add	r4, sp, #4
 80002f6:	2350      	movs	r3, #80	; 0x50
 80002f8:	7023      	strb	r3, [r4, #0]
    CS_ON;
 80002fa:	2090      	movs	r0, #144	; 0x90
 80002fc:	2200      	movs	r2, #0
 80002fe:	2101      	movs	r1, #1
 8000300:	05c0      	lsls	r0, r0, #23
 8000302:	f000 fdf8 	bl	8000ef6 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, dt, 1, 1000);
 8000306:	23fa      	movs	r3, #250	; 0xfa
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	2201      	movs	r2, #1
 800030c:	0021      	movs	r1, r4
 800030e:	480e      	ldr	r0, [pc, #56]	; (8000348 <NRF24_ToggleFeatures+0x58>)
 8000310:	f001 fd78 	bl	8001e04 <HAL_SPI_Transmit>
    micros *= (SystemCoreClock / 1000000) / 9;
 8000314:	4b0d      	ldr	r3, [pc, #52]	; (800034c <NRF24_ToggleFeatures+0x5c>)
 8000316:	6818      	ldr	r0, [r3, #0]
 8000318:	490d      	ldr	r1, [pc, #52]	; (8000350 <NRF24_ToggleFeatures+0x60>)
 800031a:	f7ff feff 	bl	800011c <__udivsi3>
    while (micros--);
 800031e:	0003      	movs	r3, r0
 8000320:	3801      	subs	r0, #1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d1fb      	bne.n	800031e <NRF24_ToggleFeatures+0x2e>
    DelayMicro(1);
    dt[0] = 0x73;
 8000326:	a901      	add	r1, sp, #4
 8000328:	3373      	adds	r3, #115	; 0x73
 800032a:	700b      	strb	r3, [r1, #0]
    HAL_SPI_Transmit(&hspi1, dt, 1, 1000);
 800032c:	3387      	adds	r3, #135	; 0x87
 800032e:	009b      	lsls	r3, r3, #2
 8000330:	2201      	movs	r2, #1
 8000332:	4805      	ldr	r0, [pc, #20]	; (8000348 <NRF24_ToggleFeatures+0x58>)
 8000334:	f001 fd66 	bl	8001e04 <HAL_SPI_Transmit>
    CS_OFF;
 8000338:	2090      	movs	r0, #144	; 0x90
 800033a:	2201      	movs	r2, #1
 800033c:	2101      	movs	r1, #1
 800033e:	05c0      	lsls	r0, r0, #23
 8000340:	f000 fdd9 	bl	8000ef6 <HAL_GPIO_WritePin>
}
 8000344:	b002      	add	sp, #8
 8000346:	bd10      	pop	{r4, pc}
 8000348:	200000a0 	.word	0x200000a0
 800034c:	20000018 	.word	0x20000018
 8000350:	00895440 	.word	0x00895440

08000354 <NRF24_Read_Buf>:
//-----------------------------------------------
void NRF24_Read_Buf(uint8_t addr, uint8_t *pBuf, uint8_t bytes) {
 8000354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000356:	b085      	sub	sp, #20
 8000358:	9101      	str	r1, [sp, #4]
 800035a:	9202      	str	r2, [sp, #8]
 800035c:	ab02      	add	r3, sp, #8
 800035e:	1ddf      	adds	r7, r3, #7
 8000360:	71d8      	strb	r0, [r3, #7]
    CS_ON;
 8000362:	2490      	movs	r4, #144	; 0x90
 8000364:	05e4      	lsls	r4, r4, #23
 8000366:	2200      	movs	r2, #0
 8000368:	2101      	movs	r1, #1
 800036a:	0020      	movs	r0, r4
 800036c:	f000 fdc3 	bl	8000ef6 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &addr, 1, 1000); //отправим адрес в шину
 8000370:	26fa      	movs	r6, #250	; 0xfa
 8000372:	00b6      	lsls	r6, r6, #2
 8000374:	4d0a      	ldr	r5, [pc, #40]	; (80003a0 <NRF24_Read_Buf+0x4c>)
 8000376:	0033      	movs	r3, r6
 8000378:	2201      	movs	r2, #1
 800037a:	0039      	movs	r1, r7
 800037c:	0028      	movs	r0, r5
 800037e:	f001 fd41 	bl	8001e04 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, pBuf, bytes, 1000); //отправим данные в буфер
 8000382:	466b      	mov	r3, sp
 8000384:	891a      	ldrh	r2, [r3, #8]
 8000386:	0033      	movs	r3, r6
 8000388:	9901      	ldr	r1, [sp, #4]
 800038a:	0028      	movs	r0, r5
 800038c:	f001 ff92 	bl	80022b4 <HAL_SPI_Receive>
    CS_OFF;
 8000390:	2201      	movs	r2, #1
 8000392:	2101      	movs	r1, #1
 8000394:	0020      	movs	r0, r4
 8000396:	f000 fdae 	bl	8000ef6 <HAL_GPIO_WritePin>
}
 800039a:	b005      	add	sp, #20
 800039c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	200000a0 	.word	0x200000a0

080003a4 <NRF24_Write_Buf>:
//------------------------------------------------
void NRF24_Write_Buf(uint8_t addr, uint8_t *pBuf, uint8_t bytes) {
 80003a4:	b570      	push	{r4, r5, r6, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	000d      	movs	r5, r1
 80003aa:	0014      	movs	r4, r2
 80003ac:	466b      	mov	r3, sp
 80003ae:	1dde      	adds	r6, r3, #7
    addr |= W_REGISTER; //включим бит записи в адрес
 80003b0:	2320      	movs	r3, #32
 80003b2:	4318      	orrs	r0, r3
 80003b4:	7030      	strb	r0, [r6, #0]
    CS_ON;
 80003b6:	2090      	movs	r0, #144	; 0x90
 80003b8:	2200      	movs	r2, #0
 80003ba:	2101      	movs	r1, #1
 80003bc:	05c0      	lsls	r0, r0, #23
 80003be:	f000 fd9a 	bl	8000ef6 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &addr, 1, 1000); //отправим адрес в шину
 80003c2:	23fa      	movs	r3, #250	; 0xfa
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	2201      	movs	r2, #1
 80003c8:	0031      	movs	r1, r6
 80003ca:	480d      	ldr	r0, [pc, #52]	; (8000400 <NRF24_Write_Buf+0x5c>)
 80003cc:	f001 fd1a 	bl	8001e04 <HAL_SPI_Transmit>
    micros *= (SystemCoreClock / 1000000) / 9;
 80003d0:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <NRF24_Write_Buf+0x60>)
 80003d2:	6818      	ldr	r0, [r3, #0]
 80003d4:	490c      	ldr	r1, [pc, #48]	; (8000408 <NRF24_Write_Buf+0x64>)
 80003d6:	f7ff fea1 	bl	800011c <__udivsi3>
    while (micros--);
 80003da:	0003      	movs	r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d1fb      	bne.n	80003da <NRF24_Write_Buf+0x36>
    DelayMicro(1);
    HAL_SPI_Transmit(&hspi1, pBuf, bytes, 1000); //отправим данные в буфер
 80003e2:	33fa      	adds	r3, #250	; 0xfa
 80003e4:	b2a2      	uxth	r2, r4
 80003e6:	009b      	lsls	r3, r3, #2
 80003e8:	0029      	movs	r1, r5
 80003ea:	4805      	ldr	r0, [pc, #20]	; (8000400 <NRF24_Write_Buf+0x5c>)
 80003ec:	f001 fd0a 	bl	8001e04 <HAL_SPI_Transmit>
    CS_OFF;
 80003f0:	2090      	movs	r0, #144	; 0x90
 80003f2:	2201      	movs	r2, #1
 80003f4:	2101      	movs	r1, #1
 80003f6:	05c0      	lsls	r0, r0, #23
 80003f8:	f000 fd7d 	bl	8000ef6 <HAL_GPIO_WritePin>
}
 80003fc:	b002      	add	sp, #8
 80003fe:	bd70      	pop	{r4, r5, r6, pc}
 8000400:	200000a0 	.word	0x200000a0
 8000404:	20000018 	.word	0x20000018
 8000408:	00895440 	.word	0x00895440

0800040c <NRF24_FlushRX>:
//------------------------------------------------
void NRF24_FlushRX(void) {
 800040c:	b510      	push	{r4, lr}
 800040e:	b082      	sub	sp, #8
    uint8_t dt[1] = { FLUSH_RX };
 8000410:	ac01      	add	r4, sp, #4
 8000412:	23e2      	movs	r3, #226	; 0xe2
 8000414:	7023      	strb	r3, [r4, #0]
    CS_ON;
 8000416:	2090      	movs	r0, #144	; 0x90
 8000418:	2200      	movs	r2, #0
 800041a:	2101      	movs	r1, #1
 800041c:	05c0      	lsls	r0, r0, #23
 800041e:	f000 fd6a 	bl	8000ef6 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, dt, 1, 1000);
 8000422:	23fa      	movs	r3, #250	; 0xfa
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	2201      	movs	r2, #1
 8000428:	0021      	movs	r1, r4
 800042a:	480a      	ldr	r0, [pc, #40]	; (8000454 <NRF24_FlushRX+0x48>)
 800042c:	f001 fcea 	bl	8001e04 <HAL_SPI_Transmit>
    micros *= (SystemCoreClock / 1000000) / 9;
 8000430:	4b09      	ldr	r3, [pc, #36]	; (8000458 <NRF24_FlushRX+0x4c>)
 8000432:	6818      	ldr	r0, [r3, #0]
 8000434:	4909      	ldr	r1, [pc, #36]	; (800045c <NRF24_FlushRX+0x50>)
 8000436:	f7ff fe71 	bl	800011c <__udivsi3>
    while (micros--);
 800043a:	0003      	movs	r3, r0
 800043c:	3801      	subs	r0, #1
 800043e:	2b00      	cmp	r3, #0
 8000440:	d1fb      	bne.n	800043a <NRF24_FlushRX+0x2e>
    DelayMicro(1);
    CS_OFF;
 8000442:	2090      	movs	r0, #144	; 0x90
 8000444:	2201      	movs	r2, #1
 8000446:	2101      	movs	r1, #1
 8000448:	05c0      	lsls	r0, r0, #23
 800044a:	f000 fd54 	bl	8000ef6 <HAL_GPIO_WritePin>
}
 800044e:	b002      	add	sp, #8
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	200000a0 	.word	0x200000a0
 8000458:	20000018 	.word	0x20000018
 800045c:	00895440 	.word	0x00895440

08000460 <NRF24_FlushTX>:
//------------------------------------------------
void NRF24_FlushTX(void) {
 8000460:	b510      	push	{r4, lr}
 8000462:	b082      	sub	sp, #8
    uint8_t dt[1] = { FLUSH_TX };
 8000464:	ac01      	add	r4, sp, #4
 8000466:	23e1      	movs	r3, #225	; 0xe1
 8000468:	7023      	strb	r3, [r4, #0]
    CS_ON;
 800046a:	2090      	movs	r0, #144	; 0x90
 800046c:	2200      	movs	r2, #0
 800046e:	2101      	movs	r1, #1
 8000470:	05c0      	lsls	r0, r0, #23
 8000472:	f000 fd40 	bl	8000ef6 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, dt, 1, 1000);
 8000476:	23fa      	movs	r3, #250	; 0xfa
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	2201      	movs	r2, #1
 800047c:	0021      	movs	r1, r4
 800047e:	480a      	ldr	r0, [pc, #40]	; (80004a8 <NRF24_FlushTX+0x48>)
 8000480:	f001 fcc0 	bl	8001e04 <HAL_SPI_Transmit>
    micros *= (SystemCoreClock / 1000000) / 9;
 8000484:	4b09      	ldr	r3, [pc, #36]	; (80004ac <NRF24_FlushTX+0x4c>)
 8000486:	6818      	ldr	r0, [r3, #0]
 8000488:	4909      	ldr	r1, [pc, #36]	; (80004b0 <NRF24_FlushTX+0x50>)
 800048a:	f7ff fe47 	bl	800011c <__udivsi3>
    while (micros--);
 800048e:	0003      	movs	r3, r0
 8000490:	3801      	subs	r0, #1
 8000492:	2b00      	cmp	r3, #0
 8000494:	d1fb      	bne.n	800048e <NRF24_FlushTX+0x2e>
    DelayMicro(1);
    CS_OFF;
 8000496:	2090      	movs	r0, #144	; 0x90
 8000498:	2201      	movs	r2, #1
 800049a:	2101      	movs	r1, #1
 800049c:	05c0      	lsls	r0, r0, #23
 800049e:	f000 fd2a 	bl	8000ef6 <HAL_GPIO_WritePin>
}
 80004a2:	b002      	add	sp, #8
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	200000a0 	.word	0x200000a0
 80004ac:	20000018 	.word	0x20000018
 80004b0:	00895440 	.word	0x00895440

080004b4 <NRF24_RX_Mode>:
//------------------------------------------------
void NRF24_RX_Mode(void) {
 80004b4:	b510      	push	{r4, lr}
    uint8_t regval = 0x00;
    regval = NRF24_ReadReg(CONFIG);
 80004b6:	2000      	movs	r0, #0
 80004b8:	f7ff febc 	bl	8000234 <NRF24_ReadReg>
    //разбудим модуль и переведём его в режим приёмника, включив биты PWR_UP и PRIM_RX
    regval |= (1 << PWR_UP) | (1 << PRIM_RX);
 80004bc:	2103      	movs	r1, #3
 80004be:	4301      	orrs	r1, r0
 80004c0:	b2c9      	uxtb	r1, r1
    NRF24_WriteReg(CONFIG, regval);
 80004c2:	2000      	movs	r0, #0
 80004c4:	f7ff feec 	bl	80002a0 <NRF24_WriteReg>
    CE_SET;
 80004c8:	2090      	movs	r0, #144	; 0x90
 80004ca:	2201      	movs	r2, #1
 80004cc:	2102      	movs	r1, #2
 80004ce:	05c0      	lsls	r0, r0, #23
 80004d0:	f000 fd11 	bl	8000ef6 <HAL_GPIO_WritePin>
 80004d4:	2496      	movs	r4, #150	; 0x96
    micros *= (SystemCoreClock / 1000000) / 9;
 80004d6:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <NRF24_RX_Mode+0x40>)
 80004d8:	6818      	ldr	r0, [r3, #0]
 80004da:	4907      	ldr	r1, [pc, #28]	; (80004f8 <NRF24_RX_Mode+0x44>)
 80004dc:	f7ff fe1e 	bl	800011c <__udivsi3>
 80004e0:	4344      	muls	r4, r0
    while (micros--);
 80004e2:	0023      	movs	r3, r4
 80004e4:	3c01      	subs	r4, #1
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d1fb      	bne.n	80004e2 <NRF24_RX_Mode+0x2e>
    DelayMicro(150); //Задержка минимум 130 мкс
    // Flush buffers
    NRF24_FlushRX();
 80004ea:	f7ff ff8f 	bl	800040c <NRF24_FlushRX>
    NRF24_FlushTX();
 80004ee:	f7ff ffb7 	bl	8000460 <NRF24_FlushTX>
}
 80004f2:	bd10      	pop	{r4, pc}
 80004f4:	20000018 	.word	0x20000018
 80004f8:	00895440 	.word	0x00895440

080004fc <NRF24_ini>:
//------------------------------------------------
void NRF24_ini(void) {
 80004fc:	b510      	push	{r4, lr}
    CE_RESET;
 80004fe:	2090      	movs	r0, #144	; 0x90
 8000500:	2200      	movs	r2, #0
 8000502:	2102      	movs	r1, #2
 8000504:	05c0      	lsls	r0, r0, #23
 8000506:	f000 fcf6 	bl	8000ef6 <HAL_GPIO_WritePin>
 800050a:	4c2c      	ldr	r4, [pc, #176]	; (80005bc <NRF24_ini+0xc0>)
    micros *= (SystemCoreClock / 1000000) / 9;
 800050c:	4b2c      	ldr	r3, [pc, #176]	; (80005c0 <NRF24_ini+0xc4>)
 800050e:	6818      	ldr	r0, [r3, #0]
 8000510:	492c      	ldr	r1, [pc, #176]	; (80005c4 <NRF24_ini+0xc8>)
 8000512:	f7ff fe03 	bl	800011c <__udivsi3>
 8000516:	4344      	muls	r4, r0
    while (micros--);
 8000518:	0023      	movs	r3, r4
 800051a:	3c01      	subs	r4, #1
 800051c:	2b00      	cmp	r3, #0
 800051e:	d1fb      	bne.n	8000518 <NRF24_ini+0x1c>
    DelayMicro(5000);
    NRF24_WriteReg(CONFIG, 0x0a); // Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 8000520:	210a      	movs	r1, #10
 8000522:	2000      	movs	r0, #0
 8000524:	f7ff febc 	bl	80002a0 <NRF24_WriteReg>
 8000528:	4c24      	ldr	r4, [pc, #144]	; (80005bc <NRF24_ini+0xc0>)
    micros *= (SystemCoreClock / 1000000) / 9;
 800052a:	4b25      	ldr	r3, [pc, #148]	; (80005c0 <NRF24_ini+0xc4>)
 800052c:	6818      	ldr	r0, [r3, #0]
 800052e:	4925      	ldr	r1, [pc, #148]	; (80005c4 <NRF24_ini+0xc8>)
 8000530:	f7ff fdf4 	bl	800011c <__udivsi3>
 8000534:	4344      	muls	r4, r0
    while (micros--);
 8000536:	0023      	movs	r3, r4
 8000538:	3c01      	subs	r4, #1
 800053a:	2b00      	cmp	r3, #0
 800053c:	d1fb      	bne.n	8000536 <NRF24_ini+0x3a>
    DelayMicro(5000);
    NRF24_WriteReg(EN_AA, 0x02); // Enable Pipe1
 800053e:	2102      	movs	r1, #2
 8000540:	2001      	movs	r0, #1
 8000542:	f7ff fead 	bl	80002a0 <NRF24_WriteReg>
    NRF24_WriteReg(EN_RXADDR, 0x02); // Enable Pipe1
 8000546:	2102      	movs	r1, #2
 8000548:	2002      	movs	r0, #2
 800054a:	f7ff fea9 	bl	80002a0 <NRF24_WriteReg>
    NRF24_WriteReg(SETUP_AW, 0x01); // Setup address width=3 bytes
 800054e:	2101      	movs	r1, #1
 8000550:	2003      	movs	r0, #3
 8000552:	f7ff fea5 	bl	80002a0 <NRF24_WriteReg>
    NRF24_WriteReg(SETUP_RETR, 0x5F); // // 1500us, 15 retrans
 8000556:	215f      	movs	r1, #95	; 0x5f
 8000558:	2004      	movs	r0, #4
 800055a:	f7ff fea1 	bl	80002a0 <NRF24_WriteReg>
    NRF24_ToggleFeatures();
 800055e:	f7ff fec7 	bl	80002f0 <NRF24_ToggleFeatures>
    NRF24_WriteReg(FEATURE, 0);
 8000562:	2100      	movs	r1, #0
 8000564:	201d      	movs	r0, #29
 8000566:	f7ff fe9b 	bl	80002a0 <NRF24_WriteReg>
    NRF24_WriteReg(DYNPD, 0);
 800056a:	2100      	movs	r1, #0
 800056c:	201c      	movs	r0, #28
 800056e:	f7ff fe97 	bl	80002a0 <NRF24_WriteReg>
    NRF24_WriteReg(STATUS, 0x70); //Reset flags for IRQ
 8000572:	2170      	movs	r1, #112	; 0x70
 8000574:	2007      	movs	r0, #7
 8000576:	f7ff fe93 	bl	80002a0 <NRF24_WriteReg>
    NRF24_WriteReg(RF_CH, 76); // частота 2476 MHz
 800057a:	214c      	movs	r1, #76	; 0x4c
 800057c:	2005      	movs	r0, #5
 800057e:	f7ff fe8f 	bl	80002a0 <NRF24_WriteReg>
    NRF24_WriteReg(RF_SETUP, 0x06); //TX_PWR:0dBm, Datarate:1Mbps
 8000582:	2106      	movs	r1, #6
 8000584:	2006      	movs	r0, #6
 8000586:	f7ff fe8b 	bl	80002a0 <NRF24_WriteReg>
    NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 800058a:	4c0f      	ldr	r4, [pc, #60]	; (80005c8 <NRF24_ini+0xcc>)
 800058c:	2203      	movs	r2, #3
 800058e:	0021      	movs	r1, r4
 8000590:	2010      	movs	r0, #16
 8000592:	f7ff ff07 	bl	80003a4 <NRF24_Write_Buf>
    NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS, TX_ADR_WIDTH);
 8000596:	2203      	movs	r2, #3
 8000598:	0021      	movs	r1, r4
 800059a:	200b      	movs	r0, #11
 800059c:	f7ff ff02 	bl	80003a4 <NRF24_Write_Buf>
    NRF24_WriteReg(RX_PW_P1, TX_PLOAD_WIDTH); //Number of bytes in RX payload in data pipe 1
 80005a0:	2110      	movs	r1, #16
 80005a2:	2012      	movs	r0, #18
 80005a4:	f7ff fe7c 	bl	80002a0 <NRF24_WriteReg>
    //пока уходим в режим приёмника
    NRF24_RX_Mode();
 80005a8:	f7ff ff84 	bl	80004b4 <NRF24_RX_Mode>
    LED_OFF;
 80005ac:	2090      	movs	r0, #144	; 0x90
 80005ae:	2201      	movs	r2, #1
 80005b0:	2110      	movs	r1, #16
 80005b2:	05c0      	lsls	r0, r0, #23
 80005b4:	f000 fc9f 	bl	8000ef6 <HAL_GPIO_WritePin>
}
 80005b8:	bd10      	pop	{r4, pc}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	00001388 	.word	0x00001388
 80005c0:	20000018 	.word	0x20000018
 80005c4:	00895440 	.word	0x00895440
 80005c8:	20000000 	.word	0x20000000

080005cc <NRF24_Receive>:
  return regval;
}
//------------------------------------------------

uint8_t* NRF24_Receive(size_t timeout_ms)
{
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	0005      	movs	r5, r0
  uint8_t status=0x01;
  NRF24_RX_Mode();
 80005d0:	f7ff ff70 	bl	80004b4 <NRF24_RX_Mode>
  for(size_t i = 0; i < timeout_ms;i++)
 80005d4:	2400      	movs	r4, #0
 80005d6:	42ac      	cmp	r4, r5
 80005d8:	d20d      	bcs.n	80005f6 <NRF24_Receive+0x2a>
  {
	  HAL_Delay(1);
 80005da:	2001      	movs	r0, #1
 80005dc:	f000 fb5e 	bl	8000c9c <HAL_Delay>
	  if((GPIO_PinState)IRQ != GPIO_PIN_SET)
 80005e0:	2102      	movs	r1, #2
 80005e2:	4819      	ldr	r0, [pc, #100]	; (8000648 <NRF24_Receive+0x7c>)
 80005e4:	f000 fc80 	bl	8000ee8 <HAL_GPIO_ReadPin>
 80005e8:	2801      	cmp	r0, #1
 80005ea:	d104      	bne.n	80005f6 <NRF24_Receive+0x2a>
	  {
		  break;
	  }
	  if(i == timeout_ms - 1)
 80005ec:	1e6b      	subs	r3, r5, #1
 80005ee:	42a3      	cmp	r3, r4
 80005f0:	d025      	beq.n	800063e <NRF24_Receive+0x72>
  for(size_t i = 0; i < timeout_ms;i++)
 80005f2:	3401      	adds	r4, #1
 80005f4:	e7ef      	b.n	80005d6 <NRF24_Receive+0xa>
	  {
		  return NULL;
	  }
  }
  status = NRF24_ReadReg(STATUS);
 80005f6:	2007      	movs	r0, #7
 80005f8:	f7ff fe1c 	bl	8000234 <NRF24_ReadReg>
  LED_TGL;
 80005fc:	2090      	movs	r0, #144	; 0x90
 80005fe:	2110      	movs	r1, #16
 8000600:	05c0      	lsls	r0, r0, #23
 8000602:	f000 fc7e 	bl	8000f02 <HAL_GPIO_TogglePin>
 8000606:	240a      	movs	r4, #10
    micros *= (SystemCoreClock / 1000000) / 9;
 8000608:	4b10      	ldr	r3, [pc, #64]	; (800064c <NRF24_Receive+0x80>)
 800060a:	6818      	ldr	r0, [r3, #0]
 800060c:	4910      	ldr	r1, [pc, #64]	; (8000650 <NRF24_Receive+0x84>)
 800060e:	f7ff fd85 	bl	800011c <__udivsi3>
 8000612:	4344      	muls	r4, r0
    while (micros--);
 8000614:	0023      	movs	r3, r4
 8000616:	3c01      	subs	r4, #1
 8000618:	2b00      	cmp	r3, #0
 800061a:	d1fb      	bne.n	8000614 <NRF24_Receive+0x48>
  DelayMicro(10);
  status = NRF24_ReadReg(STATUS);
 800061c:	2007      	movs	r0, #7
 800061e:	f7ff fe09 	bl	8000234 <NRF24_ReadReg>
  if(status & 0x40)
 8000622:	0643      	lsls	r3, r0, #25
 8000624:	d50d      	bpl.n	8000642 <NRF24_Receive+0x76>
  {
	  NRF24_Read_Buf(RD_RX_PLOAD, RX_BUF, TX_PLOAD_WIDTH);
 8000626:	4c0b      	ldr	r4, [pc, #44]	; (8000654 <NRF24_Receive+0x88>)
 8000628:	2210      	movs	r2, #16
 800062a:	0021      	movs	r1, r4
 800062c:	2061      	movs	r0, #97	; 0x61
 800062e:	f7ff fe91 	bl	8000354 <NRF24_Read_Buf>
	  NRF24_WriteReg(STATUS, 0x40);
 8000632:	2140      	movs	r1, #64	; 0x40
 8000634:	2007      	movs	r0, #7
 8000636:	f7ff fe33 	bl	80002a0 <NRF24_WriteReg>
	  return RX_BUF;
 800063a:	0020      	movs	r0, r4
  }
  return NULL;
}
 800063c:	bd70      	pop	{r4, r5, r6, pc}
		  return NULL;
 800063e:	2000      	movs	r0, #0
 8000640:	e7fc      	b.n	800063c <NRF24_Receive+0x70>
  return NULL;
 8000642:	2000      	movs	r0, #0
 8000644:	e7fa      	b.n	800063c <NRF24_Receive+0x70>
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	48000400 	.word	0x48000400
 800064c:	20000018 	.word	0x20000018
 8000650:	00895440 	.word	0x00895440
 8000654:	20000040 	.word	0x20000040

08000658 <LCD_WriteByteI2CLCD>:
extern I2C_HandleTypeDef hi2c1;
char str1[100];
uint8_t portlcd;  // data of port in LCD

void LCD_WriteByteI2CLCD(uint8_t bt)
{
 8000658:	b500      	push	{lr}
 800065a:	b083      	sub	sp, #12
	buf[0] = bt;
 800065c:	4a05      	ldr	r2, [pc, #20]	; (8000674 <LCD_WriteByteI2CLCD+0x1c>)
 800065e:	7010      	strb	r0, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x4E, buf, 1, 1000);
 8000660:	23fa      	movs	r3, #250	; 0xfa
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2301      	movs	r3, #1
 8000668:	214e      	movs	r1, #78	; 0x4e
 800066a:	4803      	ldr	r0, [pc, #12]	; (8000678 <LCD_WriteByteI2CLCD+0x20>)
 800066c:	f000 fd92 	bl	8001194 <HAL_I2C_Master_Transmit>
}
 8000670:	b003      	add	sp, #12
 8000672:	bd00      	pop	{pc}
 8000674:	20000050 	.word	0x20000050
 8000678:	20000054 	.word	0x20000054

0800067c <sendhalfbyte>:
	micros *= (SystemCoreClock / 1000000) / 5;
	while (micros--);
}

void sendhalfbyte(uint8_t c)
{
 800067c:	b570      	push	{r4, r5, r6, lr}
	c <<=4;
 800067e:	0100      	lsls	r0, r0, #4
 8000680:	b2c5      	uxtb	r5, r0
	e_set();
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <sendhalfbyte+0x58>)
 8000684:	7818      	ldrb	r0, [r3, #0]
 8000686:	2204      	movs	r2, #4
 8000688:	4310      	orrs	r0, r2
 800068a:	7018      	strb	r0, [r3, #0]
 800068c:	f7ff ffe4 	bl	8000658 <LCD_WriteByteI2CLCD>
 8000690:	2432      	movs	r4, #50	; 0x32
	micros *= (SystemCoreClock / 1000000) / 5;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <sendhalfbyte+0x5c>)
 8000694:	6818      	ldr	r0, [r3, #0]
 8000696:	4911      	ldr	r1, [pc, #68]	; (80006dc <sendhalfbyte+0x60>)
 8000698:	f7ff fd40 	bl	800011c <__udivsi3>
 800069c:	4344      	muls	r4, r0
	while (micros--);
 800069e:	0023      	movs	r3, r4
 80006a0:	3c01      	subs	r4, #1
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d1fb      	bne.n	800069e <sendhalfbyte+0x22>
	DelayMicro(50);
	LCD_WriteByteI2CLCD(portlcd | c);
 80006a6:	4c0b      	ldr	r4, [pc, #44]	; (80006d4 <sendhalfbyte+0x58>)
 80006a8:	7820      	ldrb	r0, [r4, #0]
 80006aa:	4328      	orrs	r0, r5
 80006ac:	f7ff ffd4 	bl	8000658 <LCD_WriteByteI2CLCD>
	e_reset();
 80006b0:	7820      	ldrb	r0, [r4, #0]
 80006b2:	2304      	movs	r3, #4
 80006b4:	4398      	bics	r0, r3
 80006b6:	7020      	strb	r0, [r4, #0]
 80006b8:	f7ff ffce 	bl	8000658 <LCD_WriteByteI2CLCD>
 80006bc:	2432      	movs	r4, #50	; 0x32
	micros *= (SystemCoreClock / 1000000) / 5;
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <sendhalfbyte+0x5c>)
 80006c0:	6818      	ldr	r0, [r3, #0]
 80006c2:	4906      	ldr	r1, [pc, #24]	; (80006dc <sendhalfbyte+0x60>)
 80006c4:	f7ff fd2a 	bl	800011c <__udivsi3>
 80006c8:	4344      	muls	r4, r0
	while (micros--);
 80006ca:	0023      	movs	r3, r4
 80006cc:	3c01      	subs	r4, #1
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d1fb      	bne.n	80006ca <sendhalfbyte+0x4e>
	DelayMicro(50);
}
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	20000051 	.word	0x20000051
 80006d8:	20000018 	.word	0x20000018
 80006dc:	004c4b40 	.word	0x004c4b40

080006e0 <sendbyte>:

void sendbyte(uint8_t c, uint8_t mode)
{
 80006e0:	b510      	push	{r4, lr}
 80006e2:	0004      	movs	r4, r0
	if (mode == 0)
 80006e4:	2900      	cmp	r1, #0
 80006e6:	d00d      	beq.n	8000704 <sendbyte+0x24>
	{
		rs_reset();
	}
	else
	{
		rs_set();
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <sendbyte+0x34>)
 80006ea:	7818      	ldrb	r0, [r3, #0]
 80006ec:	2201      	movs	r2, #1
 80006ee:	4310      	orrs	r0, r2
 80006f0:	7018      	strb	r0, [r3, #0]
 80006f2:	f7ff ffb1 	bl	8000658 <LCD_WriteByteI2CLCD>
	}
	uint8_t hc = 0;
	hc = c >> 4;
 80006f6:	0920      	lsrs	r0, r4, #4
	sendhalfbyte(hc);
 80006f8:	f7ff ffc0 	bl	800067c <sendhalfbyte>
	sendhalfbyte(c);
 80006fc:	0020      	movs	r0, r4
 80006fe:	f7ff ffbd 	bl	800067c <sendhalfbyte>
}
 8000702:	bd10      	pop	{r4, pc}
		rs_reset();
 8000704:	4b03      	ldr	r3, [pc, #12]	; (8000714 <sendbyte+0x34>)
 8000706:	7818      	ldrb	r0, [r3, #0]
 8000708:	2201      	movs	r2, #1
 800070a:	4390      	bics	r0, r2
 800070c:	7018      	strb	r0, [r3, #0]
 800070e:	f7ff ffa3 	bl	8000658 <LCD_WriteByteI2CLCD>
 8000712:	e7f0      	b.n	80006f6 <sendbyte+0x16>
 8000714:	20000051 	.word	0x20000051

08000718 <LCD_Clear>:

void LCD_Clear(void)
{
 8000718:	b510      	push	{r4, lr}
	sendbyte(0x01, 0);
 800071a:	2100      	movs	r1, #0
 800071c:	2001      	movs	r0, #1
 800071e:	f7ff ffdf 	bl	80006e0 <sendbyte>
	HAL_Delay(2);
 8000722:	2002      	movs	r0, #2
 8000724:	f000 faba 	bl	8000c9c <HAL_Delay>
}
 8000728:	bd10      	pop	{r4, pc}

0800072a <LCD_SetPos>:
{
	sendbyte(ch, 1);
}

void LCD_SetPos(uint8_t x, uint8_t y)
{
 800072a:	b510      	push	{r4, lr}
	switch (y)
 800072c:	2900      	cmp	r1, #0
 800072e:	d002      	beq.n	8000736 <LCD_SetPos+0xc>
 8000730:	2901      	cmp	r1, #1
 8000732:	d00b      	beq.n	800074c <LCD_SetPos+0x22>
	case 1:
		sendbyte((x + 0x40) | 0x80, 0);
		HAL_Delay(1);
		break;
	}
}
 8000734:	bd10      	pop	{r4, pc}
		sendbyte(x | 0x80, 0);
 8000736:	2380      	movs	r3, #128	; 0x80
 8000738:	425b      	negs	r3, r3
 800073a:	4318      	orrs	r0, r3
 800073c:	b2c0      	uxtb	r0, r0
 800073e:	2100      	movs	r1, #0
 8000740:	f7ff ffce 	bl	80006e0 <sendbyte>
		HAL_Delay(1);
 8000744:	2001      	movs	r0, #1
 8000746:	f000 faa9 	bl	8000c9c <HAL_Delay>
		break;
 800074a:	e7f3      	b.n	8000734 <LCD_SetPos+0xa>
		sendbyte((x + 0x40) | 0x80, 0);
 800074c:	3040      	adds	r0, #64	; 0x40
 800074e:	b240      	sxtb	r0, r0
 8000750:	2380      	movs	r3, #128	; 0x80
 8000752:	425b      	negs	r3, r3
 8000754:	4318      	orrs	r0, r3
 8000756:	b2c0      	uxtb	r0, r0
 8000758:	2100      	movs	r1, #0
 800075a:	f7ff ffc1 	bl	80006e0 <sendbyte>
		HAL_Delay(1);
 800075e:	2001      	movs	r0, #1
 8000760:	f000 fa9c 	bl	8000c9c <HAL_Delay>
}
 8000764:	e7e6      	b.n	8000734 <LCD_SetPos+0xa>
	...

08000768 <LCD_ini>:

void LCD_ini(void)
{
 8000768:	b510      	push	{r4, lr}
	HAL_Delay(15);
 800076a:	200f      	movs	r0, #15
 800076c:	f000 fa96 	bl	8000c9c <HAL_Delay>
	sendhalfbyte(0x03);
 8000770:	2003      	movs	r0, #3
 8000772:	f7ff ff83 	bl	800067c <sendhalfbyte>
	HAL_Delay(4);
 8000776:	2004      	movs	r0, #4
 8000778:	f000 fa90 	bl	8000c9c <HAL_Delay>
	sendhalfbyte(0x03);
 800077c:	2003      	movs	r0, #3
 800077e:	f7ff ff7d 	bl	800067c <sendhalfbyte>
 8000782:	2464      	movs	r4, #100	; 0x64
	micros *= (SystemCoreClock / 1000000) / 5;
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <LCD_ini+0x9c>)
 8000786:	6818      	ldr	r0, [r3, #0]
 8000788:	491f      	ldr	r1, [pc, #124]	; (8000808 <LCD_ini+0xa0>)
 800078a:	f7ff fcc7 	bl	800011c <__udivsi3>
 800078e:	4344      	muls	r4, r0
	while (micros--);
 8000790:	0023      	movs	r3, r4
 8000792:	3c01      	subs	r4, #1
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1fb      	bne.n	8000790 <LCD_ini+0x28>
	DelayMicro(100);
	sendhalfbyte(0x03);
 8000798:	2003      	movs	r0, #3
 800079a:	f7ff ff6f 	bl	800067c <sendhalfbyte>
	HAL_Delay(1);
 800079e:	2001      	movs	r0, #1
 80007a0:	f000 fa7c 	bl	8000c9c <HAL_Delay>
	sendhalfbyte(0x02);
 80007a4:	2002      	movs	r0, #2
 80007a6:	f7ff ff69 	bl	800067c <sendhalfbyte>
	HAL_Delay(1);
 80007aa:	2001      	movs	r0, #1
 80007ac:	f000 fa76 	bl	8000c9c <HAL_Delay>
	sendbyte(0x28,0);//режим 4 бит, 2 линии (дл¤ нашего большого диспле¤ это 4 линии, шрифт 5х8
 80007b0:	2100      	movs	r1, #0
 80007b2:	2028      	movs	r0, #40	; 0x28
 80007b4:	f7ff ff94 	bl	80006e0 <sendbyte>
	HAL_Delay(1);
 80007b8:	2001      	movs	r0, #1
 80007ba:	f000 fa6f 	bl	8000c9c <HAL_Delay>
	sendbyte(0x0C,0);//дисплей включаем (D=1), курсоры никакие не нужны
 80007be:	2100      	movs	r1, #0
 80007c0:	200c      	movs	r0, #12
 80007c2:	f7ff ff8d 	bl	80006e0 <sendbyte>
	HAL_Delay(1);
 80007c6:	2001      	movs	r0, #1
 80007c8:	f000 fa68 	bl	8000c9c <HAL_Delay>
	sendbyte(0x01,0);//уберем мусор
 80007cc:	2100      	movs	r1, #0
 80007ce:	2001      	movs	r0, #1
 80007d0:	f7ff ff86 	bl	80006e0 <sendbyte>
	HAL_Delay(2);
 80007d4:	2002      	movs	r0, #2
 80007d6:	f000 fa61 	bl	8000c9c <HAL_Delay>
	sendbyte(0x06,0);//пишем влево
 80007da:	2100      	movs	r1, #0
 80007dc:	2006      	movs	r0, #6
 80007de:	f7ff ff7f 	bl	80006e0 <sendbyte>
	HAL_Delay(1);
 80007e2:	2001      	movs	r0, #1
 80007e4:	f000 fa5a 	bl	8000c9c <HAL_Delay>
	setled();//подсветка
 80007e8:	4c08      	ldr	r4, [pc, #32]	; (800080c <LCD_ini+0xa4>)
 80007ea:	7820      	ldrb	r0, [r4, #0]
 80007ec:	2308      	movs	r3, #8
 80007ee:	4318      	orrs	r0, r3
 80007f0:	7020      	strb	r0, [r4, #0]
 80007f2:	f7ff ff31 	bl	8000658 <LCD_WriteByteI2CLCD>
	setwrite();//запись
 80007f6:	7820      	ldrb	r0, [r4, #0]
 80007f8:	2302      	movs	r3, #2
 80007fa:	4398      	bics	r0, r3
 80007fc:	7020      	strb	r0, [r4, #0]
 80007fe:	f7ff ff2b 	bl	8000658 <LCD_WriteByteI2CLCD>
}
 8000802:	bd10      	pop	{r4, pc}
 8000804:	20000018 	.word	0x20000018
 8000808:	004c4b40 	.word	0x004c4b40
 800080c:	20000051 	.word	0x20000051

08000810 <LCD_String>:

void LCD_String(char *str)
{
 8000810:	b570      	push	{r4, r5, r6, lr}
 8000812:	0005      	movs	r5, r0
	uint8_t i = 0;
 8000814:	2400      	movs	r4, #0
	while (str[i] != 0)
 8000816:	e004      	b.n	8000822 <LCD_String+0x12>
	{
		sendbyte(str[i], 1);
 8000818:	2101      	movs	r1, #1
 800081a:	f7ff ff61 	bl	80006e0 <sendbyte>
		i++;
 800081e:	3401      	adds	r4, #1
 8000820:	b2e4      	uxtb	r4, r4
	while (str[i] != 0)
 8000822:	5d28      	ldrb	r0, [r5, r4]
 8000824:	2800      	cmp	r0, #0
 8000826:	d1f7      	bne.n	8000818 <LCD_String+0x8>
	}
}
 8000828:	bd70      	pop	{r4, r5, r6, pc}
	...

0800082c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800082c:	b530      	push	{r4, r5, lr}
 800082e:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000830:	2214      	movs	r2, #20
 8000832:	2100      	movs	r1, #0
 8000834:	a803      	add	r0, sp, #12
 8000836:	f001 fe2f 	bl	8002498 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800083a:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <MX_GPIO_Init+0x80>)
 800083c:	6959      	ldr	r1, [r3, #20]
 800083e:	2080      	movs	r0, #128	; 0x80
 8000840:	03c0      	lsls	r0, r0, #15
 8000842:	4301      	orrs	r1, r0
 8000844:	6159      	str	r1, [r3, #20]
 8000846:	695a      	ldr	r2, [r3, #20]
 8000848:	4002      	ands	r2, r0
 800084a:	9200      	str	r2, [sp, #0]
 800084c:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	6959      	ldr	r1, [r3, #20]
 8000850:	2080      	movs	r0, #128	; 0x80
 8000852:	0280      	lsls	r0, r0, #10
 8000854:	4301      	orrs	r1, r0
 8000856:	6159      	str	r1, [r3, #20]
 8000858:	695a      	ldr	r2, [r3, #20]
 800085a:	4002      	ands	r2, r0
 800085c:	9201      	str	r2, [sp, #4]
 800085e:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000860:	695a      	ldr	r2, [r3, #20]
 8000862:	2180      	movs	r1, #128	; 0x80
 8000864:	02c9      	lsls	r1, r1, #11
 8000866:	430a      	orrs	r2, r1
 8000868:	615a      	str	r2, [r3, #20]
 800086a:	695b      	ldr	r3, [r3, #20]
 800086c:	400b      	ands	r3, r1
 800086e:	9302      	str	r3, [sp, #8]
 8000870:	9b02      	ldr	r3, [sp, #8]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, CS_Pin | CE_Pin | LED_Pin, GPIO_PIN_RESET);
 8000872:	2590      	movs	r5, #144	; 0x90
 8000874:	05ed      	lsls	r5, r5, #23
 8000876:	2200      	movs	r2, #0
 8000878:	2113      	movs	r1, #19
 800087a:	0028      	movs	r0, r5
 800087c:	f000 fb3b 	bl	8000ef6 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : CS_Pin CE_Pin LED_Pin */
	GPIO_InitStruct.Pin = CS_Pin | CE_Pin | LED_Pin;
 8000880:	2313      	movs	r3, #19
 8000882:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	3b12      	subs	r3, #18
 8000886:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2400      	movs	r4, #0
 800088a:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	a903      	add	r1, sp, #12
 8000890:	0028      	movs	r0, r5
 8000892:	f000 fa63 	bl	8000d5c <HAL_GPIO_Init>

	/*Configure GPIO pin : IRQ_Pin */
	GPIO_InitStruct.Pin = IRQ_Pin;
 8000896:	2302      	movs	r3, #2
 8000898:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089a:	9404      	str	r4, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	9405      	str	r4, [sp, #20]
	HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 800089e:	a903      	add	r1, sp, #12
 80008a0:	4803      	ldr	r0, [pc, #12]	; (80008b0 <MX_GPIO_Init+0x84>)
 80008a2:	f000 fa5b 	bl	8000d5c <HAL_GPIO_Init>

}
 80008a6:	b009      	add	sp, #36	; 0x24
 80008a8:	bd30      	pop	{r4, r5, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	40021000 	.word	0x40021000
 80008b0:	48000400 	.word	0x48000400

080008b4 <MX_I2C1_Init>:
{
 80008b4:	b510      	push	{r4, lr}
	hi2c1.Instance = I2C1;
 80008b6:	4c0d      	ldr	r4, [pc, #52]	; (80008ec <MX_I2C1_Init+0x38>)
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <MX_I2C1_Init+0x3c>)
 80008ba:	6023      	str	r3, [r4, #0]
	hi2c1.Init.Timing = 0x2000090E;
 80008bc:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <MX_I2C1_Init+0x40>)
 80008be:	6063      	str	r3, [r4, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60a3      	str	r3, [r4, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c4:	2201      	movs	r2, #1
 80008c6:	60e2      	str	r2, [r4, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c8:	6123      	str	r3, [r4, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80008ca:	6163      	str	r3, [r4, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008cc:	61a3      	str	r3, [r4, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ce:	61e3      	str	r3, [r4, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d0:	6223      	str	r3, [r4, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008d2:	0020      	movs	r0, r4
 80008d4:	f000 fbf8 	bl	80010c8 <HAL_I2C_Init>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008d8:	2100      	movs	r1, #0
 80008da:	0020      	movs	r0, r4
 80008dc:	f000 fd10 	bl	8001300 <HAL_I2CEx_ConfigAnalogFilter>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008e0:	2100      	movs	r1, #0
 80008e2:	0020      	movs	r0, r4
 80008e4:	f000 fd38 	bl	8001358 <HAL_I2CEx_ConfigDigitalFilter>
}
 80008e8:	bd10      	pop	{r4, pc}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	20000054 	.word	0x20000054
 80008f0:	40005400 	.word	0x40005400
 80008f4:	2000090e 	.word	0x2000090e

080008f8 <MX_SPI1_Init>:
{
 80008f8:	b510      	push	{r4, lr}
	hspi1.Instance = SPI1;
 80008fa:	480f      	ldr	r0, [pc, #60]	; (8000938 <MX_SPI1_Init+0x40>)
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_SPI1_Init+0x44>)
 80008fe:	6003      	str	r3, [r0, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000900:	2382      	movs	r3, #130	; 0x82
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	6043      	str	r3, [r0, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000906:	2300      	movs	r3, #0
 8000908:	6083      	str	r3, [r0, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800090a:	22e0      	movs	r2, #224	; 0xe0
 800090c:	00d2      	lsls	r2, r2, #3
 800090e:	60c2      	str	r2, [r0, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000910:	6103      	str	r3, [r0, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000912:	6143      	str	r3, [r0, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000914:	2280      	movs	r2, #128	; 0x80
 8000916:	0092      	lsls	r2, r2, #2
 8000918:	6182      	str	r2, [r0, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800091a:	3ae9      	subs	r2, #233	; 0xe9
 800091c:	3aff      	subs	r2, #255	; 0xff
 800091e:	61c2      	str	r2, [r0, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000920:	6203      	str	r3, [r0, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000922:	6243      	str	r3, [r0, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000924:	6283      	str	r3, [r0, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000926:	3a11      	subs	r2, #17
 8000928:	62c2      	str	r2, [r0, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800092a:	6303      	str	r3, [r0, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800092c:	3308      	adds	r3, #8
 800092e:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000930:	f001 fa02 	bl	8001d38 <HAL_SPI_Init>
}
 8000934:	bd10      	pop	{r4, pc}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	200000a0 	.word	0x200000a0
 800093c:	40013000 	.word	0x40013000

08000940 <SystemClock_Config>:
{
 8000940:	b510      	push	{r4, lr}
 8000942:	b094      	sub	sp, #80	; 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000944:	2228      	movs	r2, #40	; 0x28
 8000946:	2100      	movs	r1, #0
 8000948:	a80a      	add	r0, sp, #40	; 0x28
 800094a:	f001 fda5 	bl	8002498 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800094e:	2210      	movs	r2, #16
 8000950:	2100      	movs	r1, #0
 8000952:	a804      	add	r0, sp, #16
 8000954:	f001 fda0 	bl	8002498 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000958:	2210      	movs	r2, #16
 800095a:	2100      	movs	r1, #0
 800095c:	4668      	mov	r0, sp
 800095e:	f001 fd9b 	bl	8002498 <memset>
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSE;
 8000962:	2303      	movs	r3, #3
 8000964:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000966:	3b02      	subs	r3, #2
 8000968:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800096a:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800096c:	330f      	adds	r3, #15
 800096e:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000970:	2402      	movs	r4, #2
 8000972:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	025b      	lsls	r3, r3, #9
 8000978:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800097a:	2380      	movs	r3, #128	; 0x80
 800097c:	035b      	lsls	r3, r3, #13
 800097e:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000980:	a808      	add	r0, sp, #32
 8000982:	f000 fd13 	bl	80013ac <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8000986:	2307      	movs	r3, #7
 8000988:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098a:	9405      	str	r4, [sp, #20]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098c:	2400      	movs	r4, #0
 800098e:	9406      	str	r4, [sp, #24]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000990:	9407      	str	r4, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000992:	2101      	movs	r1, #1
 8000994:	a804      	add	r0, sp, #16
 8000996:	f000 ff8d 	bl	80018b4 <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800099a:	2320      	movs	r3, #32
 800099c:	9300      	str	r3, [sp, #0]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800099e:	9403      	str	r4, [sp, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a0:	4668      	mov	r0, sp
 80009a2:	f001 f81f 	bl	80019e4 <HAL_RCCEx_PeriphCLKConfig>
}
 80009a6:	b014      	add	sp, #80	; 0x50
 80009a8:	bd10      	pop	{r4, pc}
	...

080009ac <main>:
{
 80009ac:	b530      	push	{r4, r5, lr}
 80009ae:	b08b      	sub	sp, #44	; 0x2c
	char data1[17] = { ' ' };
 80009b0:	ac05      	add	r4, sp, #20
 80009b2:	2211      	movs	r2, #17
 80009b4:	2100      	movs	r1, #0
 80009b6:	0020      	movs	r0, r4
 80009b8:	f001 fd6e 	bl	8002498 <memset>
 80009bc:	2320      	movs	r3, #32
 80009be:	7023      	strb	r3, [r4, #0]
	char data_old[17] = { 0 };
 80009c0:	2211      	movs	r2, #17
 80009c2:	2100      	movs	r1, #0
 80009c4:	4668      	mov	r0, sp
 80009c6:	f001 fd67 	bl	8002498 <memset>
	HAL_Init();
 80009ca:	f000 f945 	bl	8000c58 <HAL_Init>
	SystemClock_Config();
 80009ce:	f7ff ffb7 	bl	8000940 <SystemClock_Config>
	MX_GPIO_Init();
 80009d2:	f7ff ff2b 	bl	800082c <MX_GPIO_Init>
	MX_I2C1_Init();
 80009d6:	f7ff ff6d 	bl	80008b4 <MX_I2C1_Init>
	MX_SPI1_Init();
 80009da:	f7ff ff8d 	bl	80008f8 <MX_SPI1_Init>
	LCD_ini();
 80009de:	f7ff fec3 	bl	8000768 <LCD_ini>
	LCD_Clear();
 80009e2:	f7ff fe99 	bl	8000718 <LCD_Clear>
	NRF24_ini();
 80009e6:	f7ff fd89 	bl	80004fc <NRF24_ini>
 80009ea:	e01c      	b.n	8000a26 <main+0x7a>
				LCD_SetPos(0, 0);
 80009ec:	2100      	movs	r1, #0
 80009ee:	2000      	movs	r0, #0
 80009f0:	f7ff fe9b 	bl	800072a <LCD_SetPos>
				LCD_String(data1);
 80009f4:	a805      	add	r0, sp, #20
 80009f6:	f7ff ff0b 	bl	8000810 <LCD_String>
				sprintf(str1, "connection");
 80009fa:	4c26      	ldr	r4, [pc, #152]	; (8000a94 <main+0xe8>)
 80009fc:	4b26      	ldr	r3, [pc, #152]	; (8000a98 <main+0xec>)
 80009fe:	0022      	movs	r2, r4
 8000a00:	cb03      	ldmia	r3!, {r0, r1}
 8000a02:	c203      	stmia	r2!, {r0, r1}
 8000a04:	0019      	movs	r1, r3
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	8013      	strh	r3, [r2, #0]
 8000a0a:	788b      	ldrb	r3, [r1, #2]
 8000a0c:	7093      	strb	r3, [r2, #2]
				LCD_SetPos(0, 1);
 8000a0e:	2101      	movs	r1, #1
 8000a10:	2000      	movs	r0, #0
 8000a12:	f7ff fe8a 	bl	800072a <LCD_SetPos>
				LCD_String(str1);
 8000a16:	0020      	movs	r0, r4
 8000a18:	f7ff fefa 	bl	8000810 <LCD_String>
				strncpy(data_old, data1, 17);
 8000a1c:	2211      	movs	r2, #17
 8000a1e:	a905      	add	r1, sp, #20
 8000a20:	4668      	mov	r0, sp
 8000a22:	f001 fd41 	bl	80024a8 <strncpy>
		uint8_t *data = NRF24_Receive(500);
 8000a26:	20fa      	movs	r0, #250	; 0xfa
 8000a28:	0040      	lsls	r0, r0, #1
 8000a2a:	f7ff fdcf 	bl	80005cc <NRF24_Receive>
 8000a2e:	0004      	movs	r4, r0
		strncpy(data1, data, 16);
 8000a30:	ad05      	add	r5, sp, #20
 8000a32:	2210      	movs	r2, #16
 8000a34:	0001      	movs	r1, r0
 8000a36:	0028      	movs	r0, r5
 8000a38:	f001 fd36 	bl	80024a8 <strncpy>
		data1[16] = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	742b      	strb	r3, [r5, #16]
		if (data != NULL)
 8000a40:	2c00      	cmp	r4, #0
 8000a42:	d017      	beq.n	8000a74 <main+0xc8>
			if (strcmp(data_old, data1) == 0)
 8000a44:	a905      	add	r1, sp, #20
 8000a46:	4668      	mov	r0, sp
 8000a48:	f7ff fb5e 	bl	8000108 <strcmp>
 8000a4c:	2800      	cmp	r0, #0
 8000a4e:	d1cd      	bne.n	80009ec <main+0x40>
				sprintf(str1, "connection");
 8000a50:	4c10      	ldr	r4, [pc, #64]	; (8000a94 <main+0xe8>)
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <main+0xec>)
 8000a54:	0022      	movs	r2, r4
 8000a56:	cb03      	ldmia	r3!, {r0, r1}
 8000a58:	c203      	stmia	r2!, {r0, r1}
 8000a5a:	0019      	movs	r1, r3
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	8013      	strh	r3, [r2, #0]
 8000a60:	788b      	ldrb	r3, [r1, #2]
 8000a62:	7093      	strb	r3, [r2, #2]
				LCD_SetPos(0, 1);
 8000a64:	2101      	movs	r1, #1
 8000a66:	2000      	movs	r0, #0
 8000a68:	f7ff fe5f 	bl	800072a <LCD_SetPos>
				LCD_String(str1);
 8000a6c:	0020      	movs	r0, r4
 8000a6e:	f7ff fecf 	bl	8000810 <LCD_String>
 8000a72:	e7d8      	b.n	8000a26 <main+0x7a>
			sprintf(str1, "no connection");
 8000a74:	4c07      	ldr	r4, [pc, #28]	; (8000a94 <main+0xe8>)
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <main+0xf0>)
 8000a78:	0022      	movs	r2, r4
 8000a7a:	cb23      	ldmia	r3!, {r0, r1, r5}
 8000a7c:	c223      	stmia	r2!, {r0, r1, r5}
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	8013      	strh	r3, [r2, #0]
			LCD_SetPos(0, 1);
 8000a82:	2101      	movs	r1, #1
 8000a84:	2000      	movs	r0, #0
 8000a86:	f7ff fe50 	bl	800072a <LCD_SetPos>
			LCD_String(str1);
 8000a8a:	0020      	movs	r0, r4
 8000a8c:	f7ff fec0 	bl	8000810 <LCD_String>
 8000a90:	e7c9      	b.n	8000a26 <main+0x7a>
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	20000004 	.word	0x20000004
 8000a98:	08002508 	.word	0x08002508
 8000a9c:	08002514 	.word	0x08002514

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <HAL_MspInit+0x2c>)
 8000aa4:	6999      	ldr	r1, [r3, #24]
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	4311      	orrs	r1, r2
 8000aaa:	6199      	str	r1, [r3, #24]
 8000aac:	6999      	ldr	r1, [r3, #24]
 8000aae:	400a      	ands	r2, r1
 8000ab0:	9200      	str	r2, [sp, #0]
 8000ab2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab4:	69da      	ldr	r2, [r3, #28]
 8000ab6:	2180      	movs	r1, #128	; 0x80
 8000ab8:	0549      	lsls	r1, r1, #21
 8000aba:	430a      	orrs	r2, r1
 8000abc:	61da      	str	r2, [r3, #28]
 8000abe:	69db      	ldr	r3, [r3, #28]
 8000ac0:	400b      	ands	r3, r1
 8000ac2:	9301      	str	r3, [sp, #4]
 8000ac4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac6:	b002      	add	sp, #8
 8000ac8:	4770      	bx	lr
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	40021000 	.word	0x40021000

08000ad0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ad0:	b510      	push	{r4, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	2214      	movs	r2, #20
 8000ad8:	2100      	movs	r1, #0
 8000ada:	a803      	add	r0, sp, #12
 8000adc:	f001 fcdc 	bl	8002498 <memset>
  if(hi2c->Instance==I2C1)
 8000ae0:	6822      	ldr	r2, [r4, #0]
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <HAL_I2C_MspInit+0x64>)
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d001      	beq.n	8000aec <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ae8:	b008      	add	sp, #32
 8000aea:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aec:	4c12      	ldr	r4, [pc, #72]	; (8000b38 <HAL_I2C_MspInit+0x68>)
 8000aee:	6962      	ldr	r2, [r4, #20]
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	0289      	lsls	r1, r1, #10
 8000af4:	430a      	orrs	r2, r1
 8000af6:	6162      	str	r2, [r4, #20]
 8000af8:	6963      	ldr	r3, [r4, #20]
 8000afa:	400b      	ands	r3, r1
 8000afc:	9301      	str	r3, [sp, #4]
 8000afe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b00:	23c0      	movs	r3, #192	; 0xc0
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b06:	2312      	movs	r3, #18
 8000b08:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0a:	3b11      	subs	r3, #17
 8000b0c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b0e:	3302      	adds	r3, #2
 8000b10:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b12:	3301      	adds	r3, #1
 8000b14:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	2090      	movs	r0, #144	; 0x90
 8000b18:	a903      	add	r1, sp, #12
 8000b1a:	05c0      	lsls	r0, r0, #23
 8000b1c:	f000 f91e 	bl	8000d5c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b20:	69e2      	ldr	r2, [r4, #28]
 8000b22:	2180      	movs	r1, #128	; 0x80
 8000b24:	0389      	lsls	r1, r1, #14
 8000b26:	430a      	orrs	r2, r1
 8000b28:	61e2      	str	r2, [r4, #28]
 8000b2a:	69e3      	ldr	r3, [r4, #28]
 8000b2c:	400b      	ands	r3, r1
 8000b2e:	9302      	str	r3, [sp, #8]
 8000b30:	9b02      	ldr	r3, [sp, #8]
}
 8000b32:	e7d9      	b.n	8000ae8 <HAL_I2C_MspInit+0x18>
 8000b34:	40005400 	.word	0x40005400
 8000b38:	40021000 	.word	0x40021000

08000b3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b3c:	b510      	push	{r4, lr}
 8000b3e:	b088      	sub	sp, #32
 8000b40:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b42:	2214      	movs	r2, #20
 8000b44:	2100      	movs	r1, #0
 8000b46:	a803      	add	r0, sp, #12
 8000b48:	f001 fca6 	bl	8002498 <memset>
  if(hspi->Instance==SPI1)
 8000b4c:	6822      	ldr	r2, [r4, #0]
 8000b4e:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_SPI_MspInit+0x5c>)
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d001      	beq.n	8000b58 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b54:	b008      	add	sp, #32
 8000b56:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b58:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <HAL_SPI_MspInit+0x60>)
 8000b5a:	6999      	ldr	r1, [r3, #24]
 8000b5c:	2080      	movs	r0, #128	; 0x80
 8000b5e:	0140      	lsls	r0, r0, #5
 8000b60:	4301      	orrs	r1, r0
 8000b62:	6199      	str	r1, [r3, #24]
 8000b64:	699a      	ldr	r2, [r3, #24]
 8000b66:	4002      	ands	r2, r0
 8000b68:	9201      	str	r2, [sp, #4]
 8000b6a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	695a      	ldr	r2, [r3, #20]
 8000b6e:	2180      	movs	r1, #128	; 0x80
 8000b70:	0289      	lsls	r1, r1, #10
 8000b72:	430a      	orrs	r2, r1
 8000b74:	615a      	str	r2, [r3, #20]
 8000b76:	695b      	ldr	r3, [r3, #20]
 8000b78:	400b      	ands	r3, r1
 8000b7a:	9302      	str	r3, [sp, #8]
 8000b7c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b7e:	23e0      	movs	r3, #224	; 0xe0
 8000b80:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	3bde      	subs	r3, #222	; 0xde
 8000b84:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b86:	3301      	adds	r3, #1
 8000b88:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	2090      	movs	r0, #144	; 0x90
 8000b8c:	a903      	add	r1, sp, #12
 8000b8e:	05c0      	lsls	r0, r0, #23
 8000b90:	f000 f8e4 	bl	8000d5c <HAL_GPIO_Init>
}
 8000b94:	e7de      	b.n	8000b54 <HAL_SPI_MspInit+0x18>
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	40013000 	.word	0x40013000
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ba0:	4770      	bx	lr

08000ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba2:	e7fe      	b.n	8000ba2 <HardFault_Handler>

08000ba4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ba4:	4770      	bx	lr

08000ba6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba6:	4770      	bx	lr

08000ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000baa:	f000 f865 	bl	8000c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bae:	bd10      	pop	{r4, pc}

08000bb0 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000bb0:	4770      	bx	lr
	...

08000bb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bb4:	480d      	ldr	r0, [pc, #52]	; (8000bec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bb6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb8:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bba:	490e      	ldr	r1, [pc, #56]	; (8000bf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bbc:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <LoopForever+0xe>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd0:	4c0b      	ldr	r4, [pc, #44]	; (8000c00 <LoopForever+0x16>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bde:	f7ff ffe7 	bl	8000bb0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000be2:	f001 fc35 	bl	8002450 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000be6:	f7ff fee1 	bl	80009ac <main>

08000bea <LoopForever>:

LoopForever:
    b LoopForever
 8000bea:	e7fe      	b.n	8000bea <LoopForever>
  ldr   r0, =_estack
 8000bec:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000bf8:	0800253c 	.word	0x0800253c
  ldr r2, =_sbss
 8000bfc:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000c00:	20000108 	.word	0x20000108

08000c04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC1_IRQHandler>
	...

08000c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b510      	push	{r4, lr}
 8000c0a:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <HAL_InitTick+0x44>)
 8000c0e:	7819      	ldrb	r1, [r3, #0]
 8000c10:	20fa      	movs	r0, #250	; 0xfa
 8000c12:	0080      	lsls	r0, r0, #2
 8000c14:	f7ff fa82 	bl	800011c <__udivsi3>
 8000c18:	0001      	movs	r1, r0
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <HAL_InitTick+0x48>)
 8000c1c:	6818      	ldr	r0, [r3, #0]
 8000c1e:	f7ff fa7d 	bl	800011c <__udivsi3>
 8000c22:	f000 f87f 	bl	8000d24 <HAL_SYSTICK_Config>
 8000c26:	2800      	cmp	r0, #0
 8000c28:	d10d      	bne.n	8000c46 <HAL_InitTick+0x3e>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2a:	2c03      	cmp	r4, #3
 8000c2c:	d901      	bls.n	8000c32 <HAL_InitTick+0x2a>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000c2e:	2001      	movs	r0, #1
 8000c30:	e00a      	b.n	8000c48 <HAL_InitTick+0x40>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c32:	3001      	adds	r0, #1
 8000c34:	2200      	movs	r2, #0
 8000c36:	0021      	movs	r1, r4
 8000c38:	4240      	negs	r0, r0
 8000c3a:	f000 f841 	bl	8000cc0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_InitTick+0x4c>)
 8000c40:	601c      	str	r4, [r3, #0]
  }

   /* Return function status */
  return HAL_OK;
 8000c42:	2000      	movs	r0, #0
 8000c44:	e000      	b.n	8000c48 <HAL_InitTick+0x40>
    return HAL_ERROR;
 8000c46:	2001      	movs	r0, #1
}
 8000c48:	bd10      	pop	{r4, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	2000001c 	.word	0x2000001c
 8000c50:	20000018 	.word	0x20000018
 8000c54:	20000020 	.word	0x20000020

08000c58 <HAL_Init>:
{
 8000c58:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c5a:	4a06      	ldr	r2, [pc, #24]	; (8000c74 <HAL_Init+0x1c>)
 8000c5c:	6813      	ldr	r3, [r2, #0]
 8000c5e:	2110      	movs	r1, #16
 8000c60:	430b      	orrs	r3, r1
 8000c62:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f7ff ffcf 	bl	8000c08 <HAL_InitTick>
  HAL_MspInit();
 8000c6a:	f7ff ff19 	bl	8000aa0 <HAL_MspInit>
}
 8000c6e:	2000      	movs	r0, #0
 8000c70:	bd10      	pop	{r4, pc}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	40022000 	.word	0x40022000

08000c78 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c78:	4a03      	ldr	r2, [pc, #12]	; (8000c88 <HAL_IncTick+0x10>)
 8000c7a:	6811      	ldr	r1, [r2, #0]
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <HAL_IncTick+0x14>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	185b      	adds	r3, r3, r1
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	4770      	bx	lr
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	20000104 	.word	0x20000104
 8000c8c:	2000001c 	.word	0x2000001c

08000c90 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c90:	4b01      	ldr	r3, [pc, #4]	; (8000c98 <HAL_GetTick+0x8>)
 8000c92:	6818      	ldr	r0, [r3, #0]
}
 8000c94:	4770      	bx	lr
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	20000104 	.word	0x20000104

08000c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c9c:	b570      	push	{r4, r5, r6, lr}
 8000c9e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ca0:	f7ff fff6 	bl	8000c90 <HAL_GetTick>
 8000ca4:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca6:	1c63      	adds	r3, r4, #1
 8000ca8:	d002      	beq.n	8000cb0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000caa:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <HAL_Delay+0x20>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cb0:	f7ff ffee 	bl	8000c90 <HAL_GetTick>
 8000cb4:	1b40      	subs	r0, r0, r5
 8000cb6:	42a0      	cmp	r0, r4
 8000cb8:	d3fa      	bcc.n	8000cb0 <HAL_Delay+0x14>
  {
  }
}
 8000cba:	bd70      	pop	{r4, r5, r6, pc}
 8000cbc:	2000001c 	.word	0x2000001c

08000cc0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc0:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000cc2:	2800      	cmp	r0, #0
 8000cc4:	db11      	blt.n	8000cea <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cc6:	0883      	lsrs	r3, r0, #2
 8000cc8:	4d14      	ldr	r5, [pc, #80]	; (8000d1c <HAL_NVIC_SetPriority+0x5c>)
 8000cca:	33c0      	adds	r3, #192	; 0xc0
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	595c      	ldr	r4, [r3, r5]
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	4010      	ands	r0, r2
 8000cd4:	00c0      	lsls	r0, r0, #3
 8000cd6:	32fc      	adds	r2, #252	; 0xfc
 8000cd8:	0016      	movs	r6, r2
 8000cda:	4086      	lsls	r6, r0
 8000cdc:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cde:	0189      	lsls	r1, r1, #6
 8000ce0:	400a      	ands	r2, r1
 8000ce2:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ce4:	4322      	orrs	r2, r4
 8000ce6:	515a      	str	r2, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000ce8:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cea:	b2c0      	uxtb	r0, r0
 8000cec:	230f      	movs	r3, #15
 8000cee:	4003      	ands	r3, r0
 8000cf0:	3b08      	subs	r3, #8
 8000cf2:	089b      	lsrs	r3, r3, #2
 8000cf4:	3306      	adds	r3, #6
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4a09      	ldr	r2, [pc, #36]	; (8000d20 <HAL_NVIC_SetPriority+0x60>)
 8000cfa:	4694      	mov	ip, r2
 8000cfc:	4463      	add	r3, ip
 8000cfe:	685d      	ldr	r5, [r3, #4]
 8000d00:	2403      	movs	r4, #3
 8000d02:	4020      	ands	r0, r4
 8000d04:	00c0      	lsls	r0, r0, #3
 8000d06:	22ff      	movs	r2, #255	; 0xff
 8000d08:	0014      	movs	r4, r2
 8000d0a:	4084      	lsls	r4, r0
 8000d0c:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d0e:	0189      	lsls	r1, r1, #6
 8000d10:	4011      	ands	r1, r2
 8000d12:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d14:	4329      	orrs	r1, r5
 8000d16:	6059      	str	r1, [r3, #4]
 8000d18:	e7e6      	b.n	8000ce8 <HAL_NVIC_SetPriority+0x28>
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d24:	3801      	subs	r0, #1
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <HAL_SYSTICK_Config+0x2c>)
 8000d28:	4298      	cmp	r0, r3
 8000d2a:	d80f      	bhi.n	8000d4c <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2c:	4a09      	ldr	r2, [pc, #36]	; (8000d54 <HAL_SYSTICK_Config+0x30>)
 8000d2e:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d30:	4809      	ldr	r0, [pc, #36]	; (8000d58 <HAL_SYSTICK_Config+0x34>)
 8000d32:	6a03      	ldr	r3, [r0, #32]
 8000d34:	021b      	lsls	r3, r3, #8
 8000d36:	0a1b      	lsrs	r3, r3, #8
 8000d38:	21c0      	movs	r1, #192	; 0xc0
 8000d3a:	0609      	lsls	r1, r1, #24
 8000d3c:	430b      	orrs	r3, r1
 8000d3e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d40:	2300      	movs	r3, #0
 8000d42:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d44:	3307      	adds	r3, #7
 8000d46:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d48:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d4a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d4c:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000d4e:	e7fc      	b.n	8000d4a <HAL_SYSTICK_Config+0x26>
 8000d50:	00ffffff 	.word	0x00ffffff
 8000d54:	e000e010 	.word	0xe000e010
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d5e:	46c6      	mov	lr, r8
 8000d60:	b500      	push	{lr}
 8000d62:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
 8000d64:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d66:	e038      	b.n	8000dda <HAL_GPIO_Init+0x7e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d68:	2603      	movs	r6, #3
 8000d6a:	e000      	b.n	8000d6e <HAL_GPIO_Init+0x12>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	40ae      	lsls	r6, r5
 8000d70:	0035      	movs	r5, r6
 8000d72:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d74:	3402      	adds	r4, #2
 8000d76:	00a4      	lsls	r4, r4, #2
 8000d78:	4e55      	ldr	r6, [pc, #340]	; (8000ed0 <HAL_GPIO_Init+0x174>)
 8000d7a:	51a5      	str	r5, [r4, r6]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d7c:	4c55      	ldr	r4, [pc, #340]	; (8000ed4 <HAL_GPIO_Init+0x178>)
 8000d7e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8000d80:	4642      	mov	r2, r8
 8000d82:	43d4      	mvns	r4, r2
 8000d84:	002e      	movs	r6, r5
 8000d86:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d88:	684a      	ldr	r2, [r1, #4]
 8000d8a:	03d2      	lsls	r2, r2, #15
 8000d8c:	d502      	bpl.n	8000d94 <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 8000d8e:	4642      	mov	r2, r8
 8000d90:	4315      	orrs	r5, r2
 8000d92:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 8000d94:	4d4f      	ldr	r5, [pc, #316]	; (8000ed4 <HAL_GPIO_Init+0x178>)
 8000d96:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8000d98:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8000d9a:	002e      	movs	r6, r5
 8000d9c:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d9e:	684a      	ldr	r2, [r1, #4]
 8000da0:	0392      	lsls	r2, r2, #14
 8000da2:	d502      	bpl.n	8000daa <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 8000da4:	4642      	mov	r2, r8
 8000da6:	4315      	orrs	r5, r2
 8000da8:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 8000daa:	4d4a      	ldr	r5, [pc, #296]	; (8000ed4 <HAL_GPIO_Init+0x178>)
 8000dac:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dae:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8000db0:	002e      	movs	r6, r5
 8000db2:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000db4:	684a      	ldr	r2, [r1, #4]
 8000db6:	02d2      	lsls	r2, r2, #11
 8000db8:	d502      	bpl.n	8000dc0 <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 8000dba:	4642      	mov	r2, r8
 8000dbc:	4315      	orrs	r5, r2
 8000dbe:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 8000dc0:	4d44      	ldr	r5, [pc, #272]	; (8000ed4 <HAL_GPIO_Init+0x178>)
 8000dc2:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8000dc4:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8000dc6:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dc8:	684a      	ldr	r2, [r1, #4]
 8000dca:	0292      	lsls	r2, r2, #10
 8000dcc:	d502      	bpl.n	8000dd4 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8000dce:	4642      	mov	r2, r8
 8000dd0:	432a      	orrs	r2, r5
 8000dd2:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 8000dd4:	4a3f      	ldr	r2, [pc, #252]	; (8000ed4 <HAL_GPIO_Init+0x178>)
 8000dd6:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8000dd8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dda:	680a      	ldr	r2, [r1, #0]
 8000ddc:	0014      	movs	r4, r2
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	d071      	beq.n	8000ec6 <HAL_GPIO_Init+0x16a>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000de2:	2501      	movs	r5, #1
 8000de4:	409d      	lsls	r5, r3
 8000de6:	402a      	ands	r2, r5
 8000de8:	4690      	mov	r8, r2
    if (iocurrent != 0x00u)
 8000dea:	d0f5      	beq.n	8000dd8 <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dec:	684c      	ldr	r4, [r1, #4]
 8000dee:	2c02      	cmp	r4, #2
 8000df0:	d001      	beq.n	8000df6 <HAL_GPIO_Init+0x9a>
 8000df2:	2c12      	cmp	r4, #18
 8000df4:	d10e      	bne.n	8000e14 <HAL_GPIO_Init+0xb8>
        temp = GPIOx->AFR[position >> 3u];
 8000df6:	08dc      	lsrs	r4, r3, #3
 8000df8:	3408      	adds	r4, #8
 8000dfa:	00a4      	lsls	r4, r4, #2
 8000dfc:	5827      	ldr	r7, [r4, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dfe:	2607      	movs	r6, #7
 8000e00:	401e      	ands	r6, r3
 8000e02:	00b6      	lsls	r6, r6, #2
 8000e04:	220f      	movs	r2, #15
 8000e06:	40b2      	lsls	r2, r6
 8000e08:	4397      	bics	r7, r2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e0a:	690a      	ldr	r2, [r1, #16]
 8000e0c:	40b2      	lsls	r2, r6
 8000e0e:	0016      	movs	r6, r2
 8000e10:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3u] = temp;
 8000e12:	5026      	str	r6, [r4, r0]
      temp = GPIOx->MODER;
 8000e14:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e16:	005f      	lsls	r7, r3, #1
 8000e18:	2403      	movs	r4, #3
 8000e1a:	0026      	movs	r6, r4
 8000e1c:	40be      	lsls	r6, r7
 8000e1e:	43f6      	mvns	r6, r6
 8000e20:	4032      	ands	r2, r6
 8000e22:	4694      	mov	ip, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e24:	684a      	ldr	r2, [r1, #4]
 8000e26:	4014      	ands	r4, r2
 8000e28:	40bc      	lsls	r4, r7
 8000e2a:	4662      	mov	r2, ip
 8000e2c:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8000e2e:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e30:	684c      	ldr	r4, [r1, #4]
 8000e32:	1e62      	subs	r2, r4, #1
 8000e34:	2a01      	cmp	r2, #1
 8000e36:	d903      	bls.n	8000e40 <HAL_GPIO_Init+0xe4>
 8000e38:	2c11      	cmp	r4, #17
 8000e3a:	d001      	beq.n	8000e40 <HAL_GPIO_Init+0xe4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e3c:	2c12      	cmp	r4, #18
 8000e3e:	d110      	bne.n	8000e62 <HAL_GPIO_Init+0x106>
        temp = GPIOx->OSPEEDR;
 8000e40:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e42:	4034      	ands	r4, r6
 8000e44:	46a4      	mov	ip, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e46:	68cc      	ldr	r4, [r1, #12]
 8000e48:	40bc      	lsls	r4, r7
 8000e4a:	4662      	mov	r2, ip
 8000e4c:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 8000e4e:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000e50:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e52:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e54:	684a      	ldr	r2, [r1, #4]
 8000e56:	0912      	lsrs	r2, r2, #4
 8000e58:	2501      	movs	r5, #1
 8000e5a:	4015      	ands	r5, r2
 8000e5c:	409d      	lsls	r5, r3
 8000e5e:	4325      	orrs	r5, r4
        GPIOx->OTYPER = temp;
 8000e60:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8000e62:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e64:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e66:	688c      	ldr	r4, [r1, #8]
 8000e68:	40bc      	lsls	r4, r7
 8000e6a:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 8000e6c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e6e:	684a      	ldr	r2, [r1, #4]
 8000e70:	00d2      	lsls	r2, r2, #3
 8000e72:	d5b1      	bpl.n	8000dd8 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e74:	4d18      	ldr	r5, [pc, #96]	; (8000ed8 <HAL_GPIO_Init+0x17c>)
 8000e76:	69ae      	ldr	r6, [r5, #24]
 8000e78:	2401      	movs	r4, #1
 8000e7a:	4326      	orrs	r6, r4
 8000e7c:	61ae      	str	r6, [r5, #24]
 8000e7e:	69ad      	ldr	r5, [r5, #24]
 8000e80:	402c      	ands	r4, r5
 8000e82:	9401      	str	r4, [sp, #4]
 8000e84:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000e86:	089c      	lsrs	r4, r3, #2
 8000e88:	1ca5      	adds	r5, r4, #2
 8000e8a:	00ad      	lsls	r5, r5, #2
 8000e8c:	4e10      	ldr	r6, [pc, #64]	; (8000ed0 <HAL_GPIO_Init+0x174>)
 8000e8e:	59af      	ldr	r7, [r5, r6]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e90:	2503      	movs	r5, #3
 8000e92:	401d      	ands	r5, r3
 8000e94:	00ad      	lsls	r5, r5, #2
 8000e96:	260f      	movs	r6, #15
 8000e98:	40ae      	lsls	r6, r5
 8000e9a:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e9c:	2690      	movs	r6, #144	; 0x90
 8000e9e:	05f6      	lsls	r6, r6, #23
 8000ea0:	42b0      	cmp	r0, r6
 8000ea2:	d100      	bne.n	8000ea6 <HAL_GPIO_Init+0x14a>
 8000ea4:	e762      	b.n	8000d6c <HAL_GPIO_Init+0x10>
 8000ea6:	4e0d      	ldr	r6, [pc, #52]	; (8000edc <HAL_GPIO_Init+0x180>)
 8000ea8:	42b0      	cmp	r0, r6
 8000eaa:	d008      	beq.n	8000ebe <HAL_GPIO_Init+0x162>
 8000eac:	4e0c      	ldr	r6, [pc, #48]	; (8000ee0 <HAL_GPIO_Init+0x184>)
 8000eae:	42b0      	cmp	r0, r6
 8000eb0:	d007      	beq.n	8000ec2 <HAL_GPIO_Init+0x166>
 8000eb2:	4e0c      	ldr	r6, [pc, #48]	; (8000ee4 <HAL_GPIO_Init+0x188>)
 8000eb4:	42b0      	cmp	r0, r6
 8000eb6:	d100      	bne.n	8000eba <HAL_GPIO_Init+0x15e>
 8000eb8:	e756      	b.n	8000d68 <HAL_GPIO_Init+0xc>
 8000eba:	2605      	movs	r6, #5
 8000ebc:	e757      	b.n	8000d6e <HAL_GPIO_Init+0x12>
 8000ebe:	2601      	movs	r6, #1
 8000ec0:	e755      	b.n	8000d6e <HAL_GPIO_Init+0x12>
 8000ec2:	2602      	movs	r6, #2
 8000ec4:	e753      	b.n	8000d6e <HAL_GPIO_Init+0x12>
  } 
}
 8000ec6:	b002      	add	sp, #8
 8000ec8:	bc04      	pop	{r2}
 8000eca:	4690      	mov	r8, r2
 8000ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	40010000 	.word	0x40010000
 8000ed4:	40010400 	.word	0x40010400
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	48000400 	.word	0x48000400
 8000ee0:	48000800 	.word	0x48000800
 8000ee4:	48000c00 	.word	0x48000c00

08000ee8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ee8:	6903      	ldr	r3, [r0, #16]
 8000eea:	420b      	tst	r3, r1
 8000eec:	d101      	bne.n	8000ef2 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000eee:	2000      	movs	r0, #0
  }
  return bitstatus;
  }
 8000ef0:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	e7fc      	b.n	8000ef0 <HAL_GPIO_ReadPin+0x8>

08000ef6 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ef6:	2a00      	cmp	r2, #0
 8000ef8:	d101      	bne.n	8000efe <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000efa:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000efc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000efe:	6181      	str	r1, [r0, #24]
 8000f00:	e7fc      	b.n	8000efc <HAL_GPIO_WritePin+0x6>

08000f02 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000f02:	6943      	ldr	r3, [r0, #20]
 8000f04:	4219      	tst	r1, r3
 8000f06:	d101      	bne.n	8000f0c <HAL_GPIO_TogglePin+0xa>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f08:	6181      	str	r1, [r0, #24]
  }
}
 8000f0a:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f0c:	0409      	lsls	r1, r1, #16
 8000f0e:	6181      	str	r1, [r0, #24]
 8000f10:	e7fb      	b.n	8000f0a <HAL_GPIO_TogglePin+0x8>

08000f12 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000f12:	6803      	ldr	r3, [r0, #0]
 8000f14:	699a      	ldr	r2, [r3, #24]
 8000f16:	0792      	lsls	r2, r2, #30
 8000f18:	d501      	bpl.n	8000f1e <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000f1e:	6803      	ldr	r3, [r0, #0]
 8000f20:	699a      	ldr	r2, [r3, #24]
 8000f22:	07d2      	lsls	r2, r2, #31
 8000f24:	d403      	bmi.n	8000f2e <I2C_Flush_TXDR+0x1c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000f26:	699a      	ldr	r2, [r3, #24]
 8000f28:	2101      	movs	r1, #1
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	619a      	str	r2, [r3, #24]
  }
}
 8000f2e:	4770      	bx	lr

08000f30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f32:	9c05      	ldr	r4, [sp, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000f34:	6805      	ldr	r5, [r0, #0]
 8000f36:	6868      	ldr	r0, [r5, #4]
 8000f38:	0d66      	lsrs	r6, r4, #21
 8000f3a:	2780      	movs	r7, #128	; 0x80
 8000f3c:	00ff      	lsls	r7, r7, #3
 8000f3e:	4037      	ands	r7, r6
 8000f40:	4e05      	ldr	r6, [pc, #20]	; (8000f58 <I2C_TransferConfig+0x28>)
 8000f42:	433e      	orrs	r6, r7
 8000f44:	43b0      	bics	r0, r6
 8000f46:	0589      	lsls	r1, r1, #22
 8000f48:	0d89      	lsrs	r1, r1, #22
 8000f4a:	0412      	lsls	r2, r2, #16
 8000f4c:	4311      	orrs	r1, r2
 8000f4e:	430b      	orrs	r3, r1
 8000f50:	4323      	orrs	r3, r4
 8000f52:	4303      	orrs	r3, r0
 8000f54:	606b      	str	r3, [r5, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8000f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f58:	03ff63ff 	.word	0x03ff63ff

08000f5c <I2C_IsAcknowledgeFailed>:
{
 8000f5c:	b570      	push	{r4, r5, r6, lr}
 8000f5e:	0004      	movs	r4, r0
 8000f60:	000e      	movs	r6, r1
 8000f62:	0015      	movs	r5, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000f64:	6803      	ldr	r3, [r0, #0]
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	06db      	lsls	r3, r3, #27
 8000f6a:	d519      	bpl.n	8000fa0 <I2C_IsAcknowledgeFailed+0x44>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000f6c:	6823      	ldr	r3, [r4, #0]
 8000f6e:	699a      	ldr	r2, [r3, #24]
 8000f70:	0692      	lsls	r2, r2, #26
 8000f72:	d417      	bmi.n	8000fa4 <I2C_IsAcknowledgeFailed+0x48>
      if (Timeout != HAL_MAX_DELAY)
 8000f74:	1c73      	adds	r3, r6, #1
 8000f76:	d0f9      	beq.n	8000f6c <I2C_IsAcknowledgeFailed+0x10>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f78:	f7ff fe8a 	bl	8000c90 <HAL_GetTick>
 8000f7c:	1b40      	subs	r0, r0, r5
 8000f7e:	42b0      	cmp	r0, r6
 8000f80:	d801      	bhi.n	8000f86 <I2C_IsAcknowledgeFailed+0x2a>
 8000f82:	2e00      	cmp	r6, #0
 8000f84:	d1f2      	bne.n	8000f6c <I2C_IsAcknowledgeFailed+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f86:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f88:	2220      	movs	r2, #32
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000f8e:	2341      	movs	r3, #65	; 0x41
 8000f90:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f92:	2300      	movs	r3, #0
 8000f94:	3222      	adds	r2, #34	; 0x22
 8000f96:	54a3      	strb	r3, [r4, r2]
          __HAL_UNLOCK(hi2c);
 8000f98:	3a02      	subs	r2, #2
 8000f9a:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	e01a      	b.n	8000fd6 <I2C_IsAcknowledgeFailed+0x7a>
  return HAL_OK;
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	e018      	b.n	8000fd6 <I2C_IsAcknowledgeFailed+0x7a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000fa4:	2210      	movs	r2, #16
 8000fa6:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000fa8:	6823      	ldr	r3, [r4, #0]
 8000faa:	2520      	movs	r5, #32
 8000fac:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000fae:	0020      	movs	r0, r4
 8000fb0:	f7ff ffaf 	bl	8000f12 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000fb4:	6822      	ldr	r2, [r4, #0]
 8000fb6:	6853      	ldr	r3, [r2, #4]
 8000fb8:	4907      	ldr	r1, [pc, #28]	; (8000fd8 <I2C_IsAcknowledgeFailed+0x7c>)
 8000fba:	400b      	ands	r3, r1
 8000fbc:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000fbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000fc0:	2204      	movs	r2, #4
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000fc6:	2341      	movs	r3, #65	; 0x41
 8000fc8:	54e5      	strb	r5, [r4, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	323e      	adds	r2, #62	; 0x3e
 8000fce:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8000fd0:	3a02      	subs	r2, #2
 8000fd2:	54a3      	strb	r3, [r4, r2]
    return HAL_ERROR;
 8000fd4:	2001      	movs	r0, #1
}
 8000fd6:	bd70      	pop	{r4, r5, r6, pc}
 8000fd8:	fe00e800 	.word	0xfe00e800

08000fdc <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000fdc:	b570      	push	{r4, r5, r6, lr}
 8000fde:	0004      	movs	r4, r0
 8000fe0:	000d      	movs	r5, r1
 8000fe2:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000fe4:	6823      	ldr	r3, [r4, #0]
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	079b      	lsls	r3, r3, #30
 8000fea:	d41c      	bmi.n	8001026 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000fec:	0032      	movs	r2, r6
 8000fee:	0029      	movs	r1, r5
 8000ff0:	0020      	movs	r0, r4
 8000ff2:	f7ff ffb3 	bl	8000f5c <I2C_IsAcknowledgeFailed>
 8000ff6:	2800      	cmp	r0, #0
 8000ff8:	d117      	bne.n	800102a <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8000ffa:	1c6b      	adds	r3, r5, #1
 8000ffc:	d0f2      	beq.n	8000fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ffe:	f7ff fe47 	bl	8000c90 <HAL_GetTick>
 8001002:	1b80      	subs	r0, r0, r6
 8001004:	42a8      	cmp	r0, r5
 8001006:	d801      	bhi.n	800100c <I2C_WaitOnTXISFlagUntilTimeout+0x30>
 8001008:	2d00      	cmp	r5, #0
 800100a:	d1eb      	bne.n	8000fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800100c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800100e:	2220      	movs	r2, #32
 8001010:	4313      	orrs	r3, r2
 8001012:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001014:	2341      	movs	r3, #65	; 0x41
 8001016:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001018:	2300      	movs	r3, #0
 800101a:	3222      	adds	r2, #34	; 0x22
 800101c:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 800101e:	3a02      	subs	r2, #2
 8001020:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 8001022:	2001      	movs	r0, #1
 8001024:	e000      	b.n	8001028 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
  return HAL_OK;
 8001026:	2000      	movs	r0, #0
}
 8001028:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800102a:	2001      	movs	r0, #1
 800102c:	e7fc      	b.n	8001028 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>

0800102e <I2C_WaitOnFlagUntilTimeout>:
{
 800102e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001030:	0006      	movs	r6, r0
 8001032:	000c      	movs	r4, r1
 8001034:	0017      	movs	r7, r2
 8001036:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001038:	6833      	ldr	r3, [r6, #0]
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	4023      	ands	r3, r4
 800103e:	1b1b      	subs	r3, r3, r4
 8001040:	425a      	negs	r2, r3
 8001042:	4153      	adcs	r3, r2
 8001044:	42bb      	cmp	r3, r7
 8001046:	d116      	bne.n	8001076 <I2C_WaitOnFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001048:	1c6b      	adds	r3, r5, #1
 800104a:	d0f5      	beq.n	8001038 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800104c:	f7ff fe20 	bl	8000c90 <HAL_GetTick>
 8001050:	9b06      	ldr	r3, [sp, #24]
 8001052:	1ac0      	subs	r0, r0, r3
 8001054:	42a8      	cmp	r0, r5
 8001056:	d801      	bhi.n	800105c <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001058:	2d00      	cmp	r5, #0
 800105a:	d1ed      	bne.n	8001038 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800105c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800105e:	2220      	movs	r2, #32
 8001060:	4313      	orrs	r3, r2
 8001062:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001064:	2341      	movs	r3, #65	; 0x41
 8001066:	54f2      	strb	r2, [r6, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001068:	2300      	movs	r3, #0
 800106a:	3222      	adds	r2, #34	; 0x22
 800106c:	54b3      	strb	r3, [r6, r2]
        __HAL_UNLOCK(hi2c);
 800106e:	3a02      	subs	r2, #2
 8001070:	54b3      	strb	r3, [r6, r2]
        return HAL_ERROR;
 8001072:	2001      	movs	r0, #1
 8001074:	e000      	b.n	8001078 <I2C_WaitOnFlagUntilTimeout+0x4a>
  return HAL_OK;
 8001076:	2000      	movs	r0, #0
}
 8001078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800107a <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800107a:	b570      	push	{r4, r5, r6, lr}
 800107c:	0005      	movs	r5, r0
 800107e:	000c      	movs	r4, r1
 8001080:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001082:	682b      	ldr	r3, [r5, #0]
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	069b      	lsls	r3, r3, #26
 8001088:	d41a      	bmi.n	80010c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800108a:	0032      	movs	r2, r6
 800108c:	0021      	movs	r1, r4
 800108e:	0028      	movs	r0, r5
 8001090:	f7ff ff64 	bl	8000f5c <I2C_IsAcknowledgeFailed>
 8001094:	2800      	cmp	r0, #0
 8001096:	d115      	bne.n	80010c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001098:	f7ff fdfa 	bl	8000c90 <HAL_GetTick>
 800109c:	1b80      	subs	r0, r0, r6
 800109e:	42a0      	cmp	r0, r4
 80010a0:	d801      	bhi.n	80010a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80010a2:	2c00      	cmp	r4, #0
 80010a4:	d1ed      	bne.n	8001082 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80010a6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80010a8:	2220      	movs	r2, #32
 80010aa:	4313      	orrs	r3, r2
 80010ac:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80010ae:	2341      	movs	r3, #65	; 0x41
 80010b0:	54ea      	strb	r2, [r5, r3]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	3222      	adds	r2, #34	; 0x22
 80010b6:	54ab      	strb	r3, [r5, r2]
      __HAL_UNLOCK(hi2c);
 80010b8:	3a02      	subs	r2, #2
 80010ba:	54ab      	strb	r3, [r5, r2]
      return HAL_ERROR;
 80010bc:	2001      	movs	r0, #1
}
 80010be:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80010c0:	2000      	movs	r0, #0
 80010c2:	e7fc      	b.n	80010be <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
      return HAL_ERROR;
 80010c4:	2001      	movs	r0, #1
 80010c6:	e7fa      	b.n	80010be <I2C_WaitOnSTOPFlagUntilTimeout+0x44>

080010c8 <HAL_I2C_Init>:
{
 80010c8:	b510      	push	{r4, lr}
 80010ca:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 80010cc:	d059      	beq.n	8001182 <HAL_I2C_Init+0xba>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010ce:	2341      	movs	r3, #65	; 0x41
 80010d0:	5cc3      	ldrb	r3, [r0, r3]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d043      	beq.n	800115e <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80010d6:	2341      	movs	r3, #65	; 0x41
 80010d8:	2224      	movs	r2, #36	; 0x24
 80010da:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 80010dc:	6822      	ldr	r2, [r4, #0]
 80010de:	6813      	ldr	r3, [r2, #0]
 80010e0:	2101      	movs	r1, #1
 80010e2:	438b      	bics	r3, r1
 80010e4:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010e6:	6822      	ldr	r2, [r4, #0]
 80010e8:	4b27      	ldr	r3, [pc, #156]	; (8001188 <HAL_I2C_Init+0xc0>)
 80010ea:	6861      	ldr	r1, [r4, #4]
 80010ec:	400b      	ands	r3, r1
 80010ee:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010f0:	6822      	ldr	r2, [r4, #0]
 80010f2:	6893      	ldr	r3, [r2, #8]
 80010f4:	4925      	ldr	r1, [pc, #148]	; (800118c <HAL_I2C_Init+0xc4>)
 80010f6:	400b      	ands	r3, r1
 80010f8:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010fa:	68e3      	ldr	r3, [r4, #12]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d034      	beq.n	800116a <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001100:	6822      	ldr	r2, [r4, #0]
 8001102:	2384      	movs	r3, #132	; 0x84
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	68a1      	ldr	r1, [r4, #8]
 8001108:	430b      	orrs	r3, r1
 800110a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800110c:	68e3      	ldr	r3, [r4, #12]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d032      	beq.n	8001178 <HAL_I2C_Init+0xb0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001112:	6822      	ldr	r2, [r4, #0]
 8001114:	6851      	ldr	r1, [r2, #4]
 8001116:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <HAL_I2C_Init+0xc8>)
 8001118:	430b      	orrs	r3, r1
 800111a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800111c:	6822      	ldr	r2, [r4, #0]
 800111e:	68d3      	ldr	r3, [r2, #12]
 8001120:	491a      	ldr	r1, [pc, #104]	; (800118c <HAL_I2C_Init+0xc4>)
 8001122:	400b      	ands	r3, r1
 8001124:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001126:	6923      	ldr	r3, [r4, #16]
 8001128:	6962      	ldr	r2, [r4, #20]
 800112a:	4313      	orrs	r3, r2
 800112c:	69a2      	ldr	r2, [r4, #24]
 800112e:	0212      	lsls	r2, r2, #8
 8001130:	6821      	ldr	r1, [r4, #0]
 8001132:	4313      	orrs	r3, r2
 8001134:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001136:	6822      	ldr	r2, [r4, #0]
 8001138:	69e3      	ldr	r3, [r4, #28]
 800113a:	6a21      	ldr	r1, [r4, #32]
 800113c:	430b      	orrs	r3, r1
 800113e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001140:	6822      	ldr	r2, [r4, #0]
 8001142:	6813      	ldr	r3, [r2, #0]
 8001144:	2101      	movs	r1, #1
 8001146:	430b      	orrs	r3, r1
 8001148:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800114a:	2300      	movs	r3, #0
 800114c:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800114e:	2241      	movs	r2, #65	; 0x41
 8001150:	311f      	adds	r1, #31
 8001152:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001154:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001156:	3201      	adds	r2, #1
 8001158:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 800115a:	2000      	movs	r0, #0
}
 800115c:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800115e:	3340      	adds	r3, #64	; 0x40
 8001160:	2200      	movs	r2, #0
 8001162:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8001164:	f7ff fcb4 	bl	8000ad0 <HAL_I2C_MspInit>
 8001168:	e7b5      	b.n	80010d6 <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800116a:	6822      	ldr	r2, [r4, #0]
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	68a1      	ldr	r1, [r4, #8]
 8001172:	430b      	orrs	r3, r1
 8001174:	6093      	str	r3, [r2, #8]
 8001176:	e7c9      	b.n	800110c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001178:	6823      	ldr	r3, [r4, #0]
 800117a:	2280      	movs	r2, #128	; 0x80
 800117c:	0112      	lsls	r2, r2, #4
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	e7c7      	b.n	8001112 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001182:	2001      	movs	r0, #1
 8001184:	e7ea      	b.n	800115c <HAL_I2C_Init+0x94>
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	f0ffffff 	.word	0xf0ffffff
 800118c:	ffff7fff 	.word	0xffff7fff
 8001190:	02008000 	.word	0x02008000

08001194 <HAL_I2C_Master_Transmit>:
{
 8001194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001196:	b085      	sub	sp, #20
 8001198:	0005      	movs	r5, r0
 800119a:	9103      	str	r1, [sp, #12]
 800119c:	0017      	movs	r7, r2
 800119e:	001e      	movs	r6, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011a0:	2341      	movs	r3, #65	; 0x41
 80011a2:	5cc3      	ldrb	r3, [r0, r3]
 80011a4:	2b20      	cmp	r3, #32
 80011a6:	d000      	beq.n	80011aa <HAL_I2C_Master_Transmit+0x16>
 80011a8:	e099      	b.n	80012de <HAL_I2C_Master_Transmit+0x14a>
    __HAL_LOCK(hi2c);
 80011aa:	3320      	adds	r3, #32
 80011ac:	5cc3      	ldrb	r3, [r0, r3]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d100      	bne.n	80011b4 <HAL_I2C_Master_Transmit+0x20>
 80011b2:	e097      	b.n	80012e4 <HAL_I2C_Master_Transmit+0x150>
 80011b4:	2340      	movs	r3, #64	; 0x40
 80011b6:	2201      	movs	r2, #1
 80011b8:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 80011ba:	f7ff fd69 	bl	8000c90 <HAL_GetTick>
 80011be:	0004      	movs	r4, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011c0:	2180      	movs	r1, #128	; 0x80
 80011c2:	9000      	str	r0, [sp, #0]
 80011c4:	2319      	movs	r3, #25
 80011c6:	2201      	movs	r2, #1
 80011c8:	0209      	lsls	r1, r1, #8
 80011ca:	0028      	movs	r0, r5
 80011cc:	f7ff ff2f 	bl	800102e <I2C_WaitOnFlagUntilTimeout>
 80011d0:	2800      	cmp	r0, #0
 80011d2:	d000      	beq.n	80011d6 <HAL_I2C_Master_Transmit+0x42>
 80011d4:	e088      	b.n	80012e8 <HAL_I2C_Master_Transmit+0x154>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80011d6:	2341      	movs	r3, #65	; 0x41
 80011d8:	2221      	movs	r2, #33	; 0x21
 80011da:	54ea      	strb	r2, [r5, r3]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80011dc:	3301      	adds	r3, #1
 80011de:	3a11      	subs	r2, #17
 80011e0:	54ea      	strb	r2, [r5, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80011e6:	626f      	str	r7, [r5, #36]	; 0x24
    hi2c->XferCount = Size;
 80011e8:	856e      	strh	r6, [r5, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80011ea:	636b      	str	r3, [r5, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011ec:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	2bff      	cmp	r3, #255	; 0xff
 80011f2:	d90b      	bls.n	800120c <HAL_I2C_Master_Transmit+0x78>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80011f4:	23ff      	movs	r3, #255	; 0xff
 80011f6:	852b      	strh	r3, [r5, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80011f8:	3b7f      	subs	r3, #127	; 0x7f
 80011fa:	4a3f      	ldr	r2, [pc, #252]	; (80012f8 <HAL_I2C_Master_Transmit+0x164>)
 80011fc:	9200      	str	r2, [sp, #0]
 80011fe:	045b      	lsls	r3, r3, #17
 8001200:	22ff      	movs	r2, #255	; 0xff
 8001202:	9903      	ldr	r1, [sp, #12]
 8001204:	0028      	movs	r0, r5
 8001206:	f7ff fe93 	bl	8000f30 <I2C_TransferConfig>
 800120a:	e018      	b.n	800123e <HAL_I2C_Master_Transmit+0xaa>
      hi2c->XferSize = hi2c->XferCount;
 800120c:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 800120e:	b292      	uxth	r2, r2
 8001210:	852a      	strh	r2, [r5, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	4938      	ldr	r1, [pc, #224]	; (80012f8 <HAL_I2C_Master_Transmit+0x164>)
 8001218:	9100      	str	r1, [sp, #0]
 800121a:	049b      	lsls	r3, r3, #18
 800121c:	9903      	ldr	r1, [sp, #12]
 800121e:	0028      	movs	r0, r5
 8001220:	f7ff fe86 	bl	8000f30 <I2C_TransferConfig>
 8001224:	e00b      	b.n	800123e <HAL_I2C_Master_Transmit+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8001226:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 8001228:	b292      	uxth	r2, r2
 800122a:	852a      	strh	r2, [r5, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	2100      	movs	r1, #0
 8001232:	9100      	str	r1, [sp, #0]
 8001234:	049b      	lsls	r3, r3, #18
 8001236:	9903      	ldr	r1, [sp, #12]
 8001238:	0028      	movs	r0, r5
 800123a:	f7ff fe79 	bl	8000f30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800123e:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8001240:	b29b      	uxth	r3, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	d034      	beq.n	80012b0 <HAL_I2C_Master_Transmit+0x11c>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001246:	0022      	movs	r2, r4
 8001248:	990a      	ldr	r1, [sp, #40]	; 0x28
 800124a:	0028      	movs	r0, r5
 800124c:	f7ff fec6 	bl	8000fdc <I2C_WaitOnTXISFlagUntilTimeout>
 8001250:	2800      	cmp	r0, #0
 8001252:	d14b      	bne.n	80012ec <HAL_I2C_Master_Transmit+0x158>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001254:	682b      	ldr	r3, [r5, #0]
 8001256:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001258:	7812      	ldrb	r2, [r2, #0]
 800125a:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800125c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800125e:	3301      	adds	r3, #1
 8001260:	626b      	str	r3, [r5, #36]	; 0x24
      hi2c->XferCount--;
 8001262:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8001264:	3b01      	subs	r3, #1
 8001266:	b29b      	uxth	r3, r3
 8001268:	856b      	strh	r3, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 800126a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800126c:	3b01      	subs	r3, #1
 800126e:	b29b      	uxth	r3, r3
 8001270:	852b      	strh	r3, [r5, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001272:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 8001274:	b292      	uxth	r2, r2
 8001276:	2a00      	cmp	r2, #0
 8001278:	d0e1      	beq.n	800123e <HAL_I2C_Master_Transmit+0xaa>
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1df      	bne.n	800123e <HAL_I2C_Master_Transmit+0xaa>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800127e:	9400      	str	r4, [sp, #0]
 8001280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001282:	2200      	movs	r2, #0
 8001284:	2180      	movs	r1, #128	; 0x80
 8001286:	0028      	movs	r0, r5
 8001288:	f7ff fed1 	bl	800102e <I2C_WaitOnFlagUntilTimeout>
 800128c:	2800      	cmp	r0, #0
 800128e:	d12f      	bne.n	80012f0 <HAL_I2C_Master_Transmit+0x15c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001290:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8001292:	b29b      	uxth	r3, r3
 8001294:	2bff      	cmp	r3, #255	; 0xff
 8001296:	d9c6      	bls.n	8001226 <HAL_I2C_Master_Transmit+0x92>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001298:	23ff      	movs	r3, #255	; 0xff
 800129a:	852b      	strh	r3, [r5, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800129c:	3b7f      	subs	r3, #127	; 0x7f
 800129e:	2200      	movs	r2, #0
 80012a0:	9200      	str	r2, [sp, #0]
 80012a2:	045b      	lsls	r3, r3, #17
 80012a4:	32ff      	adds	r2, #255	; 0xff
 80012a6:	9903      	ldr	r1, [sp, #12]
 80012a8:	0028      	movs	r0, r5
 80012aa:	f7ff fe41 	bl	8000f30 <I2C_TransferConfig>
 80012ae:	e7c6      	b.n	800123e <HAL_I2C_Master_Transmit+0xaa>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012b0:	0022      	movs	r2, r4
 80012b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80012b4:	0028      	movs	r0, r5
 80012b6:	f7ff fee0 	bl	800107a <I2C_WaitOnSTOPFlagUntilTimeout>
 80012ba:	2800      	cmp	r0, #0
 80012bc:	d11a      	bne.n	80012f4 <HAL_I2C_Master_Transmit+0x160>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012be:	682b      	ldr	r3, [r5, #0]
 80012c0:	2220      	movs	r2, #32
 80012c2:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80012c4:	6829      	ldr	r1, [r5, #0]
 80012c6:	684b      	ldr	r3, [r1, #4]
 80012c8:	4c0c      	ldr	r4, [pc, #48]	; (80012fc <HAL_I2C_Master_Transmit+0x168>)
 80012ca:	4023      	ands	r3, r4
 80012cc:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80012ce:	2341      	movs	r3, #65	; 0x41
 80012d0:	54ea      	strb	r2, [r5, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	3222      	adds	r2, #34	; 0x22
 80012d6:	54ab      	strb	r3, [r5, r2]
    __HAL_UNLOCK(hi2c);
 80012d8:	3a02      	subs	r2, #2
 80012da:	54ab      	strb	r3, [r5, r2]
    return HAL_OK;
 80012dc:	e000      	b.n	80012e0 <HAL_I2C_Master_Transmit+0x14c>
    return HAL_BUSY;
 80012de:	2002      	movs	r0, #2
}
 80012e0:	b005      	add	sp, #20
 80012e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80012e4:	2002      	movs	r0, #2
 80012e6:	e7fb      	b.n	80012e0 <HAL_I2C_Master_Transmit+0x14c>
      return HAL_ERROR;
 80012e8:	2001      	movs	r0, #1
 80012ea:	e7f9      	b.n	80012e0 <HAL_I2C_Master_Transmit+0x14c>
        return HAL_ERROR;
 80012ec:	2001      	movs	r0, #1
 80012ee:	e7f7      	b.n	80012e0 <HAL_I2C_Master_Transmit+0x14c>
          return HAL_ERROR;
 80012f0:	2001      	movs	r0, #1
 80012f2:	e7f5      	b.n	80012e0 <HAL_I2C_Master_Transmit+0x14c>
      return HAL_ERROR;
 80012f4:	2001      	movs	r0, #1
 80012f6:	e7f3      	b.n	80012e0 <HAL_I2C_Master_Transmit+0x14c>
 80012f8:	80002000 	.word	0x80002000
 80012fc:	fe00e800 	.word	0xfe00e800

08001300 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001300:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001302:	2341      	movs	r3, #65	; 0x41
 8001304:	5cc3      	ldrb	r3, [r0, r3]
 8001306:	2b20      	cmp	r3, #32
 8001308:	d120      	bne.n	800134c <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800130a:	3320      	adds	r3, #32
 800130c:	5cc3      	ldrb	r3, [r0, r3]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d01e      	beq.n	8001350 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8001312:	2440      	movs	r4, #64	; 0x40
 8001314:	2201      	movs	r2, #1
 8001316:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001318:	2541      	movs	r5, #65	; 0x41
 800131a:	2324      	movs	r3, #36	; 0x24
 800131c:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800131e:	6806      	ldr	r6, [r0, #0]
 8001320:	6833      	ldr	r3, [r6, #0]
 8001322:	4393      	bics	r3, r2
 8001324:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001326:	6806      	ldr	r6, [r0, #0]
 8001328:	6833      	ldr	r3, [r6, #0]
 800132a:	4f0a      	ldr	r7, [pc, #40]	; (8001354 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 800132c:	403b      	ands	r3, r7
 800132e:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001330:	6806      	ldr	r6, [r0, #0]
 8001332:	6833      	ldr	r3, [r6, #0]
 8001334:	4319      	orrs	r1, r3
 8001336:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001338:	6801      	ldr	r1, [r0, #0]
 800133a:	680b      	ldr	r3, [r1, #0]
 800133c:	4313      	orrs	r3, r2
 800133e:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001340:	2320      	movs	r3, #32
 8001342:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001344:	2300      	movs	r3, #0
 8001346:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8001348:	2000      	movs	r0, #0
 800134a:	e000      	b.n	800134e <HAL_I2CEx_ConfigAnalogFilter+0x4e>
  }
  else
  {
    return HAL_BUSY;
 800134c:	2002      	movs	r0, #2
  }
}
 800134e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8001350:	2002      	movs	r0, #2
 8001352:	e7fc      	b.n	800134e <HAL_I2CEx_ConfigAnalogFilter+0x4e>
 8001354:	ffffefff 	.word	0xffffefff

08001358 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001358:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800135a:	2341      	movs	r3, #65	; 0x41
 800135c:	5cc3      	ldrb	r3, [r0, r3]
 800135e:	2b20      	cmp	r3, #32
 8001360:	d11e      	bne.n	80013a0 <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001362:	3320      	adds	r3, #32
 8001364:	5cc3      	ldrb	r3, [r0, r3]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d01c      	beq.n	80013a4 <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 800136a:	2440      	movs	r4, #64	; 0x40
 800136c:	2201      	movs	r2, #1
 800136e:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001370:	2541      	movs	r5, #65	; 0x41
 8001372:	2324      	movs	r3, #36	; 0x24
 8001374:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001376:	6806      	ldr	r6, [r0, #0]
 8001378:	6833      	ldr	r3, [r6, #0]
 800137a:	4393      	bics	r3, r2
 800137c:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800137e:	6806      	ldr	r6, [r0, #0]
 8001380:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001382:	4f09      	ldr	r7, [pc, #36]	; (80013a8 <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 8001384:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001386:	0209      	lsls	r1, r1, #8
 8001388:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800138a:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 800138c:	6801      	ldr	r1, [r0, #0]
 800138e:	680b      	ldr	r3, [r1, #0]
 8001390:	4313      	orrs	r3, r2
 8001392:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001394:	2320      	movs	r3, #32
 8001396:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001398:	2300      	movs	r3, #0
 800139a:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 800139c:	2000      	movs	r0, #0
 800139e:	e000      	b.n	80013a2 <HAL_I2CEx_ConfigDigitalFilter+0x4a>
  }
  else
  {
    return HAL_BUSY;
 80013a0:	2002      	movs	r0, #2
  }
}
 80013a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80013a4:	2002      	movs	r0, #2
 80013a6:	e7fc      	b.n	80013a2 <HAL_I2CEx_ConfigDigitalFilter+0x4a>
 80013a8:	fffff0ff 	.word	0xfffff0ff

080013ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ac:	b570      	push	{r4, r5, r6, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b2:	d100      	bne.n	80013b6 <HAL_RCC_OscConfig+0xa>
 80013b4:	e232      	b.n	800181c <HAL_RCC_OscConfig+0x470>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b6:	6803      	ldr	r3, [r0, #0]
 80013b8:	07db      	lsls	r3, r3, #31
 80013ba:	d526      	bpl.n	800140a <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013bc:	4bae      	ldr	r3, [pc, #696]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	230c      	movs	r3, #12
 80013c2:	4013      	ands	r3, r2
 80013c4:	2b04      	cmp	r3, #4
 80013c6:	d018      	beq.n	80013fa <HAL_RCC_OscConfig+0x4e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013c8:	4bab      	ldr	r3, [pc, #684]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	230c      	movs	r3, #12
 80013ce:	4013      	ands	r3, r2
 80013d0:	2b08      	cmp	r3, #8
 80013d2:	d00e      	beq.n	80013f2 <HAL_RCC_OscConfig+0x46>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d4:	6863      	ldr	r3, [r4, #4]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d03c      	beq.n	8001454 <HAL_RCC_OscConfig+0xa8>
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d151      	bne.n	8001482 <HAL_RCC_OscConfig+0xd6>
 80013de:	4ba6      	ldr	r3, [pc, #664]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	49a6      	ldr	r1, [pc, #664]	; (800167c <HAL_RCC_OscConfig+0x2d0>)
 80013e4:	400a      	ands	r2, r1
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	49a5      	ldr	r1, [pc, #660]	; (8001680 <HAL_RCC_OscConfig+0x2d4>)
 80013ec:	400a      	ands	r2, r1
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	e036      	b.n	8001460 <HAL_RCC_OscConfig+0xb4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013f2:	4ba1      	ldr	r3, [pc, #644]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	03db      	lsls	r3, r3, #15
 80013f8:	d5ec      	bpl.n	80013d4 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fa:	4b9f      	ldr	r3, [pc, #636]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	039b      	lsls	r3, r3, #14
 8001400:	d503      	bpl.n	800140a <HAL_RCC_OscConfig+0x5e>
 8001402:	6863      	ldr	r3, [r4, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d100      	bne.n	800140a <HAL_RCC_OscConfig+0x5e>
 8001408:	e20b      	b.n	8001822 <HAL_RCC_OscConfig+0x476>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800140a:	6823      	ldr	r3, [r4, #0]
 800140c:	079b      	lsls	r3, r3, #30
 800140e:	d573      	bpl.n	80014f8 <HAL_RCC_OscConfig+0x14c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001410:	4b99      	ldr	r3, [pc, #612]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	220c      	movs	r2, #12
 8001416:	421a      	tst	r2, r3
 8001418:	d05d      	beq.n	80014d6 <HAL_RCC_OscConfig+0x12a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800141a:	4b97      	ldr	r3, [pc, #604]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	230c      	movs	r3, #12
 8001420:	4013      	ands	r3, r2
 8001422:	2b08      	cmp	r3, #8
 8001424:	d053      	beq.n	80014ce <HAL_RCC_OscConfig+0x122>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001426:	68e3      	ldr	r3, [r4, #12]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d100      	bne.n	800142e <HAL_RCC_OscConfig+0x82>
 800142c:	e086      	b.n	800153c <HAL_RCC_OscConfig+0x190>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800142e:	4a92      	ldr	r2, [pc, #584]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 8001430:	6813      	ldr	r3, [r2, #0]
 8001432:	2101      	movs	r1, #1
 8001434:	430b      	orrs	r3, r1
 8001436:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff fc2a 	bl	8000c90 <HAL_GetTick>
 800143c:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143e:	4b8e      	ldr	r3, [pc, #568]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	079b      	lsls	r3, r3, #30
 8001444:	d471      	bmi.n	800152a <HAL_RCC_OscConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001446:	f7ff fc23 	bl	8000c90 <HAL_GetTick>
 800144a:	1b40      	subs	r0, r0, r5
 800144c:	2802      	cmp	r0, #2
 800144e:	d9f6      	bls.n	800143e <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8001450:	2003      	movs	r0, #3
 8001452:	e1e4      	b.n	800181e <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001454:	4a88      	ldr	r2, [pc, #544]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 8001456:	6811      	ldr	r1, [r2, #0]
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	025b      	lsls	r3, r3, #9
 800145c:	430b      	orrs	r3, r1
 800145e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001460:	6863      	ldr	r3, [r4, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d025      	beq.n	80014b2 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8001466:	f7ff fc13 	bl	8000c90 <HAL_GetTick>
 800146a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146c:	4b82      	ldr	r3, [pc, #520]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	039b      	lsls	r3, r3, #14
 8001472:	d4ca      	bmi.n	800140a <HAL_RCC_OscConfig+0x5e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001474:	f7ff fc0c 	bl	8000c90 <HAL_GetTick>
 8001478:	1b40      	subs	r0, r0, r5
 800147a:	2864      	cmp	r0, #100	; 0x64
 800147c:	d9f6      	bls.n	800146c <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 800147e:	2003      	movs	r0, #3
 8001480:	e1cd      	b.n	800181e <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001482:	2b05      	cmp	r3, #5
 8001484:	d009      	beq.n	800149a <HAL_RCC_OscConfig+0xee>
 8001486:	4b7c      	ldr	r3, [pc, #496]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	497c      	ldr	r1, [pc, #496]	; (800167c <HAL_RCC_OscConfig+0x2d0>)
 800148c:	400a      	ands	r2, r1
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	497b      	ldr	r1, [pc, #492]	; (8001680 <HAL_RCC_OscConfig+0x2d4>)
 8001494:	400a      	ands	r2, r1
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	e7e2      	b.n	8001460 <HAL_RCC_OscConfig+0xb4>
 800149a:	4b77      	ldr	r3, [pc, #476]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 800149c:	6819      	ldr	r1, [r3, #0]
 800149e:	2280      	movs	r2, #128	; 0x80
 80014a0:	02d2      	lsls	r2, r2, #11
 80014a2:	430a      	orrs	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	6819      	ldr	r1, [r3, #0]
 80014a8:	2280      	movs	r2, #128	; 0x80
 80014aa:	0252      	lsls	r2, r2, #9
 80014ac:	430a      	orrs	r2, r1
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	e7d6      	b.n	8001460 <HAL_RCC_OscConfig+0xb4>
        tickstart = HAL_GetTick();
 80014b2:	f7ff fbed 	bl	8000c90 <HAL_GetTick>
 80014b6:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b8:	4b6f      	ldr	r3, [pc, #444]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	039b      	lsls	r3, r3, #14
 80014be:	d5a4      	bpl.n	800140a <HAL_RCC_OscConfig+0x5e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014c0:	f7ff fbe6 	bl	8000c90 <HAL_GetTick>
 80014c4:	1b40      	subs	r0, r0, r5
 80014c6:	2864      	cmp	r0, #100	; 0x64
 80014c8:	d9f6      	bls.n	80014b8 <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 80014ca:	2003      	movs	r0, #3
 80014cc:	e1a7      	b.n	800181e <HAL_RCC_OscConfig+0x472>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014ce:	4b6a      	ldr	r3, [pc, #424]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	03db      	lsls	r3, r3, #15
 80014d4:	d4a7      	bmi.n	8001426 <HAL_RCC_OscConfig+0x7a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d6:	4b68      	ldr	r3, [pc, #416]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	079b      	lsls	r3, r3, #30
 80014dc:	d504      	bpl.n	80014e8 <HAL_RCC_OscConfig+0x13c>
 80014de:	68e3      	ldr	r3, [r4, #12]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d001      	beq.n	80014e8 <HAL_RCC_OscConfig+0x13c>
        return HAL_ERROR;
 80014e4:	2001      	movs	r0, #1
 80014e6:	e19a      	b.n	800181e <HAL_RCC_OscConfig+0x472>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e8:	4963      	ldr	r1, [pc, #396]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 80014ea:	680b      	ldr	r3, [r1, #0]
 80014ec:	22f8      	movs	r2, #248	; 0xf8
 80014ee:	4393      	bics	r3, r2
 80014f0:	6922      	ldr	r2, [r4, #16]
 80014f2:	00d2      	lsls	r2, r2, #3
 80014f4:	4313      	orrs	r3, r2
 80014f6:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f8:	6823      	ldr	r3, [r4, #0]
 80014fa:	071b      	lsls	r3, r3, #28
 80014fc:	d544      	bpl.n	8001588 <HAL_RCC_OscConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014fe:	69e3      	ldr	r3, [r4, #28]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d02e      	beq.n	8001562 <HAL_RCC_OscConfig+0x1b6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001504:	4a5c      	ldr	r2, [pc, #368]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 8001506:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001508:	2101      	movs	r1, #1
 800150a:	430b      	orrs	r3, r1
 800150c:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150e:	f7ff fbbf 	bl	8000c90 <HAL_GetTick>
 8001512:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001514:	4b58      	ldr	r3, [pc, #352]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001518:	079b      	lsls	r3, r3, #30
 800151a:	d435      	bmi.n	8001588 <HAL_RCC_OscConfig+0x1dc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800151c:	f7ff fbb8 	bl	8000c90 <HAL_GetTick>
 8001520:	1b40      	subs	r0, r0, r5
 8001522:	2802      	cmp	r0, #2
 8001524:	d9f6      	bls.n	8001514 <HAL_RCC_OscConfig+0x168>
        {
          return HAL_TIMEOUT;
 8001526:	2003      	movs	r0, #3
 8001528:	e179      	b.n	800181e <HAL_RCC_OscConfig+0x472>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152a:	4953      	ldr	r1, [pc, #332]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 800152c:	680b      	ldr	r3, [r1, #0]
 800152e:	22f8      	movs	r2, #248	; 0xf8
 8001530:	4393      	bics	r3, r2
 8001532:	6922      	ldr	r2, [r4, #16]
 8001534:	00d2      	lsls	r2, r2, #3
 8001536:	4313      	orrs	r3, r2
 8001538:	600b      	str	r3, [r1, #0]
 800153a:	e7dd      	b.n	80014f8 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_DISABLE();
 800153c:	4a4e      	ldr	r2, [pc, #312]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 800153e:	6813      	ldr	r3, [r2, #0]
 8001540:	2101      	movs	r1, #1
 8001542:	438b      	bics	r3, r1
 8001544:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001546:	f7ff fba3 	bl	8000c90 <HAL_GetTick>
 800154a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154c:	4b4a      	ldr	r3, [pc, #296]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	079b      	lsls	r3, r3, #30
 8001552:	d5d1      	bpl.n	80014f8 <HAL_RCC_OscConfig+0x14c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001554:	f7ff fb9c 	bl	8000c90 <HAL_GetTick>
 8001558:	1b40      	subs	r0, r0, r5
 800155a:	2802      	cmp	r0, #2
 800155c:	d9f6      	bls.n	800154c <HAL_RCC_OscConfig+0x1a0>
            return HAL_TIMEOUT;
 800155e:	2003      	movs	r0, #3
 8001560:	e15d      	b.n	800181e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001562:	4a45      	ldr	r2, [pc, #276]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 8001564:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001566:	2101      	movs	r1, #1
 8001568:	438b      	bics	r3, r1
 800156a:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156c:	f7ff fb90 	bl	8000c90 <HAL_GetTick>
 8001570:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001572:	4b41      	ldr	r3, [pc, #260]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	079b      	lsls	r3, r3, #30
 8001578:	d506      	bpl.n	8001588 <HAL_RCC_OscConfig+0x1dc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800157a:	f7ff fb89 	bl	8000c90 <HAL_GetTick>
 800157e:	1b40      	subs	r0, r0, r5
 8001580:	2802      	cmp	r0, #2
 8001582:	d9f6      	bls.n	8001572 <HAL_RCC_OscConfig+0x1c6>
        {
          return HAL_TIMEOUT;
 8001584:	2003      	movs	r0, #3
 8001586:	e14a      	b.n	800181e <HAL_RCC_OscConfig+0x472>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001588:	6823      	ldr	r3, [r4, #0]
 800158a:	075b      	lsls	r3, r3, #29
 800158c:	d400      	bmi.n	8001590 <HAL_RCC_OscConfig+0x1e4>
 800158e:	e07f      	b.n	8001690 <HAL_RCC_OscConfig+0x2e4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001590:	4b39      	ldr	r3, [pc, #228]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	d41d      	bmi.n	80015d4 <HAL_RCC_OscConfig+0x228>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001598:	4a37      	ldr	r2, [pc, #220]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 800159a:	69d1      	ldr	r1, [r2, #28]
 800159c:	2080      	movs	r0, #128	; 0x80
 800159e:	0540      	lsls	r0, r0, #21
 80015a0:	4301      	orrs	r1, r0
 80015a2:	61d1      	str	r1, [r2, #28]
 80015a4:	69d3      	ldr	r3, [r2, #28]
 80015a6:	4003      	ands	r3, r0
 80015a8:	9301      	str	r3, [sp, #4]
 80015aa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80015ac:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ae:	4b35      	ldr	r3, [pc, #212]	; (8001684 <HAL_RCC_OscConfig+0x2d8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	05db      	lsls	r3, r3, #23
 80015b4:	d510      	bpl.n	80015d8 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b6:	68a3      	ldr	r3, [r4, #8]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d021      	beq.n	8001600 <HAL_RCC_OscConfig+0x254>
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d136      	bne.n	800162e <HAL_RCC_OscConfig+0x282>
 80015c0:	4b2d      	ldr	r3, [pc, #180]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 80015c2:	6a1a      	ldr	r2, [r3, #32]
 80015c4:	2101      	movs	r1, #1
 80015c6:	438a      	bics	r2, r1
 80015c8:	621a      	str	r2, [r3, #32]
 80015ca:	6a1a      	ldr	r2, [r3, #32]
 80015cc:	3103      	adds	r1, #3
 80015ce:	438a      	bics	r2, r1
 80015d0:	621a      	str	r2, [r3, #32]
 80015d2:	e01a      	b.n	800160a <HAL_RCC_OscConfig+0x25e>
    FlagStatus       pwrclkchanged = RESET;
 80015d4:	2500      	movs	r5, #0
 80015d6:	e7ea      	b.n	80015ae <HAL_RCC_OscConfig+0x202>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015d8:	4a2a      	ldr	r2, [pc, #168]	; (8001684 <HAL_RCC_OscConfig+0x2d8>)
 80015da:	6811      	ldr	r1, [r2, #0]
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	430b      	orrs	r3, r1
 80015e2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80015e4:	f7ff fb54 	bl	8000c90 <HAL_GetTick>
 80015e8:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ea:	4b26      	ldr	r3, [pc, #152]	; (8001684 <HAL_RCC_OscConfig+0x2d8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	05db      	lsls	r3, r3, #23
 80015f0:	d4e1      	bmi.n	80015b6 <HAL_RCC_OscConfig+0x20a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f2:	f7ff fb4d 	bl	8000c90 <HAL_GetTick>
 80015f6:	1b80      	subs	r0, r0, r6
 80015f8:	2864      	cmp	r0, #100	; 0x64
 80015fa:	d9f6      	bls.n	80015ea <HAL_RCC_OscConfig+0x23e>
          return HAL_TIMEOUT;
 80015fc:	2003      	movs	r0, #3
 80015fe:	e10e      	b.n	800181e <HAL_RCC_OscConfig+0x472>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001600:	4a1d      	ldr	r2, [pc, #116]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 8001602:	6a13      	ldr	r3, [r2, #32]
 8001604:	2101      	movs	r1, #1
 8001606:	430b      	orrs	r3, r1
 8001608:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800160a:	68a3      	ldr	r3, [r4, #8]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d024      	beq.n	800165a <HAL_RCC_OscConfig+0x2ae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001610:	f7ff fb3e 	bl	8000c90 <HAL_GetTick>
 8001614:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001616:	4b18      	ldr	r3, [pc, #96]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	079b      	lsls	r3, r3, #30
 800161c:	d436      	bmi.n	800168c <HAL_RCC_OscConfig+0x2e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800161e:	f7ff fb37 	bl	8000c90 <HAL_GetTick>
 8001622:	1b80      	subs	r0, r0, r6
 8001624:	4b18      	ldr	r3, [pc, #96]	; (8001688 <HAL_RCC_OscConfig+0x2dc>)
 8001626:	4298      	cmp	r0, r3
 8001628:	d9f5      	bls.n	8001616 <HAL_RCC_OscConfig+0x26a>
        {
          return HAL_TIMEOUT;
 800162a:	2003      	movs	r0, #3
 800162c:	e0f7      	b.n	800181e <HAL_RCC_OscConfig+0x472>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800162e:	2b05      	cmp	r3, #5
 8001630:	d009      	beq.n	8001646 <HAL_RCC_OscConfig+0x29a>
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 8001634:	6a1a      	ldr	r2, [r3, #32]
 8001636:	2101      	movs	r1, #1
 8001638:	438a      	bics	r2, r1
 800163a:	621a      	str	r2, [r3, #32]
 800163c:	6a1a      	ldr	r2, [r3, #32]
 800163e:	3103      	adds	r1, #3
 8001640:	438a      	bics	r2, r1
 8001642:	621a      	str	r2, [r3, #32]
 8001644:	e7e1      	b.n	800160a <HAL_RCC_OscConfig+0x25e>
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 8001648:	6a1a      	ldr	r2, [r3, #32]
 800164a:	2104      	movs	r1, #4
 800164c:	430a      	orrs	r2, r1
 800164e:	621a      	str	r2, [r3, #32]
 8001650:	6a1a      	ldr	r2, [r3, #32]
 8001652:	3903      	subs	r1, #3
 8001654:	430a      	orrs	r2, r1
 8001656:	621a      	str	r2, [r3, #32]
 8001658:	e7d7      	b.n	800160a <HAL_RCC_OscConfig+0x25e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165a:	f7ff fb19 	bl	8000c90 <HAL_GetTick>
 800165e:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <HAL_RCC_OscConfig+0x2cc>)
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	079b      	lsls	r3, r3, #30
 8001666:	d511      	bpl.n	800168c <HAL_RCC_OscConfig+0x2e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001668:	f7ff fb12 	bl	8000c90 <HAL_GetTick>
 800166c:	1b80      	subs	r0, r0, r6
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_RCC_OscConfig+0x2dc>)
 8001670:	4298      	cmp	r0, r3
 8001672:	d9f5      	bls.n	8001660 <HAL_RCC_OscConfig+0x2b4>
        {
          return HAL_TIMEOUT;
 8001674:	2003      	movs	r0, #3
 8001676:	e0d2      	b.n	800181e <HAL_RCC_OscConfig+0x472>
 8001678:	40021000 	.word	0x40021000
 800167c:	fffeffff 	.word	0xfffeffff
 8001680:	fffbffff 	.word	0xfffbffff
 8001684:	40007000 	.word	0x40007000
 8001688:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800168c:	2d01      	cmp	r5, #1
 800168e:	d033      	beq.n	80016f8 <HAL_RCC_OscConfig+0x34c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001690:	6823      	ldr	r3, [r4, #0]
 8001692:	06db      	lsls	r3, r3, #27
 8001694:	d510      	bpl.n	80016b8 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001696:	6963      	ldr	r3, [r4, #20]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d033      	beq.n	8001704 <HAL_RCC_OscConfig+0x358>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800169c:	3305      	adds	r3, #5
 800169e:	d151      	bne.n	8001744 <HAL_RCC_OscConfig+0x398>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80016a0:	4a64      	ldr	r2, [pc, #400]	; (8001834 <HAL_RCC_OscConfig+0x488>)
 80016a2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80016a4:	2104      	movs	r1, #4
 80016a6:	438b      	bics	r3, r1
 80016a8:	6353      	str	r3, [r2, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016aa:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80016ac:	31f4      	adds	r1, #244	; 0xf4
 80016ae:	438b      	bics	r3, r1
 80016b0:	69a1      	ldr	r1, [r4, #24]
 80016b2:	00c9      	lsls	r1, r1, #3
 80016b4:	430b      	orrs	r3, r1
 80016b6:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016b8:	6a23      	ldr	r3, [r4, #32]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d100      	bne.n	80016c0 <HAL_RCC_OscConfig+0x314>
 80016be:	e0b2      	b.n	8001826 <HAL_RCC_OscConfig+0x47a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c0:	4a5c      	ldr	r2, [pc, #368]	; (8001834 <HAL_RCC_OscConfig+0x488>)
 80016c2:	6851      	ldr	r1, [r2, #4]
 80016c4:	220c      	movs	r2, #12
 80016c6:	400a      	ands	r2, r1
 80016c8:	2a08      	cmp	r2, #8
 80016ca:	d100      	bne.n	80016ce <HAL_RCC_OscConfig+0x322>
 80016cc:	e08a      	b.n	80017e4 <HAL_RCC_OscConfig+0x438>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d04f      	beq.n	8001772 <HAL_RCC_OscConfig+0x3c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d2:	4a58      	ldr	r2, [pc, #352]	; (8001834 <HAL_RCC_OscConfig+0x488>)
 80016d4:	6813      	ldr	r3, [r2, #0]
 80016d6:	4958      	ldr	r1, [pc, #352]	; (8001838 <HAL_RCC_OscConfig+0x48c>)
 80016d8:	400b      	ands	r3, r1
 80016da:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016dc:	f7ff fad8 	bl	8000c90 <HAL_GetTick>
 80016e0:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e2:	4b54      	ldr	r3, [pc, #336]	; (8001834 <HAL_RCC_OscConfig+0x488>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	019b      	lsls	r3, r3, #6
 80016e8:	d57a      	bpl.n	80017e0 <HAL_RCC_OscConfig+0x434>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ea:	f7ff fad1 	bl	8000c90 <HAL_GetTick>
 80016ee:	1b00      	subs	r0, r0, r4
 80016f0:	2802      	cmp	r0, #2
 80016f2:	d9f6      	bls.n	80016e2 <HAL_RCC_OscConfig+0x336>
          {
            return HAL_TIMEOUT;
 80016f4:	2003      	movs	r0, #3
 80016f6:	e092      	b.n	800181e <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016f8:	4a4e      	ldr	r2, [pc, #312]	; (8001834 <HAL_RCC_OscConfig+0x488>)
 80016fa:	69d3      	ldr	r3, [r2, #28]
 80016fc:	494f      	ldr	r1, [pc, #316]	; (800183c <HAL_RCC_OscConfig+0x490>)
 80016fe:	400b      	ands	r3, r1
 8001700:	61d3      	str	r3, [r2, #28]
 8001702:	e7c5      	b.n	8001690 <HAL_RCC_OscConfig+0x2e4>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001704:	4b4b      	ldr	r3, [pc, #300]	; (8001834 <HAL_RCC_OscConfig+0x488>)
 8001706:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001708:	2104      	movs	r1, #4
 800170a:	430a      	orrs	r2, r1
 800170c:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800170e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001710:	3903      	subs	r1, #3
 8001712:	430a      	orrs	r2, r1
 8001714:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001716:	f7ff fabb 	bl	8000c90 <HAL_GetTick>
 800171a:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800171c:	4b45      	ldr	r3, [pc, #276]	; (8001834 <HAL_RCC_OscConfig+0x488>)
 800171e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001720:	079b      	lsls	r3, r3, #30
 8001722:	d406      	bmi.n	8001732 <HAL_RCC_OscConfig+0x386>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001724:	f7ff fab4 	bl	8000c90 <HAL_GetTick>
 8001728:	1b40      	subs	r0, r0, r5
 800172a:	2802      	cmp	r0, #2
 800172c:	d9f6      	bls.n	800171c <HAL_RCC_OscConfig+0x370>
          return HAL_TIMEOUT;
 800172e:	2003      	movs	r0, #3
 8001730:	e075      	b.n	800181e <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001732:	4940      	ldr	r1, [pc, #256]	; (8001834 <HAL_RCC_OscConfig+0x488>)
 8001734:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8001736:	22f8      	movs	r2, #248	; 0xf8
 8001738:	4393      	bics	r3, r2
 800173a:	69a2      	ldr	r2, [r4, #24]
 800173c:	00d2      	lsls	r2, r2, #3
 800173e:	4313      	orrs	r3, r2
 8001740:	634b      	str	r3, [r1, #52]	; 0x34
 8001742:	e7b9      	b.n	80016b8 <HAL_RCC_OscConfig+0x30c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001744:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <HAL_RCC_OscConfig+0x488>)
 8001746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001748:	2104      	movs	r1, #4
 800174a:	430a      	orrs	r2, r1
 800174c:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 800174e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001750:	3903      	subs	r1, #3
 8001752:	438a      	bics	r2, r1
 8001754:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001756:	f7ff fa9b 	bl	8000c90 <HAL_GetTick>
 800175a:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800175c:	4b35      	ldr	r3, [pc, #212]	; (8001834 <HAL_RCC_OscConfig+0x488>)
 800175e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001760:	079b      	lsls	r3, r3, #30
 8001762:	d5a9      	bpl.n	80016b8 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001764:	f7ff fa94 	bl	8000c90 <HAL_GetTick>
 8001768:	1b40      	subs	r0, r0, r5
 800176a:	2802      	cmp	r0, #2
 800176c:	d9f6      	bls.n	800175c <HAL_RCC_OscConfig+0x3b0>
          return HAL_TIMEOUT;
 800176e:	2003      	movs	r0, #3
 8001770:	e055      	b.n	800181e <HAL_RCC_OscConfig+0x472>
        __HAL_RCC_PLL_DISABLE();
 8001772:	4a30      	ldr	r2, [pc, #192]	; (8001834 <HAL_RCC_OscConfig+0x488>)
 8001774:	6813      	ldr	r3, [r2, #0]
 8001776:	4930      	ldr	r1, [pc, #192]	; (8001838 <HAL_RCC_OscConfig+0x48c>)
 8001778:	400b      	ands	r3, r1
 800177a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800177c:	f7ff fa88 	bl	8000c90 <HAL_GetTick>
 8001780:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001782:	4b2c      	ldr	r3, [pc, #176]	; (8001834 <HAL_RCC_OscConfig+0x488>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	019b      	lsls	r3, r3, #6
 8001788:	d506      	bpl.n	8001798 <HAL_RCC_OscConfig+0x3ec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800178a:	f7ff fa81 	bl	8000c90 <HAL_GetTick>
 800178e:	1b40      	subs	r0, r0, r5
 8001790:	2802      	cmp	r0, #2
 8001792:	d9f6      	bls.n	8001782 <HAL_RCC_OscConfig+0x3d6>
            return HAL_TIMEOUT;
 8001794:	2003      	movs	r0, #3
 8001796:	e042      	b.n	800181e <HAL_RCC_OscConfig+0x472>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001798:	4b26      	ldr	r3, [pc, #152]	; (8001834 <HAL_RCC_OscConfig+0x488>)
 800179a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800179c:	210f      	movs	r1, #15
 800179e:	438a      	bics	r2, r1
 80017a0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80017a2:	430a      	orrs	r2, r1
 80017a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	4925      	ldr	r1, [pc, #148]	; (8001840 <HAL_RCC_OscConfig+0x494>)
 80017aa:	400a      	ands	r2, r1
 80017ac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80017ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80017b0:	4301      	orrs	r1, r0
 80017b2:	430a      	orrs	r2, r1
 80017b4:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80017b6:	6819      	ldr	r1, [r3, #0]
 80017b8:	2280      	movs	r2, #128	; 0x80
 80017ba:	0452      	lsls	r2, r2, #17
 80017bc:	430a      	orrs	r2, r1
 80017be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017c0:	f7ff fa66 	bl	8000c90 <HAL_GetTick>
 80017c4:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017c6:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <HAL_RCC_OscConfig+0x488>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	019b      	lsls	r3, r3, #6
 80017cc:	d406      	bmi.n	80017dc <HAL_RCC_OscConfig+0x430>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ce:	f7ff fa5f 	bl	8000c90 <HAL_GetTick>
 80017d2:	1b00      	subs	r0, r0, r4
 80017d4:	2802      	cmp	r0, #2
 80017d6:	d9f6      	bls.n	80017c6 <HAL_RCC_OscConfig+0x41a>
            return HAL_TIMEOUT;
 80017d8:	2003      	movs	r0, #3
 80017da:	e020      	b.n	800181e <HAL_RCC_OscConfig+0x472>
        }
      }
    }
  }

  return HAL_OK;
 80017dc:	2000      	movs	r0, #0
 80017de:	e01e      	b.n	800181e <HAL_RCC_OscConfig+0x472>
 80017e0:	2000      	movs	r0, #0
 80017e2:	e01c      	b.n	800181e <HAL_RCC_OscConfig+0x472>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d020      	beq.n	800182a <HAL_RCC_OscConfig+0x47e>
        pll_config  = RCC->CFGR;
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_RCC_OscConfig+0x488>)
 80017ea:	685a      	ldr	r2, [r3, #4]
        pll_config2 = RCC->CFGR2;
 80017ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	025b      	lsls	r3, r3, #9
 80017f2:	4013      	ands	r3, r2
 80017f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80017f6:	4283      	cmp	r3, r0
 80017f8:	d001      	beq.n	80017fe <HAL_RCC_OscConfig+0x452>
          return HAL_ERROR;
 80017fa:	2001      	movs	r0, #1
 80017fc:	e00f      	b.n	800181e <HAL_RCC_OscConfig+0x472>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80017fe:	230f      	movs	r3, #15
 8001800:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001802:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001804:	428b      	cmp	r3, r1
 8001806:	d001      	beq.n	800180c <HAL_RCC_OscConfig+0x460>
          return HAL_ERROR;
 8001808:	2001      	movs	r0, #1
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x472>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800180c:	23f0      	movs	r3, #240	; 0xf0
 800180e:	039b      	lsls	r3, r3, #14
 8001810:	401a      	ands	r2, r3
 8001812:	6aa3      	ldr	r3, [r4, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001814:	429a      	cmp	r2, r3
 8001816:	d00a      	beq.n	800182e <HAL_RCC_OscConfig+0x482>
          return HAL_ERROR;
 8001818:	2001      	movs	r0, #1
 800181a:	e000      	b.n	800181e <HAL_RCC_OscConfig+0x472>
    return HAL_ERROR;
 800181c:	2001      	movs	r0, #1
}
 800181e:	b002      	add	sp, #8
 8001820:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001822:	2001      	movs	r0, #1
 8001824:	e7fb      	b.n	800181e <HAL_RCC_OscConfig+0x472>
  return HAL_OK;
 8001826:	2000      	movs	r0, #0
 8001828:	e7f9      	b.n	800181e <HAL_RCC_OscConfig+0x472>
        return HAL_ERROR;
 800182a:	2001      	movs	r0, #1
 800182c:	e7f7      	b.n	800181e <HAL_RCC_OscConfig+0x472>
  return HAL_OK;
 800182e:	2000      	movs	r0, #0
 8001830:	e7f5      	b.n	800181e <HAL_RCC_OscConfig+0x472>
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	40021000 	.word	0x40021000
 8001838:	feffffff 	.word	0xfeffffff
 800183c:	efffffff 	.word	0xefffffff
 8001840:	ffc2ffff 	.word	0xffc2ffff

08001844 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001844:	b530      	push	{r4, r5, lr}
 8001846:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001848:	aa04      	add	r2, sp, #16
 800184a:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x64>)
 800184c:	0018      	movs	r0, r3
 800184e:	c832      	ldmia	r0!, {r1, r4, r5}
 8001850:	c232      	stmia	r2!, {r1, r4, r5}
 8001852:	0011      	movs	r1, r2
 8001854:	6802      	ldr	r2, [r0, #0]
 8001856:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001858:	466a      	mov	r2, sp
 800185a:	3310      	adds	r3, #16
 800185c:	cb13      	ldmia	r3!, {r0, r1, r4}
 800185e:	c213      	stmia	r2!, {r0, r1, r4}
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <HAL_RCC_GetSysClockFreq+0x68>)
 8001866:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001868:	230c      	movs	r3, #12
 800186a:	4013      	ands	r3, r2
 800186c:	2b08      	cmp	r3, #8
 800186e:	d119      	bne.n	80018a4 <HAL_RCC_GetSysClockFreq+0x60>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001870:	0c91      	lsrs	r1, r2, #18
 8001872:	3307      	adds	r3, #7
 8001874:	4019      	ands	r1, r3
 8001876:	a804      	add	r0, sp, #16
 8001878:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800187a:	490c      	ldr	r1, [pc, #48]	; (80018ac <HAL_RCC_GetSysClockFreq+0x68>)
 800187c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800187e:	400b      	ands	r3, r1
 8001880:	4669      	mov	r1, sp
 8001882:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001884:	03d3      	lsls	r3, r2, #15
 8001886:	d408      	bmi.n	800189a <HAL_RCC_GetSysClockFreq+0x56>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001888:	0163      	lsls	r3, r4, #5
 800188a:	1b1b      	subs	r3, r3, r4
 800188c:	0198      	lsls	r0, r3, #6
 800188e:	1ac0      	subs	r0, r0, r3
 8001890:	00c0      	lsls	r0, r0, #3
 8001892:	1904      	adds	r4, r0, r4
 8001894:	0220      	lsls	r0, r4, #8
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001896:	b009      	add	sp, #36	; 0x24
 8001898:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x6c>)
 800189c:	f7fe fc3e 	bl	800011c <__udivsi3>
 80018a0:	4360      	muls	r0, r4
 80018a2:	e7f8      	b.n	8001896 <HAL_RCC_GetSysClockFreq+0x52>
      sysclockfreq = HSE_VALUE;
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80018a6:	e7f6      	b.n	8001896 <HAL_RCC_GetSysClockFreq+0x52>
 80018a8:	080024e8 	.word	0x080024e8
 80018ac:	40021000 	.word	0x40021000
 80018b0:	007a1200 	.word	0x007a1200

080018b4 <HAL_RCC_ClockConfig>:
{
 80018b4:	b570      	push	{r4, r5, r6, lr}
 80018b6:	0004      	movs	r4, r0
 80018b8:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80018ba:	2800      	cmp	r0, #0
 80018bc:	d100      	bne.n	80018c0 <HAL_RCC_ClockConfig+0xc>
 80018be:	e081      	b.n	80019c4 <HAL_RCC_ClockConfig+0x110>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018c0:	4b42      	ldr	r3, [pc, #264]	; (80019cc <HAL_RCC_ClockConfig+0x118>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2301      	movs	r3, #1
 80018c6:	4013      	ands	r3, r2
 80018c8:	428b      	cmp	r3, r1
 80018ca:	d20b      	bcs.n	80018e4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018cc:	493f      	ldr	r1, [pc, #252]	; (80019cc <HAL_RCC_ClockConfig+0x118>)
 80018ce:	680b      	ldr	r3, [r1, #0]
 80018d0:	2201      	movs	r2, #1
 80018d2:	4393      	bics	r3, r2
 80018d4:	432b      	orrs	r3, r5
 80018d6:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d8:	680b      	ldr	r3, [r1, #0]
 80018da:	401a      	ands	r2, r3
 80018dc:	42aa      	cmp	r2, r5
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 80018e0:	2001      	movs	r0, #1
 80018e2:	e070      	b.n	80019c6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e4:	6823      	ldr	r3, [r4, #0]
 80018e6:	079a      	lsls	r2, r3, #30
 80018e8:	d50e      	bpl.n	8001908 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ea:	075b      	lsls	r3, r3, #29
 80018ec:	d505      	bpl.n	80018fa <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80018ee:	4a38      	ldr	r2, [pc, #224]	; (80019d0 <HAL_RCC_ClockConfig+0x11c>)
 80018f0:	6851      	ldr	r1, [r2, #4]
 80018f2:	23e0      	movs	r3, #224	; 0xe0
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	430b      	orrs	r3, r1
 80018f8:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018fa:	4a35      	ldr	r2, [pc, #212]	; (80019d0 <HAL_RCC_ClockConfig+0x11c>)
 80018fc:	6853      	ldr	r3, [r2, #4]
 80018fe:	21f0      	movs	r1, #240	; 0xf0
 8001900:	438b      	bics	r3, r1
 8001902:	68a1      	ldr	r1, [r4, #8]
 8001904:	430b      	orrs	r3, r1
 8001906:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001908:	6823      	ldr	r3, [r4, #0]
 800190a:	07db      	lsls	r3, r3, #31
 800190c:	d52d      	bpl.n	800196a <HAL_RCC_ClockConfig+0xb6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800190e:	6863      	ldr	r3, [r4, #4]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d01e      	beq.n	8001952 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001914:	2b02      	cmp	r3, #2
 8001916:	d022      	beq.n	800195e <HAL_RCC_ClockConfig+0xaa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001918:	4a2d      	ldr	r2, [pc, #180]	; (80019d0 <HAL_RCC_ClockConfig+0x11c>)
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	0792      	lsls	r2, r2, #30
 800191e:	d553      	bpl.n	80019c8 <HAL_RCC_ClockConfig+0x114>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001920:	492b      	ldr	r1, [pc, #172]	; (80019d0 <HAL_RCC_ClockConfig+0x11c>)
 8001922:	684a      	ldr	r2, [r1, #4]
 8001924:	2003      	movs	r0, #3
 8001926:	4382      	bics	r2, r0
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800192c:	f7ff f9b0 	bl	8000c90 <HAL_GetTick>
 8001930:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001932:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <HAL_RCC_ClockConfig+0x11c>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	220c      	movs	r2, #12
 8001938:	401a      	ands	r2, r3
 800193a:	6863      	ldr	r3, [r4, #4]
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	429a      	cmp	r2, r3
 8001940:	d013      	beq.n	800196a <HAL_RCC_ClockConfig+0xb6>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001942:	f7ff f9a5 	bl	8000c90 <HAL_GetTick>
 8001946:	1b80      	subs	r0, r0, r6
 8001948:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <HAL_RCC_ClockConfig+0x120>)
 800194a:	4298      	cmp	r0, r3
 800194c:	d9f1      	bls.n	8001932 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 800194e:	2003      	movs	r0, #3
 8001950:	e039      	b.n	80019c6 <HAL_RCC_ClockConfig+0x112>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001952:	4a1f      	ldr	r2, [pc, #124]	; (80019d0 <HAL_RCC_ClockConfig+0x11c>)
 8001954:	6812      	ldr	r2, [r2, #0]
 8001956:	0392      	lsls	r2, r2, #14
 8001958:	d4e2      	bmi.n	8001920 <HAL_RCC_ClockConfig+0x6c>
        return HAL_ERROR;
 800195a:	2001      	movs	r0, #1
 800195c:	e033      	b.n	80019c6 <HAL_RCC_ClockConfig+0x112>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800195e:	4a1c      	ldr	r2, [pc, #112]	; (80019d0 <HAL_RCC_ClockConfig+0x11c>)
 8001960:	6812      	ldr	r2, [r2, #0]
 8001962:	0192      	lsls	r2, r2, #6
 8001964:	d4dc      	bmi.n	8001920 <HAL_RCC_ClockConfig+0x6c>
        return HAL_ERROR;
 8001966:	2001      	movs	r0, #1
 8001968:	e02d      	b.n	80019c6 <HAL_RCC_ClockConfig+0x112>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800196a:	4b18      	ldr	r3, [pc, #96]	; (80019cc <HAL_RCC_ClockConfig+0x118>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	2301      	movs	r3, #1
 8001970:	4013      	ands	r3, r2
 8001972:	42ab      	cmp	r3, r5
 8001974:	d90b      	bls.n	800198e <HAL_RCC_ClockConfig+0xda>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001976:	4915      	ldr	r1, [pc, #84]	; (80019cc <HAL_RCC_ClockConfig+0x118>)
 8001978:	680b      	ldr	r3, [r1, #0]
 800197a:	2201      	movs	r2, #1
 800197c:	4393      	bics	r3, r2
 800197e:	432b      	orrs	r3, r5
 8001980:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001982:	680b      	ldr	r3, [r1, #0]
 8001984:	401a      	ands	r2, r3
 8001986:	42aa      	cmp	r2, r5
 8001988:	d001      	beq.n	800198e <HAL_RCC_ClockConfig+0xda>
      return HAL_ERROR;
 800198a:	2001      	movs	r0, #1
 800198c:	e01b      	b.n	80019c6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198e:	6823      	ldr	r3, [r4, #0]
 8001990:	075b      	lsls	r3, r3, #29
 8001992:	d506      	bpl.n	80019a2 <HAL_RCC_ClockConfig+0xee>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001994:	4a0e      	ldr	r2, [pc, #56]	; (80019d0 <HAL_RCC_ClockConfig+0x11c>)
 8001996:	6853      	ldr	r3, [r2, #4]
 8001998:	490f      	ldr	r1, [pc, #60]	; (80019d8 <HAL_RCC_ClockConfig+0x124>)
 800199a:	400b      	ands	r3, r1
 800199c:	68e1      	ldr	r1, [r4, #12]
 800199e:	430b      	orrs	r3, r1
 80019a0:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80019a2:	f7ff ff4f 	bl	8001844 <HAL_RCC_GetSysClockFreq>
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <HAL_RCC_ClockConfig+0x11c>)
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	0912      	lsrs	r2, r2, #4
 80019ac:	230f      	movs	r3, #15
 80019ae:	4013      	ands	r3, r2
 80019b0:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <HAL_RCC_ClockConfig+0x128>)
 80019b2:	5cd3      	ldrb	r3, [r2, r3]
 80019b4:	40d8      	lsrs	r0, r3
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <HAL_RCC_ClockConfig+0x12c>)
 80019b8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80019ba:	2000      	movs	r0, #0
 80019bc:	f7ff f924 	bl	8000c08 <HAL_InitTick>
  return HAL_OK;
 80019c0:	2000      	movs	r0, #0
 80019c2:	e000      	b.n	80019c6 <HAL_RCC_ClockConfig+0x112>
    return HAL_ERROR;
 80019c4:	2001      	movs	r0, #1
}
 80019c6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80019c8:	2001      	movs	r0, #1
 80019ca:	e7fc      	b.n	80019c6 <HAL_RCC_ClockConfig+0x112>
 80019cc:	40022000 	.word	0x40022000
 80019d0:	40021000 	.word	0x40021000
 80019d4:	00001388 	.word	0x00001388
 80019d8:	fffff8ff 	.word	0xfffff8ff
 80019dc:	08002524 	.word	0x08002524
 80019e0:	20000018 	.word	0x20000018

080019e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019e4:	b570      	push	{r4, r5, r6, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019ea:	6803      	ldr	r3, [r0, #0]
 80019ec:	03db      	lsls	r3, r3, #15
 80019ee:	d535      	bpl.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f0:	4b3c      	ldr	r3, [pc, #240]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	d448      	bmi.n	8001a8a <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019f8:	4a3a      	ldr	r2, [pc, #232]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80019fa:	69d1      	ldr	r1, [r2, #28]
 80019fc:	2080      	movs	r0, #128	; 0x80
 80019fe:	0540      	lsls	r0, r0, #21
 8001a00:	4301      	orrs	r1, r0
 8001a02:	61d1      	str	r1, [r2, #28]
 8001a04:	69d3      	ldr	r3, [r2, #28]
 8001a06:	4003      	ands	r3, r0
 8001a08:	9301      	str	r3, [sp, #4]
 8001a0a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a0c:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0e:	4b36      	ldr	r3, [pc, #216]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	05db      	lsls	r3, r3, #23
 8001a14:	d53b      	bpl.n	8001a8e <HAL_RCCEx_PeriphCLKConfig+0xaa>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a16:	4b33      	ldr	r3, [pc, #204]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	22c0      	movs	r2, #192	; 0xc0
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a20:	d013      	beq.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x66>
 8001a22:	6861      	ldr	r1, [r4, #4]
 8001a24:	400a      	ands	r2, r1
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d00f      	beq.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a2a:	4b2e      	ldr	r3, [pc, #184]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001a2c:	6a18      	ldr	r0, [r3, #32]
 8001a2e:	4a2f      	ldr	r2, [pc, #188]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001a30:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a32:	6a1e      	ldr	r6, [r3, #32]
 8001a34:	2180      	movs	r1, #128	; 0x80
 8001a36:	0249      	lsls	r1, r1, #9
 8001a38:	4331      	orrs	r1, r6
 8001a3a:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a3c:	6a19      	ldr	r1, [r3, #32]
 8001a3e:	4e2c      	ldr	r6, [pc, #176]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001a40:	4031      	ands	r1, r6
 8001a42:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a44:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a46:	07c3      	lsls	r3, r0, #31
 8001a48:	d435      	bmi.n	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a4a:	4a26      	ldr	r2, [pc, #152]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001a4c:	6a13      	ldr	r3, [r2, #32]
 8001a4e:	4927      	ldr	r1, [pc, #156]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001a50:	400b      	ands	r3, r1
 8001a52:	6861      	ldr	r1, [r4, #4]
 8001a54:	430b      	orrs	r3, r1
 8001a56:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a58:	2d01      	cmp	r5, #1
 8001a5a:	d03b      	beq.n	8001ad4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a5c:	6823      	ldr	r3, [r4, #0]
 8001a5e:	07db      	lsls	r3, r3, #31
 8001a60:	d506      	bpl.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a62:	4a20      	ldr	r2, [pc, #128]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001a64:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001a66:	2103      	movs	r1, #3
 8001a68:	438b      	bics	r3, r1
 8001a6a:	68a1      	ldr	r1, [r4, #8]
 8001a6c:	430b      	orrs	r3, r1
 8001a6e:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a70:	6823      	ldr	r3, [r4, #0]
 8001a72:	069b      	lsls	r3, r3, #26
 8001a74:	d533      	bpl.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a76:	4a1b      	ldr	r2, [pc, #108]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001a78:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001a7a:	2110      	movs	r1, #16
 8001a7c:	438b      	bics	r3, r1
 8001a7e:	68e1      	ldr	r1, [r4, #12]
 8001a80:	430b      	orrs	r3, r1
 8001a82:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001a84:	2000      	movs	r0, #0
}
 8001a86:	b002      	add	sp, #8
 8001a88:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 8001a8a:	2500      	movs	r5, #0
 8001a8c:	e7bf      	b.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a8e:	4a16      	ldr	r2, [pc, #88]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8001a90:	6811      	ldr	r1, [r2, #0]
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	430b      	orrs	r3, r1
 8001a98:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001a9a:	f7ff f8f9 	bl	8000c90 <HAL_GetTick>
 8001a9e:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	05db      	lsls	r3, r3, #23
 8001aa6:	d4b6      	bmi.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aa8:	f7ff f8f2 	bl	8000c90 <HAL_GetTick>
 8001aac:	1b80      	subs	r0, r0, r6
 8001aae:	2864      	cmp	r0, #100	; 0x64
 8001ab0:	d9f6      	bls.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          return HAL_TIMEOUT;
 8001ab2:	2003      	movs	r0, #3
 8001ab4:	e7e7      	b.n	8001a86 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        tickstart = HAL_GetTick();
 8001ab6:	f7ff f8eb 	bl	8000c90 <HAL_GetTick>
 8001aba:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	079b      	lsls	r3, r3, #30
 8001ac2:	d4c2      	bmi.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x66>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac4:	f7ff f8e4 	bl	8000c90 <HAL_GetTick>
 8001ac8:	1b80      	subs	r0, r0, r6
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001acc:	4298      	cmp	r0, r3
 8001ace:	d9f5      	bls.n	8001abc <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	e7d8      	b.n	8001a86 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad4:	69d3      	ldr	r3, [r2, #28]
 8001ad6:	4908      	ldr	r1, [pc, #32]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001ad8:	400b      	ands	r3, r1
 8001ada:	61d3      	str	r3, [r2, #28]
 8001adc:	e7be      	b.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 8001ade:	2000      	movs	r0, #0
 8001ae0:	e7d1      	b.n	8001a86 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40007000 	.word	0x40007000
 8001aec:	fffffcff 	.word	0xfffffcff
 8001af0:	fffeffff 	.word	0xfffeffff
 8001af4:	00001388 	.word	0x00001388
 8001af8:	efffffff 	.word	0xefffffff

08001afc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001afe:	0006      	movs	r6, r0
 8001b00:	000c      	movs	r4, r1
 8001b02:	0017      	movs	r7, r2
 8001b04:	001d      	movs	r5, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001b06:	6833      	ldr	r3, [r6, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	4023      	ands	r3, r4
 8001b0c:	1b1b      	subs	r3, r3, r4
 8001b0e:	425a      	negs	r2, r3
 8001b10:	4153      	adcs	r3, r2
 8001b12:	42bb      	cmp	r3, r7
 8001b14:	d03b      	beq.n	8001b8e <SPI_WaitFlagStateUntilTimeout+0x92>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001b16:	1c6b      	adds	r3, r5, #1
 8001b18:	d0f5      	beq.n	8001b06 <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001b1a:	f7ff f8b9 	bl	8000c90 <HAL_GetTick>
 8001b1e:	9b06      	ldr	r3, [sp, #24]
 8001b20:	1ac0      	subs	r0, r0, r3
 8001b22:	42a8      	cmp	r0, r5
 8001b24:	d201      	bcs.n	8001b2a <SPI_WaitFlagStateUntilTimeout+0x2e>
 8001b26:	2d00      	cmp	r5, #0
 8001b28:	d1ed      	bne.n	8001b06 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001b2a:	6832      	ldr	r2, [r6, #0]
 8001b2c:	6853      	ldr	r3, [r2, #4]
 8001b2e:	21e0      	movs	r1, #224	; 0xe0
 8001b30:	438b      	bics	r3, r1
 8001b32:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b34:	2382      	movs	r3, #130	; 0x82
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	6872      	ldr	r2, [r6, #4]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d00c      	beq.n	8001b58 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	019b      	lsls	r3, r3, #6
 8001b42:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d016      	beq.n	8001b76 <SPI_WaitFlagStateUntilTimeout+0x7a>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001b48:	235d      	movs	r3, #93	; 0x5d
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	54f2      	strb	r2, [r6, r3]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	2200      	movs	r2, #0
 8001b52:	54f2      	strb	r2, [r6, r3]

        return HAL_TIMEOUT;
 8001b54:	2003      	movs	r0, #3
 8001b56:	e01b      	b.n	8001b90 <SPI_WaitFlagStateUntilTimeout+0x94>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b58:	68b3      	ldr	r3, [r6, #8]
 8001b5a:	2280      	movs	r2, #128	; 0x80
 8001b5c:	0212      	lsls	r2, r2, #8
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d003      	beq.n	8001b6a <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001b62:	2280      	movs	r2, #128	; 0x80
 8001b64:	00d2      	lsls	r2, r2, #3
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d1e9      	bne.n	8001b3e <SPI_WaitFlagStateUntilTimeout+0x42>
          __HAL_SPI_DISABLE(hspi);
 8001b6a:	6832      	ldr	r2, [r6, #0]
 8001b6c:	6813      	ldr	r3, [r2, #0]
 8001b6e:	2140      	movs	r1, #64	; 0x40
 8001b70:	438b      	bics	r3, r1
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	e7e3      	b.n	8001b3e <SPI_WaitFlagStateUntilTimeout+0x42>
          SPI_RESET_CRC(hspi);
 8001b76:	6832      	ldr	r2, [r6, #0]
 8001b78:	6813      	ldr	r3, [r2, #0]
 8001b7a:	4906      	ldr	r1, [pc, #24]	; (8001b94 <SPI_WaitFlagStateUntilTimeout+0x98>)
 8001b7c:	400b      	ands	r3, r1
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	6832      	ldr	r2, [r6, #0]
 8001b82:	6811      	ldr	r1, [r2, #0]
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	019b      	lsls	r3, r3, #6
 8001b88:	430b      	orrs	r3, r1
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	e7dc      	b.n	8001b48 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8001b8e:	2000      	movs	r0, #0
}
 8001b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	ffffdfff 	.word	0xffffdfff

08001b98 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b9a:	0007      	movs	r7, r0
 8001b9c:	000c      	movs	r4, r1
 8001b9e:	0015      	movs	r5, r2
 8001ba0:	001e      	movs	r6, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8001ba2:	e001      	b.n	8001ba8 <SPI_WaitFifoStateUntilTimeout+0x10>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 8001ba4:	1c73      	adds	r3, r6, #1
 8001ba6:	d10c      	bne.n	8001bc2 <SPI_WaitFifoStateUntilTimeout+0x2a>
  while ((hspi->Instance->SR & Fifo) != State)
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	6893      	ldr	r3, [r2, #8]
 8001bac:	4023      	ands	r3, r4
 8001bae:	42ab      	cmp	r3, r5
 8001bb0:	d041      	beq.n	8001c36 <SPI_WaitFifoStateUntilTimeout+0x9e>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001bb2:	23c0      	movs	r3, #192	; 0xc0
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	429c      	cmp	r4, r3
 8001bb8:	d1f4      	bne.n	8001ba4 <SPI_WaitFifoStateUntilTimeout+0xc>
 8001bba:	2d00      	cmp	r5, #0
 8001bbc:	d1f2      	bne.n	8001ba4 <SPI_WaitFifoStateUntilTimeout+0xc>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8001bbe:	7b13      	ldrb	r3, [r2, #12]
 8001bc0:	e7f0      	b.n	8001ba4 <SPI_WaitFifoStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001bc2:	f7ff f865 	bl	8000c90 <HAL_GetTick>
 8001bc6:	9b06      	ldr	r3, [sp, #24]
 8001bc8:	1ac0      	subs	r0, r0, r3
 8001bca:	42b0      	cmp	r0, r6
 8001bcc:	d201      	bcs.n	8001bd2 <SPI_WaitFifoStateUntilTimeout+0x3a>
 8001bce:	2e00      	cmp	r6, #0
 8001bd0:	d1ea      	bne.n	8001ba8 <SPI_WaitFifoStateUntilTimeout+0x10>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	6853      	ldr	r3, [r2, #4]
 8001bd6:	21e0      	movs	r1, #224	; 0xe0
 8001bd8:	438b      	bics	r3, r1
 8001bda:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bdc:	2382      	movs	r3, #130	; 0x82
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d00c      	beq.n	8001c00 <SPI_WaitFifoStateUntilTimeout+0x68>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001be6:	2380      	movs	r3, #128	; 0x80
 8001be8:	019b      	lsls	r3, r3, #6
 8001bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d016      	beq.n	8001c1e <SPI_WaitFifoStateUntilTimeout+0x86>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001bf0:	235d      	movs	r3, #93	; 0x5d
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	54fa      	strb	r2, [r7, r3]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	54fa      	strb	r2, [r7, r3]

        return HAL_TIMEOUT;
 8001bfc:	2003      	movs	r0, #3
 8001bfe:	e01b      	b.n	8001c38 <SPI_WaitFifoStateUntilTimeout+0xa0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	2280      	movs	r2, #128	; 0x80
 8001c04:	0212      	lsls	r2, r2, #8
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d003      	beq.n	8001c12 <SPI_WaitFifoStateUntilTimeout+0x7a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001c0a:	2280      	movs	r2, #128	; 0x80
 8001c0c:	00d2      	lsls	r2, r2, #3
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d1e9      	bne.n	8001be6 <SPI_WaitFifoStateUntilTimeout+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	6813      	ldr	r3, [r2, #0]
 8001c16:	2140      	movs	r1, #64	; 0x40
 8001c18:	438b      	bics	r3, r1
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	e7e3      	b.n	8001be6 <SPI_WaitFifoStateUntilTimeout+0x4e>
          SPI_RESET_CRC(hspi);
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	6813      	ldr	r3, [r2, #0]
 8001c22:	4906      	ldr	r1, [pc, #24]	; (8001c3c <SPI_WaitFifoStateUntilTimeout+0xa4>)
 8001c24:	400b      	ands	r3, r1
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	6811      	ldr	r1, [r2, #0]
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	019b      	lsls	r3, r3, #6
 8001c30:	430b      	orrs	r3, r1
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	e7dc      	b.n	8001bf0 <SPI_WaitFifoStateUntilTimeout+0x58>
      }
    }
  }

  return HAL_OK;
 8001c36:	2000      	movs	r0, #0
}
 8001c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	ffffdfff 	.word	0xffffdfff

08001c40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001c40:	b570      	push	{r4, r5, r6, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	0004      	movs	r4, r0
 8001c46:	000d      	movs	r5, r1
 8001c48:	0016      	movs	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001c4a:	21c0      	movs	r1, #192	; 0xc0
 8001c4c:	9200      	str	r2, [sp, #0]
 8001c4e:	002b      	movs	r3, r5
 8001c50:	2200      	movs	r2, #0
 8001c52:	0149      	lsls	r1, r1, #5
 8001c54:	f7ff ffa0 	bl	8001b98 <SPI_WaitFifoStateUntilTimeout>
 8001c58:	2800      	cmp	r0, #0
 8001c5a:	d118      	bne.n	8001c8e <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001c5c:	9600      	str	r6, [sp, #0]
 8001c5e:	002b      	movs	r3, r5
 8001c60:	2200      	movs	r2, #0
 8001c62:	2180      	movs	r1, #128	; 0x80
 8001c64:	0020      	movs	r0, r4
 8001c66:	f7ff ff49 	bl	8001afc <SPI_WaitFlagStateUntilTimeout>
 8001c6a:	2800      	cmp	r0, #0
 8001c6c:	d116      	bne.n	8001c9c <SPI_EndRxTxTransaction+0x5c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001c6e:	21c0      	movs	r1, #192	; 0xc0
 8001c70:	9600      	str	r6, [sp, #0]
 8001c72:	002b      	movs	r3, r5
 8001c74:	2200      	movs	r2, #0
 8001c76:	00c9      	lsls	r1, r1, #3
 8001c78:	0020      	movs	r0, r4
 8001c7a:	f7ff ff8d 	bl	8001b98 <SPI_WaitFifoStateUntilTimeout>
 8001c7e:	2800      	cmp	r0, #0
 8001c80:	d00a      	beq.n	8001c98 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c82:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001c84:	2220      	movs	r2, #32
 8001c86:	4313      	orrs	r3, r2
 8001c88:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8001c8a:	2003      	movs	r0, #3
 8001c8c:	e004      	b.n	8001c98 <SPI_EndRxTxTransaction+0x58>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c8e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001c90:	2220      	movs	r2, #32
 8001c92:	4313      	orrs	r3, r2
 8001c94:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8001c96:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8001c98:	b002      	add	sp, #8
 8001c9a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c9c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8001ca4:	2003      	movs	r0, #3
 8001ca6:	e7f7      	b.n	8001c98 <SPI_EndRxTxTransaction+0x58>

08001ca8 <SPI_EndRxTransaction>:
{
 8001ca8:	b570      	push	{r4, r5, r6, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	0004      	movs	r4, r0
 8001cae:	000d      	movs	r5, r1
 8001cb0:	0016      	movs	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cb2:	2382      	movs	r3, #130	; 0x82
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	6842      	ldr	r2, [r0, #4]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d00f      	beq.n	8001cdc <SPI_EndRxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001cbc:	9600      	str	r6, [sp, #0]
 8001cbe:	002b      	movs	r3, r5
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2180      	movs	r1, #128	; 0x80
 8001cc4:	0020      	movs	r0, r4
 8001cc6:	f7ff ff19 	bl	8001afc <SPI_WaitFlagStateUntilTimeout>
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	d115      	bne.n	8001cfa <SPI_EndRxTransaction+0x52>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cce:	2382      	movs	r3, #130	; 0x82
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	6862      	ldr	r2, [r4, #4]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d016      	beq.n	8001d06 <SPI_EndRxTransaction+0x5e>
}
 8001cd8:	b002      	add	sp, #8
 8001cda:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cdc:	6883      	ldr	r3, [r0, #8]
 8001cde:	2280      	movs	r2, #128	; 0x80
 8001ce0:	0212      	lsls	r2, r2, #8
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d003      	beq.n	8001cee <SPI_EndRxTransaction+0x46>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ce6:	2280      	movs	r2, #128	; 0x80
 8001ce8:	00d2      	lsls	r2, r2, #3
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d1e6      	bne.n	8001cbc <SPI_EndRxTransaction+0x14>
    __HAL_SPI_DISABLE(hspi);
 8001cee:	6822      	ldr	r2, [r4, #0]
 8001cf0:	6813      	ldr	r3, [r2, #0]
 8001cf2:	2140      	movs	r1, #64	; 0x40
 8001cf4:	438b      	bics	r3, r1
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	e7e0      	b.n	8001cbc <SPI_EndRxTransaction+0x14>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001cfa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8001d02:	2003      	movs	r0, #3
 8001d04:	e7e8      	b.n	8001cd8 <SPI_EndRxTransaction+0x30>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d06:	68a3      	ldr	r3, [r4, #8]
 8001d08:	2280      	movs	r2, #128	; 0x80
 8001d0a:	0212      	lsls	r2, r2, #8
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d003      	beq.n	8001d18 <SPI_EndRxTransaction+0x70>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d10:	2280      	movs	r2, #128	; 0x80
 8001d12:	00d2      	lsls	r2, r2, #3
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d1df      	bne.n	8001cd8 <SPI_EndRxTransaction+0x30>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001d18:	21c0      	movs	r1, #192	; 0xc0
 8001d1a:	9600      	str	r6, [sp, #0]
 8001d1c:	002b      	movs	r3, r5
 8001d1e:	2200      	movs	r2, #0
 8001d20:	00c9      	lsls	r1, r1, #3
 8001d22:	0020      	movs	r0, r4
 8001d24:	f7ff ff38 	bl	8001b98 <SPI_WaitFifoStateUntilTimeout>
 8001d28:	2800      	cmp	r0, #0
 8001d2a:	d0d5      	beq.n	8001cd8 <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d2c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001d2e:	2220      	movs	r2, #32
 8001d30:	4313      	orrs	r3, r2
 8001d32:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8001d34:	2003      	movs	r0, #3
 8001d36:	e7cf      	b.n	8001cd8 <SPI_EndRxTransaction+0x30>

08001d38 <HAL_SPI_Init>:
{
 8001d38:	b510      	push	{r4, lr}
 8001d3a:	1e04      	subs	r4, r0, #0
  if (hspi == NULL)
 8001d3c:	d05e      	beq.n	8001dfc <HAL_SPI_Init+0xc4>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d42:	335d      	adds	r3, #93	; 0x5d
 8001d44:	5cc3      	ldrb	r3, [r0, r3]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d04c      	beq.n	8001de4 <HAL_SPI_Init+0xac>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001d4a:	235d      	movs	r3, #93	; 0x5d
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8001d50:	6822      	ldr	r2, [r4, #0]
 8001d52:	6813      	ldr	r3, [r2, #0]
 8001d54:	2140      	movs	r1, #64	; 0x40
 8001d56:	438b      	bics	r3, r1
 8001d58:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d5a:	68e3      	ldr	r3, [r4, #12]
 8001d5c:	22e0      	movs	r2, #224	; 0xe0
 8001d5e:	00d2      	lsls	r2, r2, #3
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d945      	bls.n	8001df0 <HAL_SPI_Init+0xb8>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001d64:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001d66:	21f0      	movs	r1, #240	; 0xf0
 8001d68:	0109      	lsls	r1, r1, #4
 8001d6a:	428b      	cmp	r3, r1
 8001d6c:	d005      	beq.n	8001d7a <HAL_SPI_Init+0x42>
 8001d6e:	21e0      	movs	r1, #224	; 0xe0
 8001d70:	00c9      	lsls	r1, r1, #3
 8001d72:	428b      	cmp	r3, r1
 8001d74:	d001      	beq.n	8001d7a <HAL_SPI_Init+0x42>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d76:	2100      	movs	r1, #0
 8001d78:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001d7a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001d7c:	2900      	cmp	r1, #0
 8001d7e:	d105      	bne.n	8001d8c <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d80:	21e0      	movs	r1, #224	; 0xe0
 8001d82:	00c9      	lsls	r1, r1, #3
 8001d84:	428b      	cmp	r3, r1
 8001d86:	d936      	bls.n	8001df6 <HAL_SPI_Init+0xbe>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001d8c:	6863      	ldr	r3, [r4, #4]
 8001d8e:	68a1      	ldr	r1, [r4, #8]
 8001d90:	430b      	orrs	r3, r1
 8001d92:	6921      	ldr	r1, [r4, #16]
 8001d94:	430b      	orrs	r3, r1
 8001d96:	6961      	ldr	r1, [r4, #20]
 8001d98:	430b      	orrs	r3, r1
 8001d9a:	2180      	movs	r1, #128	; 0x80
 8001d9c:	0089      	lsls	r1, r1, #2
 8001d9e:	69a0      	ldr	r0, [r4, #24]
 8001da0:	4001      	ands	r1, r0
 8001da2:	430b      	orrs	r3, r1
 8001da4:	69e1      	ldr	r1, [r4, #28]
 8001da6:	430b      	orrs	r3, r1
 8001da8:	6a21      	ldr	r1, [r4, #32]
 8001daa:	430b      	orrs	r3, r1
 8001dac:	6821      	ldr	r1, [r4, #0]
 8001dae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001db0:	4303      	orrs	r3, r0
 8001db2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001db4:	8b61      	ldrh	r1, [r4, #26]
 8001db6:	2304      	movs	r3, #4
 8001db8:	400b      	ands	r3, r1
 8001dba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001dbc:	430b      	orrs	r3, r1
 8001dbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001dc0:	430b      	orrs	r3, r1
 8001dc2:	68e1      	ldr	r1, [r4, #12]
 8001dc4:	430b      	orrs	r3, r1
 8001dc6:	6821      	ldr	r1, [r4, #0]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001dcc:	6822      	ldr	r2, [r4, #0]
 8001dce:	69d3      	ldr	r3, [r2, #28]
 8001dd0:	490b      	ldr	r1, [pc, #44]	; (8001e00 <HAL_SPI_Init+0xc8>)
 8001dd2:	400b      	ands	r3, r1
 8001dd4:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001dda:	335d      	adds	r3, #93	; 0x5d
 8001ddc:	2201      	movs	r2, #1
 8001dde:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8001de0:	2000      	movs	r0, #0
}
 8001de2:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8001de4:	335c      	adds	r3, #92	; 0x5c
 8001de6:	2200      	movs	r2, #0
 8001de8:	54c2      	strb	r2, [r0, r3]
    HAL_SPI_MspInit(hspi);
 8001dea:	f7fe fea7 	bl	8000b3c <HAL_SPI_MspInit>
 8001dee:	e7ac      	b.n	8001d4a <HAL_SPI_Init+0x12>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001df0:	2280      	movs	r2, #128	; 0x80
 8001df2:	0152      	lsls	r2, r2, #5
 8001df4:	e7b7      	b.n	8001d66 <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001df6:	2301      	movs	r3, #1
 8001df8:	6323      	str	r3, [r4, #48]	; 0x30
 8001dfa:	e7c7      	b.n	8001d8c <HAL_SPI_Init+0x54>
    return HAL_ERROR;
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	e7f0      	b.n	8001de2 <HAL_SPI_Init+0xaa>
 8001e00:	fffff7ff 	.word	0xfffff7ff

08001e04 <HAL_SPI_Transmit>:
{
 8001e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e06:	b085      	sub	sp, #20
 8001e08:	0004      	movs	r4, r0
 8001e0a:	9101      	str	r1, [sp, #4]
 8001e0c:	0016      	movs	r6, r2
 8001e0e:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 8001e10:	235c      	movs	r3, #92	; 0x5c
 8001e12:	5cc3      	ldrb	r3, [r0, r3]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d100      	bne.n	8001e1a <HAL_SPI_Transmit+0x16>
 8001e18:	e0e2      	b.n	8001fe0 <HAL_SPI_Transmit+0x1dc>
 8001e1a:	235c      	movs	r3, #92	; 0x5c
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8001e20:	f7fe ff36 	bl	8000c90 <HAL_GetTick>
 8001e24:	0005      	movs	r5, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001e26:	235d      	movs	r3, #93	; 0x5d
 8001e28:	5ce3      	ldrb	r3, [r4, r3]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d008      	beq.n	8001e40 <HAL_SPI_Transmit+0x3c>
    errorcode = HAL_BUSY;
 8001e2e:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001e30:	235d      	movs	r3, #93	; 0x5d
 8001e32:	2201      	movs	r2, #1
 8001e34:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8001e36:	3b01      	subs	r3, #1
 8001e38:	2200      	movs	r2, #0
 8001e3a:	54e2      	strb	r2, [r4, r3]
}
 8001e3c:	b005      	add	sp, #20
 8001e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 8001e40:	9901      	ldr	r1, [sp, #4]
 8001e42:	2900      	cmp	r1, #0
 8001e44:	d100      	bne.n	8001e48 <HAL_SPI_Transmit+0x44>
 8001e46:	e0bd      	b.n	8001fc4 <HAL_SPI_Transmit+0x1c0>
 8001e48:	2e00      	cmp	r6, #0
 8001e4a:	d100      	bne.n	8001e4e <HAL_SPI_Transmit+0x4a>
 8001e4c:	e0bc      	b.n	8001fc8 <HAL_SPI_Transmit+0x1c4>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e4e:	335c      	adds	r3, #92	; 0x5c
 8001e50:	2203      	movs	r2, #3
 8001e52:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e58:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001e5a:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001e5c:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e5e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001e60:	3241      	adds	r2, #65	; 0x41
 8001e62:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 8001e64:	3202      	adds	r2, #2
 8001e66:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 8001e68:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001e6a:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	68a2      	ldr	r2, [r4, #8]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d01d      	beq.n	8001eb2 <HAL_SPI_Transmit+0xae>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e76:	6823      	ldr	r3, [r4, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	0652      	lsls	r2, r2, #25
 8001e7c:	d403      	bmi.n	8001e86 <HAL_SPI_Transmit+0x82>
    __HAL_SPI_ENABLE(hspi);
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2140      	movs	r1, #64	; 0x40
 8001e82:	430a      	orrs	r2, r1
 8001e84:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e86:	23e0      	movs	r3, #224	; 0xe0
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	68e2      	ldr	r2, [r4, #12]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d935      	bls.n	8001efc <HAL_SPI_Transmit+0xf8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e90:	6863      	ldr	r3, [r4, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_SPI_Transmit+0x96>
 8001e96:	2e01      	cmp	r6, #1
 8001e98:	d11d      	bne.n	8001ed6 <HAL_SPI_Transmit+0xd2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e9a:	6823      	ldr	r3, [r4, #0]
 8001e9c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001e9e:	8812      	ldrh	r2, [r2, #0]
 8001ea0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ea2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8001ea8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001eb0:	e011      	b.n	8001ed6 <HAL_SPI_Transmit+0xd2>
    SPI_1LINE_TX(hspi);
 8001eb2:	6822      	ldr	r2, [r4, #0]
 8001eb4:	6811      	ldr	r1, [r2, #0]
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	01db      	lsls	r3, r3, #7
 8001eba:	430b      	orrs	r3, r1
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	e7da      	b.n	8001e76 <HAL_SPI_Transmit+0x72>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ec0:	f7fe fee6 	bl	8000c90 <HAL_GetTick>
 8001ec4:	1b40      	subs	r0, r0, r5
 8001ec6:	42b8      	cmp	r0, r7
 8001ec8:	d302      	bcc.n	8001ed0 <HAL_SPI_Transmit+0xcc>
 8001eca:	1c7b      	adds	r3, r7, #1
 8001ecc:	d000      	beq.n	8001ed0 <HAL_SPI_Transmit+0xcc>
 8001ece:	e07d      	b.n	8001fcc <HAL_SPI_Transmit+0x1c8>
 8001ed0:	2f00      	cmp	r7, #0
 8001ed2:	d100      	bne.n	8001ed6 <HAL_SPI_Transmit+0xd2>
 8001ed4:	e07c      	b.n	8001fd0 <HAL_SPI_Transmit+0x1cc>
    while (hspi->TxXferCount > 0U)
 8001ed6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d05a      	beq.n	8001f94 <HAL_SPI_Transmit+0x190>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ede:	6823      	ldr	r3, [r4, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	0792      	lsls	r2, r2, #30
 8001ee4:	d5ec      	bpl.n	8001ec0 <HAL_SPI_Transmit+0xbc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ee6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001ee8:	8812      	ldrh	r2, [r2, #0]
 8001eea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001eec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001eee:	3302      	adds	r3, #2
 8001ef0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001ef2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001efa:	e7ec      	b.n	8001ed6 <HAL_SPI_Transmit+0xd2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001efc:	6863      	ldr	r3, [r4, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_SPI_Transmit+0x102>
 8001f02:	2e01      	cmp	r6, #1
 8001f04:	d12f      	bne.n	8001f66 <HAL_SPI_Transmit+0x162>
      if (hspi->TxXferCount > 1U)
 8001f06:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d90b      	bls.n	8001f26 <HAL_SPI_Transmit+0x122>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f0e:	6823      	ldr	r3, [r4, #0]
 8001f10:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001f12:	8812      	ldrh	r2, [r2, #0]
 8001f14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f18:	3302      	adds	r3, #2
 8001f1a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001f1c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f1e:	3b02      	subs	r3, #2
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001f24:	e01f      	b.n	8001f66 <HAL_SPI_Transmit+0x162>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	6822      	ldr	r2, [r4, #0]
 8001f2c:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr ++;
 8001f2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f30:	3301      	adds	r3, #1
 8001f32:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001f34:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f36:	3b01      	subs	r3, #1
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001f3c:	e013      	b.n	8001f66 <HAL_SPI_Transmit+0x162>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8001f44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f46:	3301      	adds	r3, #1
 8001f48:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8001f4a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001f52:	e008      	b.n	8001f66 <HAL_SPI_Transmit+0x162>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f54:	f7fe fe9c 	bl	8000c90 <HAL_GetTick>
 8001f58:	1b40      	subs	r0, r0, r5
 8001f5a:	42b8      	cmp	r0, r7
 8001f5c:	d301      	bcc.n	8001f62 <HAL_SPI_Transmit+0x15e>
 8001f5e:	1c7b      	adds	r3, r7, #1
 8001f60:	d138      	bne.n	8001fd4 <HAL_SPI_Transmit+0x1d0>
 8001f62:	2f00      	cmp	r7, #0
 8001f64:	d038      	beq.n	8001fd8 <HAL_SPI_Transmit+0x1d4>
    while (hspi->TxXferCount > 0U)
 8001f66:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d012      	beq.n	8001f94 <HAL_SPI_Transmit+0x190>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f6e:	6822      	ldr	r2, [r4, #0]
 8001f70:	6893      	ldr	r3, [r2, #8]
 8001f72:	079b      	lsls	r3, r3, #30
 8001f74:	d5ee      	bpl.n	8001f54 <HAL_SPI_Transmit+0x150>
        if (hspi->TxXferCount > 1U)
 8001f76:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d9df      	bls.n	8001f3e <HAL_SPI_Transmit+0x13a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f86:	3302      	adds	r3, #2
 8001f88:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001f8a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f8c:	3b02      	subs	r3, #2
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001f92:	e7e8      	b.n	8001f66 <HAL_SPI_Transmit+0x162>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f94:	002a      	movs	r2, r5
 8001f96:	0039      	movs	r1, r7
 8001f98:	0020      	movs	r0, r4
 8001f9a:	f7ff fe51 	bl	8001c40 <SPI_EndRxTxTransaction>
 8001f9e:	2800      	cmp	r0, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_SPI_Transmit+0x1a2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fa2:	2320      	movs	r3, #32
 8001fa4:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001fa6:	68a3      	ldr	r3, [r4, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d106      	bne.n	8001fba <HAL_SPI_Transmit+0x1b6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fac:	9303      	str	r3, [sp, #12]
 8001fae:	6823      	ldr	r3, [r4, #0]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	9203      	str	r2, [sp, #12]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	9303      	str	r3, [sp, #12]
 8001fb8:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fba:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10d      	bne.n	8001fdc <HAL_SPI_Transmit+0x1d8>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	e735      	b.n	8001e30 <HAL_SPI_Transmit+0x2c>
    errorcode = HAL_ERROR;
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	e733      	b.n	8001e30 <HAL_SPI_Transmit+0x2c>
 8001fc8:	2001      	movs	r0, #1
 8001fca:	e731      	b.n	8001e30 <HAL_SPI_Transmit+0x2c>
          errorcode = HAL_TIMEOUT;
 8001fcc:	2003      	movs	r0, #3
 8001fce:	e72f      	b.n	8001e30 <HAL_SPI_Transmit+0x2c>
 8001fd0:	2003      	movs	r0, #3
 8001fd2:	e72d      	b.n	8001e30 <HAL_SPI_Transmit+0x2c>
          errorcode = HAL_TIMEOUT;
 8001fd4:	2003      	movs	r0, #3
 8001fd6:	e72b      	b.n	8001e30 <HAL_SPI_Transmit+0x2c>
 8001fd8:	2003      	movs	r0, #3
 8001fda:	e729      	b.n	8001e30 <HAL_SPI_Transmit+0x2c>
    errorcode = HAL_ERROR;
 8001fdc:	2001      	movs	r0, #1
 8001fde:	e727      	b.n	8001e30 <HAL_SPI_Transmit+0x2c>
  __HAL_LOCK(hspi);
 8001fe0:	2002      	movs	r0, #2
 8001fe2:	e72b      	b.n	8001e3c <HAL_SPI_Transmit+0x38>

08001fe4 <HAL_SPI_TransmitReceive>:
{
 8001fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	0004      	movs	r4, r0
 8001fea:	000e      	movs	r6, r1
 8001fec:	9201      	str	r2, [sp, #4]
 8001fee:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 8001ff0:	235c      	movs	r3, #92	; 0x5c
 8001ff2:	5cc3      	ldrb	r3, [r0, r3]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d100      	bne.n	8001ffa <HAL_SPI_TransmitReceive+0x16>
 8001ff8:	e157      	b.n	80022aa <HAL_SPI_TransmitReceive+0x2c6>
 8001ffa:	235c      	movs	r3, #92	; 0x5c
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8002000:	f7fe fe46 	bl	8000c90 <HAL_GetTick>
 8002004:	0007      	movs	r7, r0
  tmp_state           = hspi->State;
 8002006:	235d      	movs	r3, #93	; 0x5d
 8002008:	5ce3      	ldrb	r3, [r4, r3]
 800200a:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 800200c:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800200e:	2b01      	cmp	r3, #1
 8002010:	d014      	beq.n	800203c <HAL_SPI_TransmitReceive+0x58>
 8002012:	2182      	movs	r1, #130	; 0x82
 8002014:	0049      	lsls	r1, r1, #1
 8002016:	428a      	cmp	r2, r1
 8002018:	d008      	beq.n	800202c <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 800201a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800201c:	235d      	movs	r3, #93	; 0x5d
 800201e:	2201      	movs	r2, #1
 8002020:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8002022:	3b01      	subs	r3, #1
 8002024:	2200      	movs	r2, #0
 8002026:	54e2      	strb	r2, [r4, r3]
}
 8002028:	b003      	add	sp, #12
 800202a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800202c:	68a2      	ldr	r2, [r4, #8]
 800202e:	2a00      	cmp	r2, #0
 8002030:	d000      	beq.n	8002034 <HAL_SPI_TransmitReceive+0x50>
 8002032:	e12c      	b.n	800228e <HAL_SPI_TransmitReceive+0x2aa>
 8002034:	2b04      	cmp	r3, #4
 8002036:	d001      	beq.n	800203c <HAL_SPI_TransmitReceive+0x58>
    errorcode = HAL_BUSY;
 8002038:	2002      	movs	r0, #2
 800203a:	e7ef      	b.n	800201c <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800203c:	2e00      	cmp	r6, #0
 800203e:	d100      	bne.n	8002042 <HAL_SPI_TransmitReceive+0x5e>
 8002040:	e127      	b.n	8002292 <HAL_SPI_TransmitReceive+0x2ae>
 8002042:	9b01      	ldr	r3, [sp, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d100      	bne.n	800204a <HAL_SPI_TransmitReceive+0x66>
 8002048:	e125      	b.n	8002296 <HAL_SPI_TransmitReceive+0x2b2>
 800204a:	2d00      	cmp	r5, #0
 800204c:	d100      	bne.n	8002050 <HAL_SPI_TransmitReceive+0x6c>
 800204e:	e124      	b.n	800229a <HAL_SPI_TransmitReceive+0x2b6>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002050:	235d      	movs	r3, #93	; 0x5d
 8002052:	5ce3      	ldrb	r3, [r4, r3]
 8002054:	2b04      	cmp	r3, #4
 8002056:	d002      	beq.n	800205e <HAL_SPI_TransmitReceive+0x7a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002058:	235d      	movs	r3, #93	; 0x5d
 800205a:	2205      	movs	r2, #5
 800205c:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800205e:	2300      	movs	r3, #0
 8002060:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002062:	9a01      	ldr	r2, [sp, #4]
 8002064:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002066:	2246      	movs	r2, #70	; 0x46
 8002068:	52a5      	strh	r5, [r4, r2]
  hspi->RxXferSize  = Size;
 800206a:	3a02      	subs	r2, #2
 800206c:	52a5      	strh	r5, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800206e:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002070:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002072:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8002074:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002076:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002078:	23e0      	movs	r3, #224	; 0xe0
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	68e2      	ldr	r2, [r4, #12]
 800207e:	429a      	cmp	r2, r3
 8002080:	d801      	bhi.n	8002086 <HAL_SPI_TransmitReceive+0xa2>
 8002082:	2d01      	cmp	r5, #1
 8002084:	d923      	bls.n	80020ce <HAL_SPI_TransmitReceive+0xea>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002086:	6822      	ldr	r2, [r4, #0]
 8002088:	6853      	ldr	r3, [r2, #4]
 800208a:	4989      	ldr	r1, [pc, #548]	; (80022b0 <HAL_SPI_TransmitReceive+0x2cc>)
 800208c:	400b      	ands	r3, r1
 800208e:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002090:	6823      	ldr	r3, [r4, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	0652      	lsls	r2, r2, #25
 8002096:	d403      	bmi.n	80020a0 <HAL_SPI_TransmitReceive+0xbc>
    __HAL_SPI_ENABLE(hspi);
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	2140      	movs	r1, #64	; 0x40
 800209c:	430a      	orrs	r2, r1
 800209e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020a0:	23e0      	movs	r3, #224	; 0xe0
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	68e2      	ldr	r2, [r4, #12]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d956      	bls.n	8002158 <HAL_SPI_TransmitReceive+0x174>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020aa:	6863      	ldr	r3, [r4, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <HAL_SPI_TransmitReceive+0xd0>
 80020b0:	2d01      	cmp	r5, #1
 80020b2:	d10a      	bne.n	80020ca <HAL_SPI_TransmitReceive+0xe6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020b4:	6823      	ldr	r3, [r4, #0]
 80020b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80020b8:	8812      	ldrh	r2, [r2, #0]
 80020ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020be:	3302      	adds	r3, #2
 80020c0:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80020c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80020c4:	3b01      	subs	r3, #1
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80020ca:	2501      	movs	r5, #1
 80020cc:	e024      	b.n	8002118 <HAL_SPI_TransmitReceive+0x134>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80020ce:	6822      	ldr	r2, [r4, #0]
 80020d0:	6851      	ldr	r1, [r2, #4]
 80020d2:	2380      	movs	r3, #128	; 0x80
 80020d4:	015b      	lsls	r3, r3, #5
 80020d6:	430b      	orrs	r3, r1
 80020d8:	6053      	str	r3, [r2, #4]
 80020da:	e7d9      	b.n	8002090 <HAL_SPI_TransmitReceive+0xac>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	07d2      	lsls	r2, r2, #31
 80020e2:	d510      	bpl.n	8002106 <HAL_SPI_TransmitReceive+0x122>
 80020e4:	2246      	movs	r2, #70	; 0x46
 80020e6:	5aa2      	ldrh	r2, [r4, r2]
 80020e8:	b292      	uxth	r2, r2
 80020ea:	2a00      	cmp	r2, #0
 80020ec:	d00b      	beq.n	8002106 <HAL_SPI_TransmitReceive+0x122>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80020f2:	8013      	strh	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80020f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020f6:	3302      	adds	r3, #2
 80020f8:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80020fa:	2246      	movs	r2, #70	; 0x46
 80020fc:	5aa3      	ldrh	r3, [r4, r2]
 80020fe:	3b01      	subs	r3, #1
 8002100:	b29b      	uxth	r3, r3
 8002102:	52a3      	strh	r3, [r4, r2]
        txallowed = 1U;
 8002104:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002106:	f7fe fdc3 	bl	8000c90 <HAL_GetTick>
 800210a:	1bc0      	subs	r0, r0, r7
 800210c:	9b08      	ldr	r3, [sp, #32]
 800210e:	4298      	cmp	r0, r3
 8002110:	d302      	bcc.n	8002118 <HAL_SPI_TransmitReceive+0x134>
 8002112:	3301      	adds	r3, #1
 8002114:	d000      	beq.n	8002118 <HAL_SPI_TransmitReceive+0x134>
 8002116:	e0c2      	b.n	800229e <HAL_SPI_TransmitReceive+0x2ba>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002118:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800211a:	b29b      	uxth	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d105      	bne.n	800212c <HAL_SPI_TransmitReceive+0x148>
 8002120:	3346      	adds	r3, #70	; 0x46
 8002122:	5ae3      	ldrh	r3, [r4, r3]
 8002124:	b29b      	uxth	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d100      	bne.n	800212c <HAL_SPI_TransmitReceive+0x148>
 800212a:	e0a4      	b.n	8002276 <HAL_SPI_TransmitReceive+0x292>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800212c:	6823      	ldr	r3, [r4, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	0792      	lsls	r2, r2, #30
 8002132:	d5d3      	bpl.n	80020dc <HAL_SPI_TransmitReceive+0xf8>
 8002134:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002136:	b292      	uxth	r2, r2
 8002138:	2a00      	cmp	r2, #0
 800213a:	d0cf      	beq.n	80020dc <HAL_SPI_TransmitReceive+0xf8>
 800213c:	2d01      	cmp	r5, #1
 800213e:	d1cd      	bne.n	80020dc <HAL_SPI_TransmitReceive+0xf8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002140:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002142:	8812      	ldrh	r2, [r2, #0]
 8002144:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002146:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002148:	3302      	adds	r3, #2
 800214a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800214c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800214e:	3b01      	subs	r3, #1
 8002150:	b29b      	uxth	r3, r3
 8002152:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002154:	2500      	movs	r5, #0
 8002156:	e7c1      	b.n	80020dc <HAL_SPI_TransmitReceive+0xf8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002158:	6863      	ldr	r3, [r4, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_SPI_TransmitReceive+0x17e>
 800215e:	2d01      	cmp	r5, #1
 8002160:	d10e      	bne.n	8002180 <HAL_SPI_TransmitReceive+0x19c>
      if (hspi->TxXferCount > 1U)
 8002162:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002164:	b29b      	uxth	r3, r3
 8002166:	2b01      	cmp	r3, #1
 8002168:	d90c      	bls.n	8002184 <HAL_SPI_TransmitReceive+0x1a0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800216a:	6823      	ldr	r3, [r4, #0]
 800216c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800216e:	8812      	ldrh	r2, [r2, #0]
 8002170:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002172:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002174:	3302      	adds	r3, #2
 8002176:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002178:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800217a:	3b02      	subs	r3, #2
 800217c:	b29b      	uxth	r3, r3
 800217e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002180:	2501      	movs	r5, #1
 8002182:	e046      	b.n	8002212 <HAL_SPI_TransmitReceive+0x22e>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002184:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	6822      	ldr	r2, [r4, #0]
 800218a:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 800218c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800218e:	3301      	adds	r3, #1
 8002190:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002192:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002194:	3b01      	subs	r3, #1
 8002196:	b29b      	uxth	r3, r3
 8002198:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800219a:	e7f1      	b.n	8002180 <HAL_SPI_TransmitReceive+0x19c>
        if (hspi->TxXferCount > 1U)
 800219c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800219e:	b292      	uxth	r2, r2
 80021a0:	2a01      	cmp	r2, #1
 80021a2:	d90b      	bls.n	80021bc <HAL_SPI_TransmitReceive+0x1d8>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80021a6:	8812      	ldrh	r2, [r2, #0]
 80021a8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80021aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021ac:	3302      	adds	r3, #2
 80021ae:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80021b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80021b2:	3b02      	subs	r3, #2
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80021b8:	2500      	movs	r5, #0
 80021ba:	e03d      	b.n	8002238 <HAL_SPI_TransmitReceive+0x254>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80021bc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80021be:	7812      	ldrb	r2, [r2, #0]
 80021c0:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 80021c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021c4:	3301      	adds	r3, #1
 80021c6:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80021c8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80021d0:	2500      	movs	r5, #0
 80021d2:	e031      	b.n	8002238 <HAL_SPI_TransmitReceive+0x254>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80021d4:	6822      	ldr	r2, [r4, #0]
 80021d6:	6851      	ldr	r1, [r2, #4]
 80021d8:	2380      	movs	r3, #128	; 0x80
 80021da:	015b      	lsls	r3, r3, #5
 80021dc:	430b      	orrs	r3, r1
 80021de:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 80021e0:	2501      	movs	r5, #1
 80021e2:	e00b      	b.n	80021fc <HAL_SPI_TransmitReceive+0x218>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80021e4:	7b1b      	ldrb	r3, [r3, #12]
 80021e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80021e8:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 80021ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021ec:	3301      	adds	r3, #1
 80021ee:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80021f0:	2246      	movs	r2, #70	; 0x46
 80021f2:	5aa3      	ldrh	r3, [r4, r2]
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	52a3      	strh	r3, [r4, r2]
        txallowed = 1U;
 80021fa:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80021fc:	f7fe fd48 	bl	8000c90 <HAL_GetTick>
 8002200:	1bc0      	subs	r0, r0, r7
 8002202:	9b08      	ldr	r3, [sp, #32]
 8002204:	4298      	cmp	r0, r3
 8002206:	d301      	bcc.n	800220c <HAL_SPI_TransmitReceive+0x228>
 8002208:	3301      	adds	r3, #1
 800220a:	d14a      	bne.n	80022a2 <HAL_SPI_TransmitReceive+0x2be>
 800220c:	9b08      	ldr	r3, [sp, #32]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d049      	beq.n	80022a6 <HAL_SPI_TransmitReceive+0x2c2>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002212:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002214:	b29b      	uxth	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d104      	bne.n	8002224 <HAL_SPI_TransmitReceive+0x240>
 800221a:	3346      	adds	r3, #70	; 0x46
 800221c:	5ae3      	ldrh	r3, [r4, r3]
 800221e:	b29b      	uxth	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d028      	beq.n	8002276 <HAL_SPI_TransmitReceive+0x292>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002224:	6823      	ldr	r3, [r4, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	0792      	lsls	r2, r2, #30
 800222a:	d505      	bpl.n	8002238 <HAL_SPI_TransmitReceive+0x254>
 800222c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800222e:	b292      	uxth	r2, r2
 8002230:	2a00      	cmp	r2, #0
 8002232:	d001      	beq.n	8002238 <HAL_SPI_TransmitReceive+0x254>
 8002234:	2d01      	cmp	r5, #1
 8002236:	d0b1      	beq.n	800219c <HAL_SPI_TransmitReceive+0x1b8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002238:	6823      	ldr	r3, [r4, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	07d2      	lsls	r2, r2, #31
 800223e:	d5dd      	bpl.n	80021fc <HAL_SPI_TransmitReceive+0x218>
 8002240:	2246      	movs	r2, #70	; 0x46
 8002242:	5aa2      	ldrh	r2, [r4, r2]
 8002244:	b292      	uxth	r2, r2
 8002246:	2a00      	cmp	r2, #0
 8002248:	d0d8      	beq.n	80021fc <HAL_SPI_TransmitReceive+0x218>
        if (hspi->RxXferCount > 1U)
 800224a:	2246      	movs	r2, #70	; 0x46
 800224c:	5aa2      	ldrh	r2, [r4, r2]
 800224e:	b292      	uxth	r2, r2
 8002250:	2a01      	cmp	r2, #1
 8002252:	d9c7      	bls.n	80021e4 <HAL_SPI_TransmitReceive+0x200>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002258:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800225a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800225c:	3302      	adds	r3, #2
 800225e:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002260:	2246      	movs	r2, #70	; 0x46
 8002262:	5aa3      	ldrh	r3, [r4, r2]
 8002264:	3b02      	subs	r3, #2
 8002266:	b29b      	uxth	r3, r3
 8002268:	52a3      	strh	r3, [r4, r2]
          if (hspi->RxXferCount <= 1U)
 800226a:	5aa3      	ldrh	r3, [r4, r2]
 800226c:	b29b      	uxth	r3, r3
 800226e:	2b01      	cmp	r3, #1
 8002270:	d9b0      	bls.n	80021d4 <HAL_SPI_TransmitReceive+0x1f0>
        txallowed = 1U;
 8002272:	2501      	movs	r5, #1
 8002274:	e7c2      	b.n	80021fc <HAL_SPI_TransmitReceive+0x218>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002276:	003a      	movs	r2, r7
 8002278:	9908      	ldr	r1, [sp, #32]
 800227a:	0020      	movs	r0, r4
 800227c:	f7ff fce0 	bl	8001c40 <SPI_EndRxTxTransaction>
 8002280:	2800      	cmp	r0, #0
 8002282:	d100      	bne.n	8002286 <HAL_SPI_TransmitReceive+0x2a2>
 8002284:	e6ca      	b.n	800201c <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002286:	2320      	movs	r3, #32
 8002288:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800228a:	2001      	movs	r0, #1
 800228c:	e6c6      	b.n	800201c <HAL_SPI_TransmitReceive+0x38>
    errorcode = HAL_BUSY;
 800228e:	2002      	movs	r0, #2
 8002290:	e6c4      	b.n	800201c <HAL_SPI_TransmitReceive+0x38>
    errorcode = HAL_ERROR;
 8002292:	2001      	movs	r0, #1
 8002294:	e6c2      	b.n	800201c <HAL_SPI_TransmitReceive+0x38>
 8002296:	2001      	movs	r0, #1
 8002298:	e6c0      	b.n	800201c <HAL_SPI_TransmitReceive+0x38>
 800229a:	2001      	movs	r0, #1
 800229c:	e6be      	b.n	800201c <HAL_SPI_TransmitReceive+0x38>
        errorcode = HAL_TIMEOUT;
 800229e:	2003      	movs	r0, #3
 80022a0:	e6bc      	b.n	800201c <HAL_SPI_TransmitReceive+0x38>
        errorcode = HAL_TIMEOUT;
 80022a2:	2003      	movs	r0, #3
 80022a4:	e6ba      	b.n	800201c <HAL_SPI_TransmitReceive+0x38>
 80022a6:	2003      	movs	r0, #3
 80022a8:	e6b8      	b.n	800201c <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 80022aa:	2002      	movs	r0, #2
 80022ac:	e6bc      	b.n	8002028 <HAL_SPI_TransmitReceive+0x44>
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	ffffefff 	.word	0xffffefff

080022b4 <HAL_SPI_Receive>:
{
 80022b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022b6:	b085      	sub	sp, #20
 80022b8:	0004      	movs	r4, r0
 80022ba:	000d      	movs	r5, r1
 80022bc:	0016      	movs	r6, r2
 80022be:	001f      	movs	r7, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80022c0:	2382      	movs	r3, #130	; 0x82
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	6842      	ldr	r2, [r0, #4]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d017      	beq.n	80022fa <HAL_SPI_Receive+0x46>
  __HAL_LOCK(hspi);
 80022ca:	235c      	movs	r3, #92	; 0x5c
 80022cc:	5ce3      	ldrb	r3, [r4, r3]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d100      	bne.n	80022d4 <HAL_SPI_Receive+0x20>
 80022d2:	e0b7      	b.n	8002444 <HAL_SPI_Receive+0x190>
 80022d4:	235c      	movs	r3, #92	; 0x5c
 80022d6:	2201      	movs	r2, #1
 80022d8:	54e2      	strb	r2, [r4, r3]
  tickstart = HAL_GetTick();
 80022da:	f7fe fcd9 	bl	8000c90 <HAL_GetTick>
 80022de:	9003      	str	r0, [sp, #12]
  if (hspi->State != HAL_SPI_STATE_READY)
 80022e0:	235d      	movs	r3, #93	; 0x5d
 80022e2:	5ce3      	ldrb	r3, [r4, r3]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d014      	beq.n	8002312 <HAL_SPI_Receive+0x5e>
    errorcode = HAL_BUSY;
 80022e8:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80022ea:	235d      	movs	r3, #93	; 0x5d
 80022ec:	2201      	movs	r2, #1
 80022ee:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 80022f0:	3b01      	subs	r3, #1
 80022f2:	2200      	movs	r2, #0
 80022f4:	54e2      	strb	r2, [r4, r3]
}
 80022f6:	b005      	add	sp, #20
 80022f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80022fa:	6883      	ldr	r3, [r0, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1e4      	bne.n	80022ca <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002300:	335d      	adds	r3, #93	; 0x5d
 8002302:	2204      	movs	r2, #4
 8002304:	54c2      	strb	r2, [r0, r3]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002306:	9700      	str	r7, [sp, #0]
 8002308:	0033      	movs	r3, r6
 800230a:	000a      	movs	r2, r1
 800230c:	f7ff fe6a 	bl	8001fe4 <HAL_SPI_TransmitReceive>
 8002310:	e7f1      	b.n	80022f6 <HAL_SPI_Receive+0x42>
  if ((pData == NULL) || (Size == 0U))
 8002312:	2d00      	cmp	r5, #0
 8002314:	d100      	bne.n	8002318 <HAL_SPI_Receive+0x64>
 8002316:	e087      	b.n	8002428 <HAL_SPI_Receive+0x174>
 8002318:	2e00      	cmp	r6, #0
 800231a:	d100      	bne.n	800231e <HAL_SPI_Receive+0x6a>
 800231c:	e086      	b.n	800242c <HAL_SPI_Receive+0x178>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800231e:	335c      	adds	r3, #92	; 0x5c
 8002320:	2204      	movs	r2, #4
 8002322:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002324:	2300      	movs	r3, #0
 8002326:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002328:	6425      	str	r5, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800232a:	3240      	adds	r2, #64	; 0x40
 800232c:	52a6      	strh	r6, [r4, r2]
  hspi->RxXferCount = Size;
 800232e:	3202      	adds	r2, #2
 8002330:	52a6      	strh	r6, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002332:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002334:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002336:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002338:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800233a:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800233c:	23e0      	movs	r3, #224	; 0xe0
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	68e2      	ldr	r2, [r4, #12]
 8002342:	429a      	cmp	r2, r3
 8002344:	d917      	bls.n	8002376 <HAL_SPI_Receive+0xc2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002346:	6822      	ldr	r2, [r4, #0]
 8002348:	6853      	ldr	r3, [r2, #4]
 800234a:	493f      	ldr	r1, [pc, #252]	; (8002448 <HAL_SPI_Receive+0x194>)
 800234c:	400b      	ands	r3, r1
 800234e:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002350:	2380      	movs	r3, #128	; 0x80
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	68a2      	ldr	r2, [r4, #8]
 8002356:	429a      	cmp	r2, r3
 8002358:	d014      	beq.n	8002384 <HAL_SPI_Receive+0xd0>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800235a:	6823      	ldr	r3, [r4, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	0652      	lsls	r2, r2, #25
 8002360:	d403      	bmi.n	800236a <HAL_SPI_Receive+0xb6>
    __HAL_SPI_ENABLE(hspi);
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	2140      	movs	r1, #64	; 0x40
 8002366:	430a      	orrs	r2, r1
 8002368:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800236a:	23e0      	movs	r3, #224	; 0xe0
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	68e2      	ldr	r2, [r4, #12]
 8002370:	429a      	cmp	r2, r3
 8002372:	d917      	bls.n	80023a4 <HAL_SPI_Receive+0xf0>
 8002374:	e035      	b.n	80023e2 <HAL_SPI_Receive+0x12e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002376:	6822      	ldr	r2, [r4, #0]
 8002378:	6851      	ldr	r1, [r2, #4]
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	015b      	lsls	r3, r3, #5
 800237e:	430b      	orrs	r3, r1
 8002380:	6053      	str	r3, [r2, #4]
 8002382:	e7e5      	b.n	8002350 <HAL_SPI_Receive+0x9c>
    SPI_1LINE_RX(hspi);
 8002384:	6822      	ldr	r2, [r4, #0]
 8002386:	6813      	ldr	r3, [r2, #0]
 8002388:	4930      	ldr	r1, [pc, #192]	; (800244c <HAL_SPI_Receive+0x198>)
 800238a:	400b      	ands	r3, r1
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	e7e4      	b.n	800235a <HAL_SPI_Receive+0xa6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002390:	f7fe fc7e 	bl	8000c90 <HAL_GetTick>
 8002394:	9b03      	ldr	r3, [sp, #12]
 8002396:	1ac0      	subs	r0, r0, r3
 8002398:	42b8      	cmp	r0, r7
 800239a:	d301      	bcc.n	80023a0 <HAL_SPI_Receive+0xec>
 800239c:	1c7b      	adds	r3, r7, #1
 800239e:	d147      	bne.n	8002430 <HAL_SPI_Receive+0x17c>
 80023a0:	2f00      	cmp	r7, #0
 80023a2:	d047      	beq.n	8002434 <HAL_SPI_Receive+0x180>
    while (hspi->RxXferCount > 0U)
 80023a4:	2346      	movs	r3, #70	; 0x46
 80023a6:	5ae3      	ldrh	r3, [r4, r3]
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d02e      	beq.n	800240c <HAL_SPI_Receive+0x158>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023ae:	6823      	ldr	r3, [r4, #0]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	07d2      	lsls	r2, r2, #31
 80023b4:	d5ec      	bpl.n	8002390 <HAL_SPI_Receive+0xdc>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80023b6:	7b1b      	ldrb	r3, [r3, #12]
 80023b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80023ba:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80023bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023be:	3301      	adds	r3, #1
 80023c0:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80023c2:	2246      	movs	r2, #70	; 0x46
 80023c4:	5aa3      	ldrh	r3, [r4, r2]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	52a3      	strh	r3, [r4, r2]
 80023cc:	e7ea      	b.n	80023a4 <HAL_SPI_Receive+0xf0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023ce:	f7fe fc5f 	bl	8000c90 <HAL_GetTick>
 80023d2:	9b03      	ldr	r3, [sp, #12]
 80023d4:	1ac0      	subs	r0, r0, r3
 80023d6:	42b8      	cmp	r0, r7
 80023d8:	d301      	bcc.n	80023de <HAL_SPI_Receive+0x12a>
 80023da:	1c7b      	adds	r3, r7, #1
 80023dc:	d12c      	bne.n	8002438 <HAL_SPI_Receive+0x184>
 80023de:	2f00      	cmp	r7, #0
 80023e0:	d02c      	beq.n	800243c <HAL_SPI_Receive+0x188>
    while (hspi->RxXferCount > 0U)
 80023e2:	2346      	movs	r3, #70	; 0x46
 80023e4:	5ae3      	ldrh	r3, [r4, r3]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00f      	beq.n	800240c <HAL_SPI_Receive+0x158>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023ec:	6823      	ldr	r3, [r4, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	07d2      	lsls	r2, r2, #31
 80023f2:	d5ec      	bpl.n	80023ce <HAL_SPI_Receive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80023f8:	8013      	strh	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023fc:	3302      	adds	r3, #2
 80023fe:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8002400:	2246      	movs	r2, #70	; 0x46
 8002402:	5aa3      	ldrh	r3, [r4, r2]
 8002404:	3b01      	subs	r3, #1
 8002406:	b29b      	uxth	r3, r3
 8002408:	52a3      	strh	r3, [r4, r2]
 800240a:	e7ea      	b.n	80023e2 <HAL_SPI_Receive+0x12e>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800240c:	9a03      	ldr	r2, [sp, #12]
 800240e:	0039      	movs	r1, r7
 8002410:	0020      	movs	r0, r4
 8002412:	f7ff fc49 	bl	8001ca8 <SPI_EndRxTransaction>
 8002416:	2800      	cmp	r0, #0
 8002418:	d001      	beq.n	800241e <HAL_SPI_Receive+0x16a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800241a:	2320      	movs	r3, #32
 800241c:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800241e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10d      	bne.n	8002440 <HAL_SPI_Receive+0x18c>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002424:	2000      	movs	r0, #0
 8002426:	e760      	b.n	80022ea <HAL_SPI_Receive+0x36>
    errorcode = HAL_ERROR;
 8002428:	2001      	movs	r0, #1
 800242a:	e75e      	b.n	80022ea <HAL_SPI_Receive+0x36>
 800242c:	2001      	movs	r0, #1
 800242e:	e75c      	b.n	80022ea <HAL_SPI_Receive+0x36>
          errorcode = HAL_TIMEOUT;
 8002430:	2003      	movs	r0, #3
 8002432:	e75a      	b.n	80022ea <HAL_SPI_Receive+0x36>
 8002434:	2003      	movs	r0, #3
 8002436:	e758      	b.n	80022ea <HAL_SPI_Receive+0x36>
          errorcode = HAL_TIMEOUT;
 8002438:	2003      	movs	r0, #3
 800243a:	e756      	b.n	80022ea <HAL_SPI_Receive+0x36>
 800243c:	2003      	movs	r0, #3
 800243e:	e754      	b.n	80022ea <HAL_SPI_Receive+0x36>
    errorcode = HAL_ERROR;
 8002440:	2001      	movs	r0, #1
 8002442:	e752      	b.n	80022ea <HAL_SPI_Receive+0x36>
  __HAL_LOCK(hspi);
 8002444:	2002      	movs	r0, #2
 8002446:	e756      	b.n	80022f6 <HAL_SPI_Receive+0x42>
 8002448:	ffffefff 	.word	0xffffefff
 800244c:	ffffbfff 	.word	0xffffbfff

08002450 <__libc_init_array>:
 8002450:	b570      	push	{r4, r5, r6, lr}
 8002452:	2600      	movs	r6, #0
 8002454:	4d0c      	ldr	r5, [pc, #48]	; (8002488 <__libc_init_array+0x38>)
 8002456:	4c0d      	ldr	r4, [pc, #52]	; (800248c <__libc_init_array+0x3c>)
 8002458:	1b64      	subs	r4, r4, r5
 800245a:	10a4      	asrs	r4, r4, #2
 800245c:	42a6      	cmp	r6, r4
 800245e:	d109      	bne.n	8002474 <__libc_init_array+0x24>
 8002460:	2600      	movs	r6, #0
 8002462:	f000 f835 	bl	80024d0 <_init>
 8002466:	4d0a      	ldr	r5, [pc, #40]	; (8002490 <__libc_init_array+0x40>)
 8002468:	4c0a      	ldr	r4, [pc, #40]	; (8002494 <__libc_init_array+0x44>)
 800246a:	1b64      	subs	r4, r4, r5
 800246c:	10a4      	asrs	r4, r4, #2
 800246e:	42a6      	cmp	r6, r4
 8002470:	d105      	bne.n	800247e <__libc_init_array+0x2e>
 8002472:	bd70      	pop	{r4, r5, r6, pc}
 8002474:	00b3      	lsls	r3, r6, #2
 8002476:	58eb      	ldr	r3, [r5, r3]
 8002478:	4798      	blx	r3
 800247a:	3601      	adds	r6, #1
 800247c:	e7ee      	b.n	800245c <__libc_init_array+0xc>
 800247e:	00b3      	lsls	r3, r6, #2
 8002480:	58eb      	ldr	r3, [r5, r3]
 8002482:	4798      	blx	r3
 8002484:	3601      	adds	r6, #1
 8002486:	e7f2      	b.n	800246e <__libc_init_array+0x1e>
 8002488:	08002534 	.word	0x08002534
 800248c:	08002534 	.word	0x08002534
 8002490:	08002534 	.word	0x08002534
 8002494:	08002538 	.word	0x08002538

08002498 <memset>:
 8002498:	0003      	movs	r3, r0
 800249a:	1812      	adds	r2, r2, r0
 800249c:	4293      	cmp	r3, r2
 800249e:	d100      	bne.n	80024a2 <memset+0xa>
 80024a0:	4770      	bx	lr
 80024a2:	7019      	strb	r1, [r3, #0]
 80024a4:	3301      	adds	r3, #1
 80024a6:	e7f9      	b.n	800249c <memset+0x4>

080024a8 <strncpy>:
 80024a8:	b530      	push	{r4, r5, lr}
 80024aa:	0005      	movs	r5, r0
 80024ac:	2a00      	cmp	r2, #0
 80024ae:	d100      	bne.n	80024b2 <strncpy+0xa>
 80024b0:	bd30      	pop	{r4, r5, pc}
 80024b2:	780c      	ldrb	r4, [r1, #0]
 80024b4:	3a01      	subs	r2, #1
 80024b6:	1c6b      	adds	r3, r5, #1
 80024b8:	702c      	strb	r4, [r5, #0]
 80024ba:	3101      	adds	r1, #1
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d105      	bne.n	80024cc <strncpy+0x24>
 80024c0:	189a      	adds	r2, r3, r2
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d0f4      	beq.n	80024b0 <strncpy+0x8>
 80024c6:	701c      	strb	r4, [r3, #0]
 80024c8:	3301      	adds	r3, #1
 80024ca:	e7fa      	b.n	80024c2 <strncpy+0x1a>
 80024cc:	001d      	movs	r5, r3
 80024ce:	e7ed      	b.n	80024ac <strncpy+0x4>

080024d0 <_init>:
 80024d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024d6:	bc08      	pop	{r3}
 80024d8:	469e      	mov	lr, r3
 80024da:	4770      	bx	lr

080024dc <_fini>:
 80024dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024e2:	bc08      	pop	{r3}
 80024e4:	469e      	mov	lr, r3
 80024e6:	4770      	bx	lr
