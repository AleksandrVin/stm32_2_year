
f103_nrf_transmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080039d4  080039d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a80  08003a80  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003a80  08003a80  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a80  08003a80  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a80  08003a80  00013a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a84  08003a84  00013a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000074  08003afc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08003afc  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009747  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019bb  00000000  00000000  000297e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008d8  00000000  00000000  0002b1a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000800  00000000  00000000  0002ba78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000141cb  00000000  00000000  0002c278  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000075ca  00000000  00000000  00040443  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006c9c4  00000000  00000000  00047a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b43d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000266c  00000000  00000000  000b444c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080039bc 	.word	0x080039bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080039bc 	.word	0x080039bc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <DelayMicro>:
uint8_t TX_ADDRESS[TX_ADR_WIDTH] = { 0xb3, 0xb4, 0x01 };
uint8_t RX_BUF[TX_PLOAD_WIDTH] = { 0 };
//------------------------------------------------

__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	micros *= (SystemCoreClock / 1000000) / 9;
 8000164:	4b0a      	ldr	r3, [pc, #40]	; (8000190 <DelayMicro+0x34>)
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	4a0a      	ldr	r2, [pc, #40]	; (8000194 <DelayMicro+0x38>)
 800016a:	fba2 2303 	umull	r2, r3, r2, r3
 800016e:	0ddb      	lsrs	r3, r3, #23
 8000170:	687a      	ldr	r2, [r7, #4]
 8000172:	fb02 f303 	mul.w	r3, r2, r3
 8000176:	607b      	str	r3, [r7, #4]
	/* Wait till done */
	while (micros--);
 8000178:	bf00      	nop
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	1e5a      	subs	r2, r3, #1
 800017e:	607a      	str	r2, [r7, #4]
 8000180:	2b00      	cmp	r3, #0
 8000182:	d1fa      	bne.n	800017a <DelayMicro+0x1e>
}
 8000184:	bf00      	nop
 8000186:	370c      	adds	r7, #12
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	20000004 	.word	0x20000004
 8000194:	ee9bfab5 	.word	0xee9bfab5

08000198 <NRF24_ReadReg>:

//--------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af02      	add	r7, sp, #8
 800019e:	4603      	mov	r3, r0
 80001a0:	71fb      	strb	r3, [r7, #7]
	uint8_t dt = 0, cmd;
 80001a2:	2300      	movs	r3, #0
 80001a4:	73fb      	strb	r3, [r7, #15]
	CS_ON;
 80001a6:	2200      	movs	r2, #0
 80001a8:	2108      	movs	r1, #8
 80001aa:	4813      	ldr	r0, [pc, #76]	; (80001f8 <NRF24_ReadReg+0x60>)
 80001ac:	f001 fac7 	bl	800173e <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &dt, 1, 1000);
 80001b0:	f107 020f 	add.w	r2, r7, #15
 80001b4:	1df9      	adds	r1, r7, #7
 80001b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001ba:	9300      	str	r3, [sp, #0]
 80001bc:	2301      	movs	r3, #1
 80001be:	480f      	ldr	r0, [pc, #60]	; (80001fc <NRF24_ReadReg+0x64>)
 80001c0:	f002 f89f 	bl	8002302 <HAL_SPI_TransmitReceive>
	if (addr != STATUS) //если адрес равен адрес регистра статус то и возварщаем его состояние
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	2b07      	cmp	r3, #7
 80001c8:	d00c      	beq.n	80001e4 <NRF24_ReadReg+0x4c>
	{
		cmd = 0xFF;
 80001ca:	23ff      	movs	r3, #255	; 0xff
 80001cc:	73bb      	strb	r3, [r7, #14]
		HAL_SPI_TransmitReceive(&hspi1, &cmd, &dt, 1, 1000);
 80001ce:	f107 020f 	add.w	r2, r7, #15
 80001d2:	f107 010e 	add.w	r1, r7, #14
 80001d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001da:	9300      	str	r3, [sp, #0]
 80001dc:	2301      	movs	r3, #1
 80001de:	4807      	ldr	r0, [pc, #28]	; (80001fc <NRF24_ReadReg+0x64>)
 80001e0:	f002 f88f 	bl	8002302 <HAL_SPI_TransmitReceive>
	}
	CS_OFF;
 80001e4:	2201      	movs	r2, #1
 80001e6:	2108      	movs	r1, #8
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <NRF24_ReadReg+0x60>)
 80001ea:	f001 faa8 	bl	800173e <HAL_GPIO_WritePin>
	return dt;
 80001ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	3710      	adds	r7, #16
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	40010800 	.word	0x40010800
 80001fc:	20000184 	.word	0x20000184

08000200 <NRF24_WriteReg>:
//------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	460a      	mov	r2, r1
 800020a:	71fb      	strb	r3, [r7, #7]
 800020c:	4613      	mov	r3, r2
 800020e:	71bb      	strb	r3, [r7, #6]
	addr |= W_REGISTER; //включим бит записи в адрес
 8000210:	79fb      	ldrb	r3, [r7, #7]
 8000212:	f043 0320 	orr.w	r3, r3, #32
 8000216:	b2db      	uxtb	r3, r3
 8000218:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 800021a:	2200      	movs	r2, #0
 800021c:	2108      	movs	r1, #8
 800021e:	480d      	ldr	r0, [pc, #52]	; (8000254 <NRF24_WriteReg+0x54>)
 8000220:	f001 fa8d 	bl	800173e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 1000); //отправим адрес в шину
 8000224:	1df9      	adds	r1, r7, #7
 8000226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800022a:	2201      	movs	r2, #1
 800022c:	480a      	ldr	r0, [pc, #40]	; (8000258 <NRF24_WriteReg+0x58>)
 800022e:	f001 ff34 	bl	800209a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &dt, 1, 1000); //отправим данные в шину
 8000232:	1db9      	adds	r1, r7, #6
 8000234:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000238:	2201      	movs	r2, #1
 800023a:	4807      	ldr	r0, [pc, #28]	; (8000258 <NRF24_WriteReg+0x58>)
 800023c:	f001 ff2d 	bl	800209a <HAL_SPI_Transmit>
	CS_OFF;
 8000240:	2201      	movs	r2, #1
 8000242:	2108      	movs	r1, #8
 8000244:	4803      	ldr	r0, [pc, #12]	; (8000254 <NRF24_WriteReg+0x54>)
 8000246:	f001 fa7a 	bl	800173e <HAL_GPIO_WritePin>
}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40010800 	.word	0x40010800
 8000258:	20000184 	.word	0x20000184

0800025c <NRF24_ToggleFeatures>:
//------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
	uint8_t dt[1] = { ACTIVATE };
 8000262:	2350      	movs	r3, #80	; 0x50
 8000264:	713b      	strb	r3, [r7, #4]
	CS_ON;
 8000266:	2200      	movs	r2, #0
 8000268:	2108      	movs	r1, #8
 800026a:	480f      	ldr	r0, [pc, #60]	; (80002a8 <NRF24_ToggleFeatures+0x4c>)
 800026c:	f001 fa67 	bl	800173e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, dt, 1, 1000);
 8000270:	1d39      	adds	r1, r7, #4
 8000272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000276:	2201      	movs	r2, #1
 8000278:	480c      	ldr	r0, [pc, #48]	; (80002ac <NRF24_ToggleFeatures+0x50>)
 800027a:	f001 ff0e 	bl	800209a <HAL_SPI_Transmit>
	DelayMicro(1);
 800027e:	2001      	movs	r0, #1
 8000280:	f7ff ff6c 	bl	800015c <DelayMicro>
	dt[0] = 0x73;
 8000284:	2373      	movs	r3, #115	; 0x73
 8000286:	713b      	strb	r3, [r7, #4]
	HAL_SPI_Transmit(&hspi1, dt, 1, 1000);
 8000288:	1d39      	adds	r1, r7, #4
 800028a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800028e:	2201      	movs	r2, #1
 8000290:	4806      	ldr	r0, [pc, #24]	; (80002ac <NRF24_ToggleFeatures+0x50>)
 8000292:	f001 ff02 	bl	800209a <HAL_SPI_Transmit>
	CS_OFF;
 8000296:	2201      	movs	r2, #1
 8000298:	2108      	movs	r1, #8
 800029a:	4803      	ldr	r0, [pc, #12]	; (80002a8 <NRF24_ToggleFeatures+0x4c>)
 800029c:	f001 fa4f 	bl	800173e <HAL_GPIO_WritePin>
}
 80002a0:	bf00      	nop
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	40010800 	.word	0x40010800
 80002ac:	20000184 	.word	0x20000184

080002b0 <NRF24_Write_Buf>:
	HAL_SPI_Receive(&hspi1, pBuf, bytes, 1000); //отправим данные в буфер
	CS_OFF;
}
//------------------------------------------------
void NRF24_Write_Buf(uint8_t addr, uint8_t *pBuf, uint8_t bytes)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	6039      	str	r1, [r7, #0]
 80002ba:	71fb      	strb	r3, [r7, #7]
 80002bc:	4613      	mov	r3, r2
 80002be:	71bb      	strb	r3, [r7, #6]
	addr |= W_REGISTER; //включим бит записи в адрес
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	f043 0320 	orr.w	r3, r3, #32
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80002ca:	2200      	movs	r2, #0
 80002cc:	2108      	movs	r1, #8
 80002ce:	480f      	ldr	r0, [pc, #60]	; (800030c <NRF24_Write_Buf+0x5c>)
 80002d0:	f001 fa35 	bl	800173e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 1000); //отправим адрес в шину
 80002d4:	1df9      	adds	r1, r7, #7
 80002d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002da:	2201      	movs	r2, #1
 80002dc:	480c      	ldr	r0, [pc, #48]	; (8000310 <NRF24_Write_Buf+0x60>)
 80002de:	f001 fedc 	bl	800209a <HAL_SPI_Transmit>
	DelayMicro(1);
 80002e2:	2001      	movs	r0, #1
 80002e4:	f7ff ff3a 	bl	800015c <DelayMicro>
	HAL_SPI_Transmit(&hspi1, pBuf, bytes, 1000); //отправим данные в буфер
 80002e8:	79bb      	ldrb	r3, [r7, #6]
 80002ea:	b29a      	uxth	r2, r3
 80002ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002f0:	6839      	ldr	r1, [r7, #0]
 80002f2:	4807      	ldr	r0, [pc, #28]	; (8000310 <NRF24_Write_Buf+0x60>)
 80002f4:	f001 fed1 	bl	800209a <HAL_SPI_Transmit>
	CS_OFF;
 80002f8:	2201      	movs	r2, #1
 80002fa:	2108      	movs	r1, #8
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <NRF24_Write_Buf+0x5c>)
 80002fe:	f001 fa1e 	bl	800173e <HAL_GPIO_WritePin>
}
 8000302:	bf00      	nop
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	40010800 	.word	0x40010800
 8000310:	20000184 	.word	0x20000184

08000314 <NRF24_FlushRX>:
//------------------------------------------------
void NRF24_FlushRX(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
	uint8_t dt[1] = { FLUSH_RX };
 800031a:	23e2      	movs	r3, #226	; 0xe2
 800031c:	713b      	strb	r3, [r7, #4]
	CS_ON;
 800031e:	2200      	movs	r2, #0
 8000320:	2108      	movs	r1, #8
 8000322:	480b      	ldr	r0, [pc, #44]	; (8000350 <NRF24_FlushRX+0x3c>)
 8000324:	f001 fa0b 	bl	800173e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, dt, 1, 1000);
 8000328:	1d39      	adds	r1, r7, #4
 800032a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800032e:	2201      	movs	r2, #1
 8000330:	4808      	ldr	r0, [pc, #32]	; (8000354 <NRF24_FlushRX+0x40>)
 8000332:	f001 feb2 	bl	800209a <HAL_SPI_Transmit>
	DelayMicro(1);
 8000336:	2001      	movs	r0, #1
 8000338:	f7ff ff10 	bl	800015c <DelayMicro>
	CS_OFF;
 800033c:	2201      	movs	r2, #1
 800033e:	2108      	movs	r1, #8
 8000340:	4803      	ldr	r0, [pc, #12]	; (8000350 <NRF24_FlushRX+0x3c>)
 8000342:	f001 f9fc 	bl	800173e <HAL_GPIO_WritePin>
}
 8000346:	bf00      	nop
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40010800 	.word	0x40010800
 8000354:	20000184 	.word	0x20000184

08000358 <NRF24_FlushTX>:
//------------------------------------------------
void NRF24_FlushTX(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
	uint8_t dt[1] = { FLUSH_TX };
 800035e:	23e1      	movs	r3, #225	; 0xe1
 8000360:	713b      	strb	r3, [r7, #4]
	CS_ON;
 8000362:	2200      	movs	r2, #0
 8000364:	2108      	movs	r1, #8
 8000366:	480b      	ldr	r0, [pc, #44]	; (8000394 <NRF24_FlushTX+0x3c>)
 8000368:	f001 f9e9 	bl	800173e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, dt, 1, 1000);
 800036c:	1d39      	adds	r1, r7, #4
 800036e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000372:	2201      	movs	r2, #1
 8000374:	4808      	ldr	r0, [pc, #32]	; (8000398 <NRF24_FlushTX+0x40>)
 8000376:	f001 fe90 	bl	800209a <HAL_SPI_Transmit>
	DelayMicro(1);
 800037a:	2001      	movs	r0, #1
 800037c:	f7ff feee 	bl	800015c <DelayMicro>
	CS_OFF;
 8000380:	2201      	movs	r2, #1
 8000382:	2108      	movs	r1, #8
 8000384:	4803      	ldr	r0, [pc, #12]	; (8000394 <NRF24_FlushTX+0x3c>)
 8000386:	f001 f9da 	bl	800173e <HAL_GPIO_WritePin>
}
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40010800 	.word	0x40010800
 8000398:	20000184 	.word	0x20000184

0800039c <NRF24_RX_Mode>:
//------------------------------------------------
void NRF24_RX_Mode(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
	uint8_t regval = 0x00;
 80003a2:	2300      	movs	r3, #0
 80003a4:	71fb      	strb	r3, [r7, #7]
	regval = NRF24_ReadReg(CONFIG);
 80003a6:	2000      	movs	r0, #0
 80003a8:	f7ff fef6 	bl	8000198 <NRF24_ReadReg>
 80003ac:	4603      	mov	r3, r0
 80003ae:	71fb      	strb	r3, [r7, #7]
	//разбудим модуль и переведём его в режим приёмника, включив биты PWR_UP и PRIM_RX
	regval |= (1 << PWR_UP) | (1 << PRIM_RX);
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	f043 0303 	orr.w	r3, r3, #3
 80003b6:	71fb      	strb	r3, [r7, #7]
	NRF24_WriteReg(CONFIG, regval);
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	4619      	mov	r1, r3
 80003bc:	2000      	movs	r0, #0
 80003be:	f7ff ff1f 	bl	8000200 <NRF24_WriteReg>
	CE_SET;
 80003c2:	2201      	movs	r2, #1
 80003c4:	2110      	movs	r1, #16
 80003c6:	4807      	ldr	r0, [pc, #28]	; (80003e4 <NRF24_RX_Mode+0x48>)
 80003c8:	f001 f9b9 	bl	800173e <HAL_GPIO_WritePin>
	DelayMicro(150); //Задержка минимум 130 мкс
 80003cc:	2096      	movs	r0, #150	; 0x96
 80003ce:	f7ff fec5 	bl	800015c <DelayMicro>
	// Flush buffers
	NRF24_FlushRX();
 80003d2:	f7ff ff9f 	bl	8000314 <NRF24_FlushRX>
	NRF24_FlushTX();
 80003d6:	f7ff ffbf 	bl	8000358 <NRF24_FlushTX>
}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40010800 	.word	0x40010800

080003e8 <NRF24_ini>:
//------------------------------------------------
void NRF24_ini(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	CE_RESET;
 80003ec:	2200      	movs	r2, #0
 80003ee:	2110      	movs	r1, #16
 80003f0:	4826      	ldr	r0, [pc, #152]	; (800048c <NRF24_ini+0xa4>)
 80003f2:	f001 f9a4 	bl	800173e <HAL_GPIO_WritePin>
	DelayMicro(5000);
 80003f6:	f241 3088 	movw	r0, #5000	; 0x1388
 80003fa:	f7ff feaf 	bl	800015c <DelayMicro>
	NRF24_WriteReg(CONFIG, 0x0a); // Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 80003fe:	210a      	movs	r1, #10
 8000400:	2000      	movs	r0, #0
 8000402:	f7ff fefd 	bl	8000200 <NRF24_WriteReg>
	DelayMicro(5000);
 8000406:	f241 3088 	movw	r0, #5000	; 0x1388
 800040a:	f7ff fea7 	bl	800015c <DelayMicro>
	NRF24_WriteReg(EN_AA, 0x01); // Enable Pipe0
 800040e:	2101      	movs	r1, #1
 8000410:	2001      	movs	r0, #1
 8000412:	f7ff fef5 	bl	8000200 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01); // Enable Pipe0
 8000416:	2101      	movs	r1, #1
 8000418:	2002      	movs	r0, #2
 800041a:	f7ff fef1 	bl	8000200 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); // Setup address width=3 bytes
 800041e:	2101      	movs	r1, #1
 8000420:	2003      	movs	r0, #3
 8000422:	f7ff feed 	bl	8000200 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); // // 1500us, 15 retrans
 8000426:	215f      	movs	r1, #95	; 0x5f
 8000428:	2004      	movs	r0, #4
 800042a:	f7ff fee9 	bl	8000200 <NRF24_WriteReg>
	NRF24_ToggleFeatures();
 800042e:	f7ff ff15 	bl	800025c <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);
 8000432:	2100      	movs	r1, #0
 8000434:	201d      	movs	r0, #29
 8000436:	f7ff fee3 	bl	8000200 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);
 800043a:	2100      	movs	r1, #0
 800043c:	201c      	movs	r0, #28
 800043e:	f7ff fedf 	bl	8000200 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS, 0x70); //Reset flags for IRQ
 8000442:	2170      	movs	r1, #112	; 0x70
 8000444:	2007      	movs	r0, #7
 8000446:	f7ff fedb 	bl	8000200 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); // частота 2476 MHz
 800044a:	214c      	movs	r1, #76	; 0x4c
 800044c:	2005      	movs	r0, #5
 800044e:	f7ff fed7 	bl	8000200 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x06); //TX_PWR:0dBm, Datarate:1Mbps
 8000452:	2106      	movs	r1, #6
 8000454:	2006      	movs	r0, #6
 8000456:	f7ff fed3 	bl	8000200 <NRF24_WriteReg>
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 800045a:	2203      	movs	r2, #3
 800045c:	490c      	ldr	r1, [pc, #48]	; (8000490 <NRF24_ini+0xa8>)
 800045e:	2010      	movs	r0, #16
 8000460:	f7ff ff26 	bl	80002b0 <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);
 8000464:	2203      	movs	r2, #3
 8000466:	490a      	ldr	r1, [pc, #40]	; (8000490 <NRF24_ini+0xa8>)
 8000468:	200a      	movs	r0, #10
 800046a:	f7ff ff21 	bl	80002b0 <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH); //Number of bytes in RX payload in data pipe 1
 800046e:	2110      	movs	r1, #16
 8000470:	2011      	movs	r0, #17
 8000472:	f7ff fec5 	bl	8000200 <NRF24_WriteReg>
	//пока уходим в режим приёмника
	NRF24_RX_Mode();
 8000476:	f7ff ff91 	bl	800039c <NRF24_RX_Mode>
	LED_OFF;
 800047a:	2201      	movs	r2, #1
 800047c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000480:	4804      	ldr	r0, [pc, #16]	; (8000494 <NRF24_ini+0xac>)
 8000482:	f001 f95c 	bl	800173e <HAL_GPIO_WritePin>
}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	40010800 	.word	0x40010800
 8000490:	20000000 	.word	0x20000000
 8000494:	40011000 	.word	0x40011000

08000498 <NRF24_TX_Mode>:
//--------------------------------------------------

//------------------------------------------------

void NRF24_TX_Mode(uint8_t *pBuf)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 80004a0:	2203      	movs	r2, #3
 80004a2:	4908      	ldr	r1, [pc, #32]	; (80004c4 <NRF24_TX_Mode+0x2c>)
 80004a4:	2010      	movs	r0, #16
 80004a6:	f7ff ff03 	bl	80002b0 <NRF24_Write_Buf>
	CE_RESET;
 80004aa:	2200      	movs	r2, #0
 80004ac:	2110      	movs	r1, #16
 80004ae:	4806      	ldr	r0, [pc, #24]	; (80004c8 <NRF24_TX_Mode+0x30>)
 80004b0:	f001 f945 	bl	800173e <HAL_GPIO_WritePin>
	// Flush buffers
	NRF24_FlushRX();
 80004b4:	f7ff ff2e 	bl	8000314 <NRF24_FlushRX>
	NRF24_FlushTX();
 80004b8:	f7ff ff4e 	bl	8000358 <NRF24_FlushTX>
}
 80004bc:	bf00      	nop
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20000000 	.word	0x20000000
 80004c8:	40010800 	.word	0x40010800

080004cc <NRF24_Transmit>:
//------------------------------------------------
void NRF24_Transmit(uint8_t addr, uint8_t *pBuf, uint8_t bytes)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	6039      	str	r1, [r7, #0]
 80004d6:	71fb      	strb	r3, [r7, #7]
 80004d8:	4613      	mov	r3, r2
 80004da:	71bb      	strb	r3, [r7, #6]
	CE_RESET;
 80004dc:	2200      	movs	r2, #0
 80004de:	2110      	movs	r1, #16
 80004e0:	4813      	ldr	r0, [pc, #76]	; (8000530 <NRF24_Transmit+0x64>)
 80004e2:	f001 f92c 	bl	800173e <HAL_GPIO_WritePin>
	CS_ON;
 80004e6:	2200      	movs	r2, #0
 80004e8:	2108      	movs	r1, #8
 80004ea:	4811      	ldr	r0, [pc, #68]	; (8000530 <NRF24_Transmit+0x64>)
 80004ec:	f001 f927 	bl	800173e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);    //отправим адрес в шину
 80004f0:	1df9      	adds	r1, r7, #7
 80004f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f6:	2201      	movs	r2, #1
 80004f8:	480e      	ldr	r0, [pc, #56]	; (8000534 <NRF24_Transmit+0x68>)
 80004fa:	f001 fdce 	bl	800209a <HAL_SPI_Transmit>
	DelayMicro(1);
 80004fe:	2001      	movs	r0, #1
 8000500:	f7ff fe2c 	bl	800015c <DelayMicro>
	HAL_SPI_Transmit(&hspi1, pBuf, bytes, 1000);    //отправим данные в буфер
 8000504:	79bb      	ldrb	r3, [r7, #6]
 8000506:	b29a      	uxth	r2, r3
 8000508:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800050c:	6839      	ldr	r1, [r7, #0]
 800050e:	4809      	ldr	r0, [pc, #36]	; (8000534 <NRF24_Transmit+0x68>)
 8000510:	f001 fdc3 	bl	800209a <HAL_SPI_Transmit>
	CS_OFF;
 8000514:	2201      	movs	r2, #1
 8000516:	2108      	movs	r1, #8
 8000518:	4805      	ldr	r0, [pc, #20]	; (8000530 <NRF24_Transmit+0x64>)
 800051a:	f001 f910 	bl	800173e <HAL_GPIO_WritePin>
	CE_SET;
 800051e:	2201      	movs	r2, #1
 8000520:	2110      	movs	r1, #16
 8000522:	4803      	ldr	r0, [pc, #12]	; (8000530 <NRF24_Transmit+0x64>)
 8000524:	f001 f90b 	bl	800173e <HAL_GPIO_WritePin>
}
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40010800 	.word	0x40010800
 8000534:	20000184 	.word	0x20000184

08000538 <NRF24_Send>:
//------------------------------------------------
int8_t NRF24_Send(uint8_t *pBuf, size_t timeout_ms)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
	uint8_t status = 0x00, regval = 0x00;
 8000542:	2300      	movs	r3, #0
 8000544:	72fb      	strb	r3, [r7, #11]
 8000546:	2300      	movs	r3, #0
 8000548:	72bb      	strb	r3, [r7, #10]
	NRF24_TX_Mode(pBuf);
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f7ff ffa4 	bl	8000498 <NRF24_TX_Mode>
	regval = NRF24_ReadReg(CONFIG); // if in sleep mode, then turn it on by enabling PWR_UP and disabling PRIM_RX
 8000550:	2000      	movs	r0, #0
 8000552:	f7ff fe21 	bl	8000198 <NRF24_ReadReg>
 8000556:	4603      	mov	r3, r0
 8000558:	72bb      	strb	r3, [r7, #10]
	regval |= (1 << PWR_UP);
 800055a:	7abb      	ldrb	r3, [r7, #10]
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	72bb      	strb	r3, [r7, #10]
	regval &= ~(1 << PRIM_RX);
 8000562:	7abb      	ldrb	r3, [r7, #10]
 8000564:	f023 0301 	bic.w	r3, r3, #1
 8000568:	72bb      	strb	r3, [r7, #10]
	NRF24_WriteReg(CONFIG, regval);
 800056a:	7abb      	ldrb	r3, [r7, #10]
 800056c:	4619      	mov	r1, r3
 800056e:	2000      	movs	r0, #0
 8000570:	f7ff fe46 	bl	8000200 <NRF24_WriteReg>
	DelayMicro(150);
 8000574:	2096      	movs	r0, #150	; 0x96
 8000576:	f7ff fdf1 	bl	800015c <DelayMicro>

	NRF24_Transmit(WR_TX_PLOAD, pBuf, TX_PLOAD_WIDTH);
 800057a:	2210      	movs	r2, #16
 800057c:	6879      	ldr	r1, [r7, #4]
 800057e:	20a0      	movs	r0, #160	; 0xa0
 8000580:	f7ff ffa4 	bl	80004cc <NRF24_Transmit>
	CE_SET;
 8000584:	2201      	movs	r2, #1
 8000586:	2110      	movs	r1, #16
 8000588:	482c      	ldr	r0, [pc, #176]	; (800063c <NRF24_Send+0x104>)
 800058a:	f001 f8d8 	bl	800173e <HAL_GPIO_WritePin>
	DelayMicro(15);
 800058e:	200f      	movs	r0, #15
 8000590:	f7ff fde4 	bl	800015c <DelayMicro>
	CE_RESET;
 8000594:	2200      	movs	r2, #0
 8000596:	2110      	movs	r1, #16
 8000598:	4828      	ldr	r0, [pc, #160]	; (800063c <NRF24_Send+0x104>)
 800059a:	f001 f8d0 	bl	800173e <HAL_GPIO_WritePin>
	for (size_t i = 0; i < timeout_ms; i++)
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	e014      	b.n	80005ce <NRF24_Send+0x96>
	{
		HAL_Delay(1);
 80005a4:	2001      	movs	r0, #1
 80005a6:	f000 fc53 	bl	8000e50 <HAL_Delay>
		if ((GPIO_PinState) IRQ != GPIO_PIN_SET)
 80005aa:	2104      	movs	r1, #4
 80005ac:	4823      	ldr	r0, [pc, #140]	; (800063c <NRF24_Send+0x104>)
 80005ae:	f001 f8af 	bl	8001710 <HAL_GPIO_ReadPin>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d10f      	bne.n	80005d8 <NRF24_Send+0xa0>
		{
			break;
		}
		if (i == timeout_ms - 1)
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	3b01      	subs	r3, #1
 80005bc:	68fa      	ldr	r2, [r7, #12]
 80005be:	429a      	cmp	r2, r3
 80005c0:	d102      	bne.n	80005c8 <NRF24_Send+0x90>
		{
			return -1;
 80005c2:	f04f 33ff 	mov.w	r3, #4294967295
 80005c6:	e035      	b.n	8000634 <NRF24_Send+0xfc>
	for (size_t i = 0; i < timeout_ms; i++)
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	3301      	adds	r3, #1
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	68fa      	ldr	r2, [r7, #12]
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d3e6      	bcc.n	80005a4 <NRF24_Send+0x6c>
 80005d6:	e000      	b.n	80005da <NRF24_Send+0xa2>
			break;
 80005d8:	bf00      	nop
		}
	}
	status = NRF24_ReadReg(STATUS);
 80005da:	2007      	movs	r0, #7
 80005dc:	f7ff fddc 	bl	8000198 <NRF24_ReadReg>
 80005e0:	4603      	mov	r3, r0
 80005e2:	72fb      	strb	r3, [r7, #11]
	if (status & TX_DS)
 80005e4:	7afb      	ldrb	r3, [r7, #11]
 80005e6:	f003 0320 	and.w	r3, r3, #32
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d009      	beq.n	8000602 <NRF24_Send+0xca>
	{
		LED_TGL;
 80005ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f2:	4813      	ldr	r0, [pc, #76]	; (8000640 <NRF24_Send+0x108>)
 80005f4:	f001 f8bb 	bl	800176e <HAL_GPIO_TogglePin>
		NRF24_WriteReg(STATUS, TX_DS);
 80005f8:	2120      	movs	r1, #32
 80005fa:	2007      	movs	r0, #7
 80005fc:	f7ff fe00 	bl	8000200 <NRF24_WriteReg>
 8000600:	e00f      	b.n	8000622 <NRF24_Send+0xea>
	}
	else if (status & MAX_RT)
 8000602:	7afb      	ldrb	r3, [r7, #11]
 8000604:	f003 0310 	and.w	r3, r3, #16
 8000608:	2b00      	cmp	r3, #0
 800060a:	d00a      	beq.n	8000622 <NRF24_Send+0xea>
	{
		NRF24_WriteReg(STATUS, MAX_RT);
 800060c:	2110      	movs	r1, #16
 800060e:	2007      	movs	r0, #7
 8000610:	f7ff fdf6 	bl	8000200 <NRF24_WriteReg>
		NRF24_FlushTX();
 8000614:	f7ff fea0 	bl	8000358 <NRF24_FlushTX>
		NRF24_RX_Mode();
 8000618:	f7ff fec0 	bl	800039c <NRF24_RX_Mode>
		return -1;
 800061c:	f04f 33ff 	mov.w	r3, #4294967295
 8000620:	e008      	b.n	8000634 <NRF24_Send+0xfc>
	}
	regval = NRF24_ReadReg(OBSERVE_TX);
 8000622:	2008      	movs	r0, #8
 8000624:	f7ff fdb8 	bl	8000198 <NRF24_ReadReg>
 8000628:	4603      	mov	r3, r0
 800062a:	72bb      	strb	r3, [r7, #10]
	// go to RX mode
	NRF24_RX_Mode();
 800062c:	f7ff feb6 	bl	800039c <NRF24_RX_Mode>
	return regval;
 8000630:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40010800 	.word	0x40010800
 8000640:	40011000 	.word	0x40011000

08000644 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000644:	b5b0      	push	{r4, r5, r7, lr}
 8000646:	b09a      	sub	sp, #104	; 0x68
 8000648:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	//uint8_t dt_reg = 0;
	uint8_t retr_cnt;
	int8_t dt;
	uint16_t retr_cnt_full;
	uint8_t ch[17] = "                ";
 800064a:	4b51      	ldr	r3, [pc, #324]	; (8000790 <main+0x14c>)
 800064c:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000650:	461d      	mov	r5, r3
 8000652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000654:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000656:	682b      	ldr	r3, [r5, #0]
 8000658:	7023      	strb	r3, [r4, #0]
	uint8_t ch_2[17] = "                ";
 800065a:	4b4d      	ldr	r3, [pc, #308]	; (8000790 <main+0x14c>)
 800065c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000660:	461d      	mov	r5, r3
 8000662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000666:	682b      	ldr	r3, [r5, #0]
 8000668:	7023      	strb	r3, [r4, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800066a:	f000 fb8f 	bl	8000d8c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800066e:	f000 f899 	bl	80007a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000672:	f000 f95b 	bl	800092c <MX_GPIO_Init>
	MX_DMA_Init();
 8000676:	f000 f93b 	bl	80008f0 <MX_DMA_Init>
	MX_SPI1_Init();
 800067a:	f000 f8d9 	bl	8000830 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 800067e:	f000 f90d 	bl	800089c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	NRF24_ini();
 8000682:	f7ff feb1 	bl	80003e8 <NRF24_ini>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (HAL_UART_Receive(&huart1, ch, 16, 500) != HAL_OK)
 8000686:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800068a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800068e:	2210      	movs	r2, #16
 8000690:	4840      	ldr	r0, [pc, #256]	; (8000794 <main+0x150>)
 8000692:	f002 f946 	bl	8002922 <HAL_UART_Receive>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d026      	beq.n	80006ea <main+0xa6>
		{
			dt = NRF24_Send(ch_2, 200);
 800069c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006a0:	21c8      	movs	r1, #200	; 0xc8
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff48 	bl	8000538 <NRF24_Send>
 80006a8:	4603      	mov	r3, r0
 80006aa:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			if (dt == -1)
 80006ae:	f997 3065 	ldrsb.w	r3, [r7, #101]	; 0x65
 80006b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006b6:	d1e6      	bne.n	8000686 <main+0x42>
			{
				char string_log[] = "//---no connection---//\n";
 80006b8:	4b37      	ldr	r3, [pc, #220]	; (8000798 <main+0x154>)
 80006ba:	f107 0420 	add.w	r4, r7, #32
 80006be:	461d      	mov	r5, r3
 80006c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006c8:	c403      	stmia	r4!, {r0, r1}
 80006ca:	7022      	strb	r2, [r4, #0]
				HAL_UART_Transmit(&huart1, (uint8_t*) string_log, strlen(string_log), 1000);
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff fd3b 	bl	800014c <strlen>
 80006d6:	4603      	mov	r3, r0
 80006d8:	b29a      	uxth	r2, r3
 80006da:	f107 0120 	add.w	r1, r7, #32
 80006de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e2:	482c      	ldr	r0, [pc, #176]	; (8000794 <main+0x150>)
 80006e4:	f002 f884 	bl	80027f0 <HAL_UART_Transmit>
 80006e8:	e7cd      	b.n	8000686 <main+0x42>
			}
		}
		else
		{
			strcpy(ch_2, ch);
 80006ea:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80006ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006f2:	4611      	mov	r1, r2
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 fd67 	bl	80031c8 <strcpy>
			dt = NRF24_Send(ch, 200);
 80006fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006fe:	21c8      	movs	r1, #200	; 0xc8
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ff19 	bl	8000538 <NRF24_Send>
 8000706:	4603      	mov	r3, r0
 8000708:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			if (dt == -1)
 800070c:	f997 3065 	ldrsb.w	r3, [r7, #101]	; 0x65
 8000710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000714:	d115      	bne.n	8000742 <main+0xfe>
			{
				char string_log[] = "//---no connection---//\n";
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <main+0x154>)
 8000718:	1d3c      	adds	r4, r7, #4
 800071a:	461d      	mov	r5, r3
 800071c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800071e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000720:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000724:	c403      	stmia	r4!, {r0, r1}
 8000726:	7022      	strb	r2, [r4, #0]
				HAL_UART_Transmit(&huart1, (uint8_t*) string_log, strlen(string_log), 1000);
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fd0e 	bl	800014c <strlen>
 8000730:	4603      	mov	r3, r0
 8000732:	b29a      	uxth	r2, r3
 8000734:	1d39      	adds	r1, r7, #4
 8000736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073a:	4816      	ldr	r0, [pc, #88]	; (8000794 <main+0x150>)
 800073c:	f002 f858 	bl	80027f0 <HAL_UART_Transmit>
 8000740:	e021      	b.n	8000786 <main+0x142>
			}
			else
			{
				retr_cnt = dt & 0xF;
 8000742:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8000746:	f003 030f 	and.w	r3, r3, #15
 800074a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
				retr_cnt_full += retr_cnt;
 800074e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000752:	b29a      	uxth	r2, r3
 8000754:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000758:	4413      	add	r3, r2
 800075a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
				sprintf(str1, "\t took %i repeats to send\n", dt & 0x0F);
 800075e:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8000762:	f003 030f 	and.w	r3, r3, #15
 8000766:	461a      	mov	r2, r3
 8000768:	490c      	ldr	r1, [pc, #48]	; (800079c <main+0x158>)
 800076a:	480d      	ldr	r0, [pc, #52]	; (80007a0 <main+0x15c>)
 800076c:	f002 fd0c 	bl	8003188 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) str1, strlen(str1), 1000);
 8000770:	480b      	ldr	r0, [pc, #44]	; (80007a0 <main+0x15c>)
 8000772:	f7ff fceb 	bl	800014c <strlen>
 8000776:	4603      	mov	r3, r0
 8000778:	b29a      	uxth	r2, r3
 800077a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077e:	4908      	ldr	r1, [pc, #32]	; (80007a0 <main+0x15c>)
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <main+0x150>)
 8000782:	f002 f835 	bl	80027f0 <HAL_UART_Transmit>
			}
			HAL_Delay(200);
 8000786:	20c8      	movs	r0, #200	; 0xc8
 8000788:	f000 fb62 	bl	8000e50 <HAL_Delay>
		if (HAL_UART_Receive(&huart1, ch, 16, 500) != HAL_OK)
 800078c:	e77b      	b.n	8000686 <main+0x42>
 800078e:	bf00      	nop
 8000790:	080039f0 	.word	0x080039f0
 8000794:	20000144 	.word	0x20000144
 8000798:	08003a04 	.word	0x08003a04
 800079c:	080039d4 	.word	0x080039d4
 80007a0:	20000090 	.word	0x20000090

080007a4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b090      	sub	sp, #64	; 0x40
 80007a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007aa:	f107 0318 	add.w	r3, r7, #24
 80007ae:	2228      	movs	r2, #40	; 0x28
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f002 fce0 	bl	8003178 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c6:	2301      	movs	r3, #1
 80007c8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ce:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d4:	2301      	movs	r3, #1
 80007d6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d8:	2302      	movs	r3, #2
 80007da:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80007e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80007e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e8:	f107 0318 	add.w	r3, r7, #24
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 ffd7 	bl	80017a0 <HAL_RCC_OscConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x58>
	{
		Error_Handler();
 80007f8:	f000 f904 	bl	8000a04 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 80007fc:	230f      	movs	r3, #15
 80007fe:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000800:	2302      	movs	r3, #2
 8000802:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800080c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2101      	movs	r1, #1
 8000816:	4618      	mov	r0, r3
 8000818:	f001 fa42 	bl	8001ca0 <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x82>
	{
		Error_Handler();
 8000822:	f000 f8ef 	bl	8000a04 <Error_Handler>
	}
}
 8000826:	bf00      	nop
 8000828:	3740      	adds	r7, #64	; 0x40
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000834:	4b17      	ldr	r3, [pc, #92]	; (8000894 <MX_SPI1_Init+0x64>)
 8000836:	4a18      	ldr	r2, [pc, #96]	; (8000898 <MX_SPI1_Init+0x68>)
 8000838:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800083a:	4b16      	ldr	r3, [pc, #88]	; (8000894 <MX_SPI1_Init+0x64>)
 800083c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000840:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_SPI1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_SPI1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_SPI1_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_SPI1_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_SPI1_Init+0x64>)
 800085c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000860:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_SPI1_Init+0x64>)
 8000864:	2218      	movs	r2, #24
 8000866:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <MX_SPI1_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_SPI1_Init+0x64>)
 8000870:	2200      	movs	r2, #0
 8000872:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <MX_SPI1_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_SPI1_Init+0x64>)
 800087c:	220a      	movs	r2, #10
 800087e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000880:	4804      	ldr	r0, [pc, #16]	; (8000894 <MX_SPI1_Init+0x64>)
 8000882:	f001 fba9 	bl	8001fd8 <HAL_SPI_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 800088c:	f000 f8ba 	bl	8000a04 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000184 	.word	0x20000184
 8000898:	40013000 	.word	0x40013000

0800089c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	; (80008ec <MX_USART1_UART_Init+0x50>)
 80008a4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ac:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008d4:	f001 ff3f 	bl	8002756 <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 80008de:	f000 f891 	bl	8000a04 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000144 	.word	0x20000144
 80008ec:	40013800 	.word	0x40013800

080008f0 <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_DMA_Init+0x38>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	4a0b      	ldr	r2, [pc, #44]	; (8000928 <MX_DMA_Init+0x38>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6153      	str	r3, [r2, #20]
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_DMA_Init+0x38>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2100      	movs	r1, #0
 8000912:	200f      	movs	r0, #15
 8000914:	f000 fb95 	bl	8001042 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000918:	200f      	movs	r0, #15
 800091a:	f000 fbae 	bl	800107a <HAL_NVIC_EnableIRQ>

}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000

0800092c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000932:	f107 0310 	add.w	r3, r7, #16
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000940:	4b2d      	ldr	r3, [pc, #180]	; (80009f8 <MX_GPIO_Init+0xcc>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a2c      	ldr	r2, [pc, #176]	; (80009f8 <MX_GPIO_Init+0xcc>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b2a      	ldr	r3, [pc, #168]	; (80009f8 <MX_GPIO_Init+0xcc>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0310 	and.w	r3, r3, #16
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000958:	4b27      	ldr	r3, [pc, #156]	; (80009f8 <MX_GPIO_Init+0xcc>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a26      	ldr	r2, [pc, #152]	; (80009f8 <MX_GPIO_Init+0xcc>)
 800095e:	f043 0320 	orr.w	r3, r3, #32
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <MX_GPIO_Init+0xcc>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0320 	and.w	r3, r3, #32
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000970:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <MX_GPIO_Init+0xcc>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a20      	ldr	r2, [pc, #128]	; (80009f8 <MX_GPIO_Init+0xcc>)
 8000976:	f043 0304 	orr.w	r3, r3, #4
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <MX_GPIO_Init+0xcc>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0304 	and.w	r3, r3, #4
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800098e:	481b      	ldr	r0, [pc, #108]	; (80009fc <MX_GPIO_Init+0xd0>)
 8000990:	f000 fed5 	bl	800173e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, CSN_OUT_Pin | CE_OUT_Pin, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	2118      	movs	r1, #24
 8000998:	4819      	ldr	r0, [pc, #100]	; (8000a00 <MX_GPIO_Init+0xd4>)
 800099a:	f000 fed0 	bl	800173e <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 800099e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2302      	movs	r3, #2
 80009ae:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	4619      	mov	r1, r3
 80009b6:	4811      	ldr	r0, [pc, #68]	; (80009fc <MX_GPIO_Init+0xd0>)
 80009b8:	f000 fd50 	bl	800145c <HAL_GPIO_Init>

	/*Configure GPIO pin : IRQ_IN_Pin */
	GPIO_InitStruct.Pin = IRQ_IN_Pin;
 80009bc:	2304      	movs	r3, #4
 80009be:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(IRQ_IN_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	4619      	mov	r1, r3
 80009ce:	480c      	ldr	r0, [pc, #48]	; (8000a00 <MX_GPIO_Init+0xd4>)
 80009d0:	f000 fd44 	bl	800145c <HAL_GPIO_Init>

	/*Configure GPIO pins : CSN_OUT_Pin CE_OUT_Pin */
	GPIO_InitStruct.Pin = CSN_OUT_Pin | CE_OUT_Pin;
 80009d4:	2318      	movs	r3, #24
 80009d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	4619      	mov	r1, r3
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_GPIO_Init+0xd4>)
 80009ec:	f000 fd36 	bl	800145c <HAL_GPIO_Init>

}
 80009f0:	bf00      	nop
 80009f2:	3720      	adds	r7, #32
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40011000 	.word	0x40011000
 8000a00:	40010800 	.word	0x40010800

08000a04 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <HAL_MspInit+0x5c>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	4a14      	ldr	r2, [pc, #80]	; (8000a6c <HAL_MspInit+0x5c>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6193      	str	r3, [r2, #24]
 8000a22:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_MspInit+0x5c>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <HAL_MspInit+0x5c>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <HAL_MspInit+0x5c>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a38:	61d3      	str	r3, [r2, #28]
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <HAL_MspInit+0x5c>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a46:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <HAL_MspInit+0x60>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <HAL_MspInit+0x60>)
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a62:	bf00      	nop
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40010000 	.word	0x40010000

08000a74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0310 	add.w	r3, r7, #16
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a1b      	ldr	r2, [pc, #108]	; (8000afc <HAL_SPI_MspInit+0x88>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d12f      	bne.n	8000af4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a94:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <HAL_SPI_MspInit+0x8c>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a19      	ldr	r2, [pc, #100]	; (8000b00 <HAL_SPI_MspInit+0x8c>)
 8000a9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <HAL_SPI_MspInit+0x8c>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <HAL_SPI_MspInit+0x8c>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a13      	ldr	r2, [pc, #76]	; (8000b00 <HAL_SPI_MspInit+0x8c>)
 8000ab2:	f043 0304 	orr.w	r3, r3, #4
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <HAL_SPI_MspInit+0x8c>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f003 0304 	and.w	r3, r3, #4
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ac4:	23a0      	movs	r3, #160	; 0xa0
 8000ac6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480b      	ldr	r0, [pc, #44]	; (8000b04 <HAL_SPI_MspInit+0x90>)
 8000ad8:	f000 fcc0 	bl	800145c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000adc:	2340      	movs	r3, #64	; 0x40
 8000ade:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	f107 0310 	add.w	r3, r7, #16
 8000aec:	4619      	mov	r1, r3
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <HAL_SPI_MspInit+0x90>)
 8000af0:	f000 fcb4 	bl	800145c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000af4:	bf00      	nop
 8000af6:	3720      	adds	r7, #32
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40013000 	.word	0x40013000
 8000b00:	40021000 	.word	0x40021000
 8000b04:	40010800 	.word	0x40010800

08000b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a33      	ldr	r2, [pc, #204]	; (8000bf0 <HAL_UART_MspInit+0xe8>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d15f      	bne.n	8000be8 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b28:	4b32      	ldr	r3, [pc, #200]	; (8000bf4 <HAL_UART_MspInit+0xec>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a31      	ldr	r2, [pc, #196]	; (8000bf4 <HAL_UART_MspInit+0xec>)
 8000b2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b2f      	ldr	r3, [pc, #188]	; (8000bf4 <HAL_UART_MspInit+0xec>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b40:	4b2c      	ldr	r3, [pc, #176]	; (8000bf4 <HAL_UART_MspInit+0xec>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	4a2b      	ldr	r2, [pc, #172]	; (8000bf4 <HAL_UART_MspInit+0xec>)
 8000b46:	f043 0304 	orr.w	r3, r3, #4
 8000b4a:	6193      	str	r3, [r2, #24]
 8000b4c:	4b29      	ldr	r3, [pc, #164]	; (8000bf4 <HAL_UART_MspInit+0xec>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	f003 0304 	and.w	r3, r3, #4
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b62:	2303      	movs	r3, #3
 8000b64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	f107 0310 	add.w	r3, r7, #16
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4822      	ldr	r0, [pc, #136]	; (8000bf8 <HAL_UART_MspInit+0xf0>)
 8000b6e:	f000 fc75 	bl	800145c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	4619      	mov	r1, r3
 8000b86:	481c      	ldr	r0, [pc, #112]	; (8000bf8 <HAL_UART_MspInit+0xf0>)
 8000b88:	f000 fc68 	bl	800145c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <HAL_UART_MspInit+0xf4>)
 8000b8e:	4a1c      	ldr	r2, [pc, #112]	; (8000c00 <HAL_UART_MspInit+0xf8>)
 8000b90:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b92:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <HAL_UART_MspInit+0xf4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b98:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <HAL_UART_MspInit+0xf4>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <HAL_UART_MspInit+0xf4>)
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ba4:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <HAL_UART_MspInit+0xf4>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <HAL_UART_MspInit+0xf4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_UART_MspInit+0xf4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <HAL_UART_MspInit+0xf4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000bbc:	480f      	ldr	r0, [pc, #60]	; (8000bfc <HAL_UART_MspInit+0xf4>)
 8000bbe:	f000 fa77 	bl	80010b0 <HAL_DMA_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000bc8:	f7ff ff1c 	bl	8000a04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <HAL_UART_MspInit+0xf4>)
 8000bd0:	635a      	str	r2, [r3, #52]	; 0x34
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <HAL_UART_MspInit+0xf4>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2102      	movs	r1, #2
 8000bdc:	2025      	movs	r0, #37	; 0x25
 8000bde:	f000 fa30 	bl	8001042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000be2:	2025      	movs	r0, #37	; 0x25
 8000be4:	f000 fa49 	bl	800107a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000be8:	bf00      	nop
 8000bea:	3720      	adds	r7, #32
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40013800 	.word	0x40013800
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40010800 	.word	0x40010800
 8000bfc:	20000100 	.word	0x20000100
 8000c00:	40020058 	.word	0x40020058

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr

08000c10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <HardFault_Handler+0x4>

08000c16 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <MemManage_Handler+0x4>

08000c1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <BusFault_Handler+0x4>

08000c22 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <UsageFault_Handler+0x4>

08000c28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr

08000c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c50:	f000 f8e2 	bl	8000e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <DMA1_Channel5_IRQHandler+0x10>)
 8000c5e:	f000 faf7 	bl	8001250 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000100 	.word	0x20000100

08000c6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <USART1_IRQHandler+0x10>)
 8000c72:	f001 fefd 	bl	8002a70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000144 	.word	0x20000144

08000c80 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <_sbrk+0x50>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d102      	bne.n	8000c96 <_sbrk+0x16>
		heap_end = &end;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <_sbrk+0x50>)
 8000c92:	4a10      	ldr	r2, [pc, #64]	; (8000cd4 <_sbrk+0x54>)
 8000c94:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <_sbrk+0x50>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <_sbrk+0x50>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	466a      	mov	r2, sp
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d907      	bls.n	8000cba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000caa:	f002 fa3b 	bl	8003124 <__errno>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	230c      	movs	r3, #12
 8000cb2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb8:	e006      	b.n	8000cc8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000cba:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <_sbrk+0x50>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	4a03      	ldr	r2, [pc, #12]	; (8000cd0 <_sbrk+0x50>)
 8000cc4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200000f4 	.word	0x200000f4
 8000cd4:	200001e8 	.word	0x200001e8

08000cd8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000cdc:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <SystemInit+0x5c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <SystemInit+0x5c>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <SystemInit+0x5c>)
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	4911      	ldr	r1, [pc, #68]	; (8000d34 <SystemInit+0x5c>)
 8000cee:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <SystemInit+0x60>)
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <SystemInit+0x5c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <SystemInit+0x5c>)
 8000cfa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d02:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <SystemInit+0x5c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <SystemInit+0x5c>)
 8000d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d0e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <SystemInit+0x5c>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <SystemInit+0x5c>)
 8000d16:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000d1a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <SystemInit+0x5c>)
 8000d1e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000d22:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <SystemInit+0x64>)
 8000d26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d2a:	609a      	str	r2, [r3, #8]
#endif 
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	40021000 	.word	0x40021000
 8000d38:	f8ff0000 	.word	0xf8ff0000
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d40:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d42:	e003      	b.n	8000d4c <LoopCopyDataInit>

08000d44 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d44:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000d46:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d48:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d4a:	3104      	adds	r1, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d4c:	480a      	ldr	r0, [pc, #40]	; (8000d78 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000d50:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d52:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d54:	d3f6      	bcc.n	8000d44 <CopyDataInit>
  ldr r2, =_sbss
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000d58:	e002      	b.n	8000d60 <LoopFillZerobss>

08000d5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000d5c:	f842 3b04 	str.w	r3, [r2], #4

08000d60 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000d62:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d64:	d3f9      	bcc.n	8000d5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d66:	f7ff ffb7 	bl	8000cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d6a:	f002 f9e1 	bl	8003130 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d6e:	f7ff fc69 	bl	8000644 <main>
  bx lr
 8000d72:	4770      	bx	lr
  ldr r3, =_sidata
 8000d74:	08003a88 	.word	0x08003a88
  ldr r0, =_sdata
 8000d78:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d7c:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8000d80:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8000d84:	200001e4 	.word	0x200001e4

08000d88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC1_2_IRQHandler>
	...

08000d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <HAL_Init+0x28>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <HAL_Init+0x28>)
 8000d96:	f043 0310 	orr.w	r3, r3, #16
 8000d9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f000 f945 	bl	800102c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f000 f808 	bl	8000db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da8:	f7ff fe32 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40022000 	.word	0x40022000

08000db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_InitTick+0x54>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_InitTick+0x58>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f95d 	bl	8001096 <HAL_SYSTICK_Config>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00e      	b.n	8000e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b0f      	cmp	r3, #15
 8000dea:	d80a      	bhi.n	8000e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dec:	2200      	movs	r2, #0
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	f000 f925 	bl	8001042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df8:	4a06      	ldr	r2, [pc, #24]	; (8000e14 <HAL_InitTick+0x5c>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e000      	b.n	8000e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000004 	.word	0x20000004
 8000e10:	2000000c 	.word	0x2000000c
 8000e14:	20000008 	.word	0x20000008

08000e18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <HAL_IncTick+0x1c>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <HAL_IncTick+0x20>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	4a03      	ldr	r2, [pc, #12]	; (8000e38 <HAL_IncTick+0x20>)
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr
 8000e34:	2000000c 	.word	0x2000000c
 8000e38:	200001dc 	.word	0x200001dc

08000e3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e40:	4b02      	ldr	r3, [pc, #8]	; (8000e4c <HAL_GetTick+0x10>)
 8000e42:	681b      	ldr	r3, [r3, #0]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	200001dc 	.word	0x200001dc

08000e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e58:	f7ff fff0 	bl	8000e3c <HAL_GetTick>
 8000e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e68:	d005      	beq.n	8000e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <HAL_Delay+0x40>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4413      	add	r3, r2
 8000e74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e76:	bf00      	nop
 8000e78:	f7ff ffe0 	bl	8000e3c <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d8f7      	bhi.n	8000e78 <HAL_Delay+0x28>
  {
  }
}
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	2000000c 	.word	0x2000000c

08000e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec6:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	60d3      	str	r3, [r2, #12]
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	f003 0307 	and.w	r3, r3, #7
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	db0b      	blt.n	8000f22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	f003 021f 	and.w	r2, r3, #31
 8000f10:	4906      	ldr	r1, [pc, #24]	; (8000f2c <__NVIC_EnableIRQ+0x34>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	095b      	lsrs	r3, r3, #5
 8000f18:	2001      	movs	r0, #1
 8000f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	e000e100 	.word	0xe000e100

08000f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	db0a      	blt.n	8000f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	490c      	ldr	r1, [pc, #48]	; (8000f7c <__NVIC_SetPriority+0x4c>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	0112      	lsls	r2, r2, #4
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	440b      	add	r3, r1
 8000f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f58:	e00a      	b.n	8000f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4908      	ldr	r1, [pc, #32]	; (8000f80 <__NVIC_SetPriority+0x50>)
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	f003 030f 	and.w	r3, r3, #15
 8000f66:	3b04      	subs	r3, #4
 8000f68:	0112      	lsls	r2, r2, #4
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	761a      	strb	r2, [r3, #24]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000e100 	.word	0xe000e100
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b089      	sub	sp, #36	; 0x24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f1c3 0307 	rsb	r3, r3, #7
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	bf28      	it	cs
 8000fa2:	2304      	movcs	r3, #4
 8000fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	2b06      	cmp	r3, #6
 8000fac:	d902      	bls.n	8000fb4 <NVIC_EncodePriority+0x30>
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3b03      	subs	r3, #3
 8000fb2:	e000      	b.n	8000fb6 <NVIC_EncodePriority+0x32>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd6:	43d9      	mvns	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	4313      	orrs	r3, r2
         );
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3724      	adds	r7, #36	; 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ff8:	d301      	bcc.n	8000ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e00f      	b.n	800101e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <SysTick_Config+0x40>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3b01      	subs	r3, #1
 8001004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001006:	210f      	movs	r1, #15
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	f7ff ff90 	bl	8000f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <SysTick_Config+0x40>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <SysTick_Config+0x40>)
 8001018:	2207      	movs	r2, #7
 800101a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	e000e010 	.word	0xe000e010

0800102c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ff2d 	bl	8000e94 <__NVIC_SetPriorityGrouping>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001042:	b580      	push	{r7, lr}
 8001044:	b086      	sub	sp, #24
 8001046:	af00      	add	r7, sp, #0
 8001048:	4603      	mov	r3, r0
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
 800104e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001054:	f7ff ff42 	bl	8000edc <__NVIC_GetPriorityGrouping>
 8001058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	68b9      	ldr	r1, [r7, #8]
 800105e:	6978      	ldr	r0, [r7, #20]
 8001060:	f7ff ff90 	bl	8000f84 <NVIC_EncodePriority>
 8001064:	4602      	mov	r2, r0
 8001066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800106a:	4611      	mov	r1, r2
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff5f 	bl	8000f30 <__NVIC_SetPriority>
}
 8001072:	bf00      	nop
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	4603      	mov	r3, r0
 8001082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff35 	bl	8000ef8 <__NVIC_EnableIRQ>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ffa2 	bl	8000fe8 <SysTick_Config>
 80010a4:	4603      	mov	r3, r0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e043      	b.n	800114e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	4b22      	ldr	r3, [pc, #136]	; (8001158 <HAL_DMA_Init+0xa8>)
 80010ce:	4413      	add	r3, r2
 80010d0:	4a22      	ldr	r2, [pc, #136]	; (800115c <HAL_DMA_Init+0xac>)
 80010d2:	fba2 2303 	umull	r2, r3, r2, r3
 80010d6:	091b      	lsrs	r3, r3, #4
 80010d8:	009a      	lsls	r2, r3, #2
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a1f      	ldr	r2, [pc, #124]	; (8001160 <HAL_DMA_Init+0xb0>)
 80010e2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2202      	movs	r2, #2
 80010e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80010fa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80010fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001108:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001114:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001120:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	4313      	orrs	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2201      	movs	r2, #1
 8001140:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr
 8001158:	bffdfff8 	.word	0xbffdfff8
 800115c:	cccccccd 	.word	0xcccccccd
 8001160:	40020000 	.word	0x40020000

08001164 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001176:	2b02      	cmp	r3, #2
 8001178:	d005      	beq.n	8001186 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2204      	movs	r2, #4
 800117e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	73fb      	strb	r3, [r7, #15]
 8001184:	e051      	b.n	800122a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f022 020e 	bic.w	r2, r2, #14
 8001194:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f022 0201 	bic.w	r2, r2, #1
 80011a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a22      	ldr	r2, [pc, #136]	; (8001234 <HAL_DMA_Abort_IT+0xd0>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d029      	beq.n	8001204 <HAL_DMA_Abort_IT+0xa0>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a20      	ldr	r2, [pc, #128]	; (8001238 <HAL_DMA_Abort_IT+0xd4>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d022      	beq.n	8001200 <HAL_DMA_Abort_IT+0x9c>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a1f      	ldr	r2, [pc, #124]	; (800123c <HAL_DMA_Abort_IT+0xd8>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d01a      	beq.n	80011fa <HAL_DMA_Abort_IT+0x96>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a1d      	ldr	r2, [pc, #116]	; (8001240 <HAL_DMA_Abort_IT+0xdc>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d012      	beq.n	80011f4 <HAL_DMA_Abort_IT+0x90>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a1c      	ldr	r2, [pc, #112]	; (8001244 <HAL_DMA_Abort_IT+0xe0>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d00a      	beq.n	80011ee <HAL_DMA_Abort_IT+0x8a>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a1a      	ldr	r2, [pc, #104]	; (8001248 <HAL_DMA_Abort_IT+0xe4>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d102      	bne.n	80011e8 <HAL_DMA_Abort_IT+0x84>
 80011e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011e6:	e00e      	b.n	8001206 <HAL_DMA_Abort_IT+0xa2>
 80011e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011ec:	e00b      	b.n	8001206 <HAL_DMA_Abort_IT+0xa2>
 80011ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011f2:	e008      	b.n	8001206 <HAL_DMA_Abort_IT+0xa2>
 80011f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f8:	e005      	b.n	8001206 <HAL_DMA_Abort_IT+0xa2>
 80011fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011fe:	e002      	b.n	8001206 <HAL_DMA_Abort_IT+0xa2>
 8001200:	2310      	movs	r3, #16
 8001202:	e000      	b.n	8001206 <HAL_DMA_Abort_IT+0xa2>
 8001204:	2301      	movs	r3, #1
 8001206:	4a11      	ldr	r2, [pc, #68]	; (800124c <HAL_DMA_Abort_IT+0xe8>)
 8001208:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2201      	movs	r2, #1
 800120e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	4798      	blx	r3
    } 
  }
  return status;
 800122a:	7bfb      	ldrb	r3, [r7, #15]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40020008 	.word	0x40020008
 8001238:	4002001c 	.word	0x4002001c
 800123c:	40020030 	.word	0x40020030
 8001240:	40020044 	.word	0x40020044
 8001244:	40020058 	.word	0x40020058
 8001248:	4002006c 	.word	0x4002006c
 800124c:	40020000 	.word	0x40020000

08001250 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	2204      	movs	r2, #4
 800126e:	409a      	lsls	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4013      	ands	r3, r2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d04f      	beq.n	8001318 <HAL_DMA_IRQHandler+0xc8>
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	2b00      	cmp	r3, #0
 8001280:	d04a      	beq.n	8001318 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0320 	and.w	r3, r3, #32
 800128c:	2b00      	cmp	r3, #0
 800128e:	d107      	bne.n	80012a0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 0204 	bic.w	r2, r2, #4
 800129e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a66      	ldr	r2, [pc, #408]	; (8001440 <HAL_DMA_IRQHandler+0x1f0>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d029      	beq.n	80012fe <HAL_DMA_IRQHandler+0xae>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a65      	ldr	r2, [pc, #404]	; (8001444 <HAL_DMA_IRQHandler+0x1f4>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d022      	beq.n	80012fa <HAL_DMA_IRQHandler+0xaa>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a63      	ldr	r2, [pc, #396]	; (8001448 <HAL_DMA_IRQHandler+0x1f8>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d01a      	beq.n	80012f4 <HAL_DMA_IRQHandler+0xa4>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a62      	ldr	r2, [pc, #392]	; (800144c <HAL_DMA_IRQHandler+0x1fc>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d012      	beq.n	80012ee <HAL_DMA_IRQHandler+0x9e>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a60      	ldr	r2, [pc, #384]	; (8001450 <HAL_DMA_IRQHandler+0x200>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d00a      	beq.n	80012e8 <HAL_DMA_IRQHandler+0x98>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a5f      	ldr	r2, [pc, #380]	; (8001454 <HAL_DMA_IRQHandler+0x204>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d102      	bne.n	80012e2 <HAL_DMA_IRQHandler+0x92>
 80012dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012e0:	e00e      	b.n	8001300 <HAL_DMA_IRQHandler+0xb0>
 80012e2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80012e6:	e00b      	b.n	8001300 <HAL_DMA_IRQHandler+0xb0>
 80012e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80012ec:	e008      	b.n	8001300 <HAL_DMA_IRQHandler+0xb0>
 80012ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012f2:	e005      	b.n	8001300 <HAL_DMA_IRQHandler+0xb0>
 80012f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012f8:	e002      	b.n	8001300 <HAL_DMA_IRQHandler+0xb0>
 80012fa:	2340      	movs	r3, #64	; 0x40
 80012fc:	e000      	b.n	8001300 <HAL_DMA_IRQHandler+0xb0>
 80012fe:	2304      	movs	r3, #4
 8001300:	4a55      	ldr	r2, [pc, #340]	; (8001458 <HAL_DMA_IRQHandler+0x208>)
 8001302:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 8094 	beq.w	8001436 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001316:	e08e      	b.n	8001436 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	2202      	movs	r2, #2
 800131e:	409a      	lsls	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4013      	ands	r3, r2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d056      	beq.n	80013d6 <HAL_DMA_IRQHandler+0x186>
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d051      	beq.n	80013d6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0320 	and.w	r3, r3, #32
 800133c:	2b00      	cmp	r3, #0
 800133e:	d10b      	bne.n	8001358 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 020a 	bic.w	r2, r2, #10
 800134e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a38      	ldr	r2, [pc, #224]	; (8001440 <HAL_DMA_IRQHandler+0x1f0>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d029      	beq.n	80013b6 <HAL_DMA_IRQHandler+0x166>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a37      	ldr	r2, [pc, #220]	; (8001444 <HAL_DMA_IRQHandler+0x1f4>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d022      	beq.n	80013b2 <HAL_DMA_IRQHandler+0x162>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a35      	ldr	r2, [pc, #212]	; (8001448 <HAL_DMA_IRQHandler+0x1f8>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d01a      	beq.n	80013ac <HAL_DMA_IRQHandler+0x15c>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a34      	ldr	r2, [pc, #208]	; (800144c <HAL_DMA_IRQHandler+0x1fc>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d012      	beq.n	80013a6 <HAL_DMA_IRQHandler+0x156>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a32      	ldr	r2, [pc, #200]	; (8001450 <HAL_DMA_IRQHandler+0x200>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d00a      	beq.n	80013a0 <HAL_DMA_IRQHandler+0x150>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a31      	ldr	r2, [pc, #196]	; (8001454 <HAL_DMA_IRQHandler+0x204>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d102      	bne.n	800139a <HAL_DMA_IRQHandler+0x14a>
 8001394:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001398:	e00e      	b.n	80013b8 <HAL_DMA_IRQHandler+0x168>
 800139a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800139e:	e00b      	b.n	80013b8 <HAL_DMA_IRQHandler+0x168>
 80013a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013a4:	e008      	b.n	80013b8 <HAL_DMA_IRQHandler+0x168>
 80013a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013aa:	e005      	b.n	80013b8 <HAL_DMA_IRQHandler+0x168>
 80013ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013b0:	e002      	b.n	80013b8 <HAL_DMA_IRQHandler+0x168>
 80013b2:	2320      	movs	r3, #32
 80013b4:	e000      	b.n	80013b8 <HAL_DMA_IRQHandler+0x168>
 80013b6:	2302      	movs	r3, #2
 80013b8:	4a27      	ldr	r2, [pc, #156]	; (8001458 <HAL_DMA_IRQHandler+0x208>)
 80013ba:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d034      	beq.n	8001436 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80013d4:	e02f      	b.n	8001436 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	2208      	movs	r2, #8
 80013dc:	409a      	lsls	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4013      	ands	r3, r2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d028      	beq.n	8001438 <HAL_DMA_IRQHandler+0x1e8>
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d023      	beq.n	8001438 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 020e 	bic.w	r2, r2, #14
 80013fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001408:	2101      	movs	r1, #1
 800140a:	fa01 f202 	lsl.w	r2, r1, r2
 800140e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	2b00      	cmp	r3, #0
 800142c:	d004      	beq.n	8001438 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	4798      	blx	r3
    }
  }
  return;
 8001436:	bf00      	nop
 8001438:	bf00      	nop
}
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40020008 	.word	0x40020008
 8001444:	4002001c 	.word	0x4002001c
 8001448:	40020030 	.word	0x40020030
 800144c:	40020044 	.word	0x40020044
 8001450:	40020058 	.word	0x40020058
 8001454:	4002006c 	.word	0x4002006c
 8001458:	40020000 	.word	0x40020000

0800145c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800145c:	b480      	push	{r7}
 800145e:	b08b      	sub	sp, #44	; 0x2c
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800146e:	e127      	b.n	80016c0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001470:	2201      	movs	r2, #1
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	69fa      	ldr	r2, [r7, #28]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	429a      	cmp	r2, r3
 800148a:	f040 8116 	bne.w	80016ba <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b12      	cmp	r3, #18
 8001494:	d034      	beq.n	8001500 <HAL_GPIO_Init+0xa4>
 8001496:	2b12      	cmp	r3, #18
 8001498:	d80d      	bhi.n	80014b6 <HAL_GPIO_Init+0x5a>
 800149a:	2b02      	cmp	r3, #2
 800149c:	d02b      	beq.n	80014f6 <HAL_GPIO_Init+0x9a>
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d804      	bhi.n	80014ac <HAL_GPIO_Init+0x50>
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d031      	beq.n	800150a <HAL_GPIO_Init+0xae>
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d01c      	beq.n	80014e4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014aa:	e048      	b.n	800153e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d043      	beq.n	8001538 <HAL_GPIO_Init+0xdc>
 80014b0:	2b11      	cmp	r3, #17
 80014b2:	d01b      	beq.n	80014ec <HAL_GPIO_Init+0x90>
          break;
 80014b4:	e043      	b.n	800153e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014b6:	4a89      	ldr	r2, [pc, #548]	; (80016dc <HAL_GPIO_Init+0x280>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d026      	beq.n	800150a <HAL_GPIO_Init+0xae>
 80014bc:	4a87      	ldr	r2, [pc, #540]	; (80016dc <HAL_GPIO_Init+0x280>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d806      	bhi.n	80014d0 <HAL_GPIO_Init+0x74>
 80014c2:	4a87      	ldr	r2, [pc, #540]	; (80016e0 <HAL_GPIO_Init+0x284>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d020      	beq.n	800150a <HAL_GPIO_Init+0xae>
 80014c8:	4a86      	ldr	r2, [pc, #536]	; (80016e4 <HAL_GPIO_Init+0x288>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d01d      	beq.n	800150a <HAL_GPIO_Init+0xae>
          break;
 80014ce:	e036      	b.n	800153e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014d0:	4a85      	ldr	r2, [pc, #532]	; (80016e8 <HAL_GPIO_Init+0x28c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d019      	beq.n	800150a <HAL_GPIO_Init+0xae>
 80014d6:	4a85      	ldr	r2, [pc, #532]	; (80016ec <HAL_GPIO_Init+0x290>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d016      	beq.n	800150a <HAL_GPIO_Init+0xae>
 80014dc:	4a84      	ldr	r2, [pc, #528]	; (80016f0 <HAL_GPIO_Init+0x294>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d013      	beq.n	800150a <HAL_GPIO_Init+0xae>
          break;
 80014e2:	e02c      	b.n	800153e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	623b      	str	r3, [r7, #32]
          break;
 80014ea:	e028      	b.n	800153e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	3304      	adds	r3, #4
 80014f2:	623b      	str	r3, [r7, #32]
          break;
 80014f4:	e023      	b.n	800153e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	3308      	adds	r3, #8
 80014fc:	623b      	str	r3, [r7, #32]
          break;
 80014fe:	e01e      	b.n	800153e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	330c      	adds	r3, #12
 8001506:	623b      	str	r3, [r7, #32]
          break;
 8001508:	e019      	b.n	800153e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d102      	bne.n	8001518 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001512:	2304      	movs	r3, #4
 8001514:	623b      	str	r3, [r7, #32]
          break;
 8001516:	e012      	b.n	800153e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d105      	bne.n	800152c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001520:	2308      	movs	r3, #8
 8001522:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69fa      	ldr	r2, [r7, #28]
 8001528:	611a      	str	r2, [r3, #16]
          break;
 800152a:	e008      	b.n	800153e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800152c:	2308      	movs	r3, #8
 800152e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69fa      	ldr	r2, [r7, #28]
 8001534:	615a      	str	r2, [r3, #20]
          break;
 8001536:	e002      	b.n	800153e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
          break;
 800153c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	2bff      	cmp	r3, #255	; 0xff
 8001542:	d801      	bhi.n	8001548 <HAL_GPIO_Init+0xec>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	e001      	b.n	800154c <HAL_GPIO_Init+0xf0>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3304      	adds	r3, #4
 800154c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	2bff      	cmp	r3, #255	; 0xff
 8001552:	d802      	bhi.n	800155a <HAL_GPIO_Init+0xfe>
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	e002      	b.n	8001560 <HAL_GPIO_Init+0x104>
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	3b08      	subs	r3, #8
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	210f      	movs	r1, #15
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	fa01 f303 	lsl.w	r3, r1, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	401a      	ands	r2, r3
 8001572:	6a39      	ldr	r1, [r7, #32]
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	fa01 f303 	lsl.w	r3, r1, r3
 800157a:	431a      	orrs	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 8096 	beq.w	80016ba <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800158e:	4b59      	ldr	r3, [pc, #356]	; (80016f4 <HAL_GPIO_Init+0x298>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	4a58      	ldr	r2, [pc, #352]	; (80016f4 <HAL_GPIO_Init+0x298>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6193      	str	r3, [r2, #24]
 800159a:	4b56      	ldr	r3, [pc, #344]	; (80016f4 <HAL_GPIO_Init+0x298>)
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015a6:	4a54      	ldr	r2, [pc, #336]	; (80016f8 <HAL_GPIO_Init+0x29c>)
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	089b      	lsrs	r3, r3, #2
 80015ac:	3302      	adds	r3, #2
 80015ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	220f      	movs	r2, #15
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	4013      	ands	r3, r2
 80015c8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4b      	ldr	r2, [pc, #300]	; (80016fc <HAL_GPIO_Init+0x2a0>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d013      	beq.n	80015fa <HAL_GPIO_Init+0x19e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4a      	ldr	r2, [pc, #296]	; (8001700 <HAL_GPIO_Init+0x2a4>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d00d      	beq.n	80015f6 <HAL_GPIO_Init+0x19a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a49      	ldr	r2, [pc, #292]	; (8001704 <HAL_GPIO_Init+0x2a8>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d007      	beq.n	80015f2 <HAL_GPIO_Init+0x196>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a48      	ldr	r2, [pc, #288]	; (8001708 <HAL_GPIO_Init+0x2ac>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d101      	bne.n	80015ee <HAL_GPIO_Init+0x192>
 80015ea:	2303      	movs	r3, #3
 80015ec:	e006      	b.n	80015fc <HAL_GPIO_Init+0x1a0>
 80015ee:	2304      	movs	r3, #4
 80015f0:	e004      	b.n	80015fc <HAL_GPIO_Init+0x1a0>
 80015f2:	2302      	movs	r3, #2
 80015f4:	e002      	b.n	80015fc <HAL_GPIO_Init+0x1a0>
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <HAL_GPIO_Init+0x1a0>
 80015fa:	2300      	movs	r3, #0
 80015fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015fe:	f002 0203 	and.w	r2, r2, #3
 8001602:	0092      	lsls	r2, r2, #2
 8001604:	4093      	lsls	r3, r2
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	4313      	orrs	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800160c:	493a      	ldr	r1, [pc, #232]	; (80016f8 <HAL_GPIO_Init+0x29c>)
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	089b      	lsrs	r3, r3, #2
 8001612:	3302      	adds	r3, #2
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d006      	beq.n	8001634 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001626:	4b39      	ldr	r3, [pc, #228]	; (800170c <HAL_GPIO_Init+0x2b0>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	4938      	ldr	r1, [pc, #224]	; (800170c <HAL_GPIO_Init+0x2b0>)
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
 8001632:	e006      	b.n	8001642 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001634:	4b35      	ldr	r3, [pc, #212]	; (800170c <HAL_GPIO_Init+0x2b0>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	43db      	mvns	r3, r3
 800163c:	4933      	ldr	r1, [pc, #204]	; (800170c <HAL_GPIO_Init+0x2b0>)
 800163e:	4013      	ands	r3, r2
 8001640:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d006      	beq.n	800165c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800164e:	4b2f      	ldr	r3, [pc, #188]	; (800170c <HAL_GPIO_Init+0x2b0>)
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	492e      	ldr	r1, [pc, #184]	; (800170c <HAL_GPIO_Init+0x2b0>)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	4313      	orrs	r3, r2
 8001658:	604b      	str	r3, [r1, #4]
 800165a:	e006      	b.n	800166a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800165c:	4b2b      	ldr	r3, [pc, #172]	; (800170c <HAL_GPIO_Init+0x2b0>)
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	43db      	mvns	r3, r3
 8001664:	4929      	ldr	r1, [pc, #164]	; (800170c <HAL_GPIO_Init+0x2b0>)
 8001666:	4013      	ands	r3, r2
 8001668:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d006      	beq.n	8001684 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001676:	4b25      	ldr	r3, [pc, #148]	; (800170c <HAL_GPIO_Init+0x2b0>)
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	4924      	ldr	r1, [pc, #144]	; (800170c <HAL_GPIO_Init+0x2b0>)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	608b      	str	r3, [r1, #8]
 8001682:	e006      	b.n	8001692 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001684:	4b21      	ldr	r3, [pc, #132]	; (800170c <HAL_GPIO_Init+0x2b0>)
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	43db      	mvns	r3, r3
 800168c:	491f      	ldr	r1, [pc, #124]	; (800170c <HAL_GPIO_Init+0x2b0>)
 800168e:	4013      	ands	r3, r2
 8001690:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d006      	beq.n	80016ac <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800169e:	4b1b      	ldr	r3, [pc, #108]	; (800170c <HAL_GPIO_Init+0x2b0>)
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	491a      	ldr	r1, [pc, #104]	; (800170c <HAL_GPIO_Init+0x2b0>)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	60cb      	str	r3, [r1, #12]
 80016aa:	e006      	b.n	80016ba <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016ac:	4b17      	ldr	r3, [pc, #92]	; (800170c <HAL_GPIO_Init+0x2b0>)
 80016ae:	68da      	ldr	r2, [r3, #12]
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	4915      	ldr	r1, [pc, #84]	; (800170c <HAL_GPIO_Init+0x2b0>)
 80016b6:	4013      	ands	r3, r2
 80016b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	3301      	adds	r3, #1
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f47f aed0 	bne.w	8001470 <HAL_GPIO_Init+0x14>
  }
}
 80016d0:	bf00      	nop
 80016d2:	372c      	adds	r7, #44	; 0x2c
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	10210000 	.word	0x10210000
 80016e0:	10110000 	.word	0x10110000
 80016e4:	10120000 	.word	0x10120000
 80016e8:	10310000 	.word	0x10310000
 80016ec:	10320000 	.word	0x10320000
 80016f0:	10220000 	.word	0x10220000
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40010000 	.word	0x40010000
 80016fc:	40010800 	.word	0x40010800
 8001700:	40010c00 	.word	0x40010c00
 8001704:	40011000 	.word	0x40011000
 8001708:	40011400 	.word	0x40011400
 800170c:	40010400 	.word	0x40010400

08001710 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	887b      	ldrh	r3, [r7, #2]
 8001722:	4013      	ands	r3, r2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d002      	beq.n	800172e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001728:	2301      	movs	r3, #1
 800172a:	73fb      	strb	r3, [r7, #15]
 800172c:	e001      	b.n	8001732 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001732:	7bfb      	ldrb	r3, [r7, #15]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr

0800173e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	460b      	mov	r3, r1
 8001748:	807b      	strh	r3, [r7, #2]
 800174a:	4613      	mov	r3, r2
 800174c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800174e:	787b      	ldrb	r3, [r7, #1]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001754:	887a      	ldrh	r2, [r7, #2]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800175a:	e003      	b.n	8001764 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800175c:	887b      	ldrh	r3, [r7, #2]
 800175e:	041a      	lsls	r2, r3, #16
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	611a      	str	r2, [r3, #16]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	460b      	mov	r3, r1
 8001778:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68da      	ldr	r2, [r3, #12]
 800177e:	887b      	ldrh	r3, [r7, #2]
 8001780:	4013      	ands	r3, r2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001786:	887a      	ldrh	r2, [r7, #2]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800178c:	e002      	b.n	8001794 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800178e:	887a      	ldrh	r2, [r7, #2]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	611a      	str	r2, [r3, #16]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
	...

080017a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e26c      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 8087 	beq.w	80018ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017c0:	4b92      	ldr	r3, [pc, #584]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 030c 	and.w	r3, r3, #12
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d00c      	beq.n	80017e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017cc:	4b8f      	ldr	r3, [pc, #572]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 030c 	and.w	r3, r3, #12
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d112      	bne.n	80017fe <HAL_RCC_OscConfig+0x5e>
 80017d8:	4b8c      	ldr	r3, [pc, #560]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e4:	d10b      	bne.n	80017fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e6:	4b89      	ldr	r3, [pc, #548]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d06c      	beq.n	80018cc <HAL_RCC_OscConfig+0x12c>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d168      	bne.n	80018cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e246      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001806:	d106      	bne.n	8001816 <HAL_RCC_OscConfig+0x76>
 8001808:	4b80      	ldr	r3, [pc, #512]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a7f      	ldr	r2, [pc, #508]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800180e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	e02e      	b.n	8001874 <HAL_RCC_OscConfig+0xd4>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10c      	bne.n	8001838 <HAL_RCC_OscConfig+0x98>
 800181e:	4b7b      	ldr	r3, [pc, #492]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a7a      	ldr	r2, [pc, #488]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	4b78      	ldr	r3, [pc, #480]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a77      	ldr	r2, [pc, #476]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001830:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	e01d      	b.n	8001874 <HAL_RCC_OscConfig+0xd4>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001840:	d10c      	bne.n	800185c <HAL_RCC_OscConfig+0xbc>
 8001842:	4b72      	ldr	r3, [pc, #456]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a71      	ldr	r2, [pc, #452]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	4b6f      	ldr	r3, [pc, #444]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a6e      	ldr	r2, [pc, #440]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	e00b      	b.n	8001874 <HAL_RCC_OscConfig+0xd4>
 800185c:	4b6b      	ldr	r3, [pc, #428]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a6a      	ldr	r2, [pc, #424]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b68      	ldr	r3, [pc, #416]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a67      	ldr	r2, [pc, #412]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800186e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001872:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d013      	beq.n	80018a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7ff fade 	bl	8000e3c <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001884:	f7ff fada 	bl	8000e3c <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b64      	cmp	r3, #100	; 0x64
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e1fa      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001896:	4b5d      	ldr	r3, [pc, #372]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0xe4>
 80018a2:	e014      	b.n	80018ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7ff faca 	bl	8000e3c <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018ac:	f7ff fac6 	bl	8000e3c <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b64      	cmp	r3, #100	; 0x64
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e1e6      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018be:	4b53      	ldr	r3, [pc, #332]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x10c>
 80018ca:	e000      	b.n	80018ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d063      	beq.n	80019a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018da:	4b4c      	ldr	r3, [pc, #304]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 030c 	and.w	r3, r3, #12
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00b      	beq.n	80018fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018e6:	4b49      	ldr	r3, [pc, #292]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 030c 	and.w	r3, r3, #12
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d11c      	bne.n	800192c <HAL_RCC_OscConfig+0x18c>
 80018f2:	4b46      	ldr	r3, [pc, #280]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d116      	bne.n	800192c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fe:	4b43      	ldr	r3, [pc, #268]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d005      	beq.n	8001916 <HAL_RCC_OscConfig+0x176>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d001      	beq.n	8001916 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e1ba      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001916:	4b3d      	ldr	r3, [pc, #244]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	4939      	ldr	r1, [pc, #228]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192a:	e03a      	b.n	80019a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d020      	beq.n	8001976 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001934:	4b36      	ldr	r3, [pc, #216]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001936:	2201      	movs	r2, #1
 8001938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193a:	f7ff fa7f 	bl	8000e3c <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001942:	f7ff fa7b 	bl	8000e3c <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e19b      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001954:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001960:	4b2a      	ldr	r3, [pc, #168]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	4927      	ldr	r1, [pc, #156]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001970:	4313      	orrs	r3, r2
 8001972:	600b      	str	r3, [r1, #0]
 8001974:	e015      	b.n	80019a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001976:	4b26      	ldr	r3, [pc, #152]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7ff fa5e 	bl	8000e3c <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001984:	f7ff fa5a 	bl	8000e3c <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e17a      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001996:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d03a      	beq.n	8001a24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d019      	beq.n	80019ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b6:	4b17      	ldr	r3, [pc, #92]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019bc:	f7ff fa3e 	bl	8000e3c <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c4:	f7ff fa3a 	bl	8000e3c <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e15a      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d6:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019e2:	2001      	movs	r0, #1
 80019e4:	f000 fada 	bl	8001f9c <RCC_Delay>
 80019e8:	e01c      	b.n	8001a24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ea:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f0:	f7ff fa24 	bl	8000e3c <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f6:	e00f      	b.n	8001a18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f8:	f7ff fa20 	bl	8000e3c <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d908      	bls.n	8001a18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e140      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	42420000 	.word	0x42420000
 8001a14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a18:	4b9e      	ldr	r3, [pc, #632]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1e9      	bne.n	80019f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80a6 	beq.w	8001b7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a32:	2300      	movs	r3, #0
 8001a34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a36:	4b97      	ldr	r3, [pc, #604]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10d      	bne.n	8001a5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	4b94      	ldr	r3, [pc, #592]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	4a93      	ldr	r2, [pc, #588]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4c:	61d3      	str	r3, [r2, #28]
 8001a4e:	4b91      	ldr	r3, [pc, #580]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5e:	4b8e      	ldr	r3, [pc, #568]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d118      	bne.n	8001a9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a6a:	4b8b      	ldr	r3, [pc, #556]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a8a      	ldr	r2, [pc, #552]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a76:	f7ff f9e1 	bl	8000e3c <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7e:	f7ff f9dd 	bl	8000e3c <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b64      	cmp	r3, #100	; 0x64
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e0fd      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a90:	4b81      	ldr	r3, [pc, #516]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d106      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x312>
 8001aa4:	4b7b      	ldr	r3, [pc, #492]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	4a7a      	ldr	r2, [pc, #488]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6213      	str	r3, [r2, #32]
 8001ab0:	e02d      	b.n	8001b0e <HAL_RCC_OscConfig+0x36e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x334>
 8001aba:	4b76      	ldr	r3, [pc, #472]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	4a75      	ldr	r2, [pc, #468]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	6213      	str	r3, [r2, #32]
 8001ac6:	4b73      	ldr	r3, [pc, #460]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	4a72      	ldr	r2, [pc, #456]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001acc:	f023 0304 	bic.w	r3, r3, #4
 8001ad0:	6213      	str	r3, [r2, #32]
 8001ad2:	e01c      	b.n	8001b0e <HAL_RCC_OscConfig+0x36e>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	2b05      	cmp	r3, #5
 8001ada:	d10c      	bne.n	8001af6 <HAL_RCC_OscConfig+0x356>
 8001adc:	4b6d      	ldr	r3, [pc, #436]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	4a6c      	ldr	r2, [pc, #432]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001ae2:	f043 0304 	orr.w	r3, r3, #4
 8001ae6:	6213      	str	r3, [r2, #32]
 8001ae8:	4b6a      	ldr	r3, [pc, #424]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	4a69      	ldr	r2, [pc, #420]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6213      	str	r3, [r2, #32]
 8001af4:	e00b      	b.n	8001b0e <HAL_RCC_OscConfig+0x36e>
 8001af6:	4b67      	ldr	r3, [pc, #412]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	4a66      	ldr	r2, [pc, #408]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001afc:	f023 0301 	bic.w	r3, r3, #1
 8001b00:	6213      	str	r3, [r2, #32]
 8001b02:	4b64      	ldr	r3, [pc, #400]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	4a63      	ldr	r2, [pc, #396]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001b08:	f023 0304 	bic.w	r3, r3, #4
 8001b0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d015      	beq.n	8001b42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b16:	f7ff f991 	bl	8000e3c <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b1c:	e00a      	b.n	8001b34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1e:	f7ff f98d 	bl	8000e3c <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e0ab      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b34:	4b57      	ldr	r3, [pc, #348]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0ee      	beq.n	8001b1e <HAL_RCC_OscConfig+0x37e>
 8001b40:	e014      	b.n	8001b6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b42:	f7ff f97b 	bl	8000e3c <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b48:	e00a      	b.n	8001b60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b4a:	f7ff f977 	bl	8000e3c <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e095      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b60:	4b4c      	ldr	r3, [pc, #304]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1ee      	bne.n	8001b4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b6c:	7dfb      	ldrb	r3, [r7, #23]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d105      	bne.n	8001b7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b72:	4b48      	ldr	r3, [pc, #288]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	4a47      	ldr	r2, [pc, #284]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 8081 	beq.w	8001c8a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b88:	4b42      	ldr	r3, [pc, #264]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d061      	beq.n	8001c58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d146      	bne.n	8001c2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9c:	4b3f      	ldr	r3, [pc, #252]	; (8001c9c <HAL_RCC_OscConfig+0x4fc>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba2:	f7ff f94b 	bl	8000e3c <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001baa:	f7ff f947 	bl	8000e3c <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e067      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bbc:	4b35      	ldr	r3, [pc, #212]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f0      	bne.n	8001baa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd0:	d108      	bne.n	8001be4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bd2:	4b30      	ldr	r3, [pc, #192]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	492d      	ldr	r1, [pc, #180]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be4:	4b2b      	ldr	r3, [pc, #172]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a19      	ldr	r1, [r3, #32]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	4927      	ldr	r1, [pc, #156]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bfc:	4b27      	ldr	r3, [pc, #156]	; (8001c9c <HAL_RCC_OscConfig+0x4fc>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c02:	f7ff f91b 	bl	8000e3c <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0a:	f7ff f917 	bl	8000e3c <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e037      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c1c:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x46a>
 8001c28:	e02f      	b.n	8001c8a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2a:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <HAL_RCC_OscConfig+0x4fc>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7ff f904 	bl	8000e3c <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c38:	f7ff f900 	bl	8000e3c <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e020      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4a:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x498>
 8001c56:	e018      	b.n	8001c8a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e013      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_RCC_OscConfig+0x4f4>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d106      	bne.n	8001c86 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d001      	beq.n	8001c8a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40007000 	.word	0x40007000
 8001c9c:	42420060 	.word	0x42420060

08001ca0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0d0      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b6a      	ldr	r3, [pc, #424]	; (8001e60 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d910      	bls.n	8001ce4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b67      	ldr	r3, [pc, #412]	; (8001e60 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 0207 	bic.w	r2, r3, #7
 8001cca:	4965      	ldr	r1, [pc, #404]	; (8001e60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd2:	4b63      	ldr	r3, [pc, #396]	; (8001e60 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0b8      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d020      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cfc:	4b59      	ldr	r3, [pc, #356]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	4a58      	ldr	r2, [pc, #352]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d005      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d14:	4b53      	ldr	r3, [pc, #332]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	4a52      	ldr	r2, [pc, #328]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d20:	4b50      	ldr	r3, [pc, #320]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	494d      	ldr	r1, [pc, #308]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d040      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d107      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d46:	4b47      	ldr	r3, [pc, #284]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d115      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e07f      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d107      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d5e:	4b41      	ldr	r3, [pc, #260]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d109      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e073      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6e:	4b3d      	ldr	r3, [pc, #244]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e06b      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d7e:	4b39      	ldr	r3, [pc, #228]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f023 0203 	bic.w	r2, r3, #3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	4936      	ldr	r1, [pc, #216]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d90:	f7ff f854 	bl	8000e3c <HAL_GetTick>
 8001d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d96:	e00a      	b.n	8001dae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d98:	f7ff f850 	bl	8000e3c <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e053      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dae:	4b2d      	ldr	r3, [pc, #180]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 020c 	and.w	r2, r3, #12
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d1eb      	bne.n	8001d98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc0:	4b27      	ldr	r3, [pc, #156]	; (8001e60 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d210      	bcs.n	8001df0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dce:	4b24      	ldr	r3, [pc, #144]	; (8001e60 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f023 0207 	bic.w	r2, r3, #7
 8001dd6:	4922      	ldr	r1, [pc, #136]	; (8001e60 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dde:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <HAL_RCC_ClockConfig+0x1c0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d001      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e032      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d008      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	4916      	ldr	r1, [pc, #88]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d009      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e1a:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	490e      	ldr	r1, [pc, #56]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e2e:	f000 f821 	bl	8001e74 <HAL_RCC_GetSysClockFreq>
 8001e32:	4601      	mov	r1, r0
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	091b      	lsrs	r3, r3, #4
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	4a0a      	ldr	r2, [pc, #40]	; (8001e68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e40:	5cd3      	ldrb	r3, [r2, r3]
 8001e42:	fa21 f303 	lsr.w	r3, r1, r3
 8001e46:	4a09      	ldr	r2, [pc, #36]	; (8001e6c <HAL_RCC_ClockConfig+0x1cc>)
 8001e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e4a:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <HAL_RCC_ClockConfig+0x1d0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe ffb2 	bl	8000db8 <HAL_InitTick>

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40022000 	.word	0x40022000
 8001e64:	40021000 	.word	0x40021000
 8001e68:	08003a34 	.word	0x08003a34
 8001e6c:	20000004 	.word	0x20000004
 8001e70:	20000008 	.word	0x20000008

08001e74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e74:	b490      	push	{r4, r7}
 8001e76:	b08a      	sub	sp, #40	; 0x28
 8001e78:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e7a:	4b2a      	ldr	r3, [pc, #168]	; (8001f24 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e7c:	1d3c      	adds	r4, r7, #4
 8001e7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e84:	4b28      	ldr	r3, [pc, #160]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
 8001e92:	2300      	movs	r3, #0
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e9e:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d002      	beq.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x40>
 8001eae:	2b08      	cmp	r3, #8
 8001eb0:	d003      	beq.n	8001eba <HAL_RCC_GetSysClockFreq+0x46>
 8001eb2:	e02d      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001eb6:	623b      	str	r3, [r7, #32]
      break;
 8001eb8:	e02d      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	0c9b      	lsrs	r3, r3, #18
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ecc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d013      	beq.n	8001f00 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ed8:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	0c5b      	lsrs	r3, r3, #17
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001eec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	4a0f      	ldr	r2, [pc, #60]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ef2:	fb02 f203 	mul.w	r2, r2, r3
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
 8001efe:	e004      	b.n	8001f0a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	4a0c      	ldr	r2, [pc, #48]	; (8001f34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f04:	fb02 f303 	mul.w	r3, r2, r3
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	623b      	str	r3, [r7, #32]
      break;
 8001f0e:	e002      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f10:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f12:	623b      	str	r3, [r7, #32]
      break;
 8001f14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f16:	6a3b      	ldr	r3, [r7, #32]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3728      	adds	r7, #40	; 0x28
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc90      	pop	{r4, r7}
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	08003a20 	.word	0x08003a20
 8001f28:	08003a30 	.word	0x08003a30
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	007a1200 	.word	0x007a1200
 8001f34:	003d0900 	.word	0x003d0900

08001f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f3c:	4b02      	ldr	r3, [pc, #8]	; (8001f48 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr
 8001f48:	20000004 	.word	0x20000004

08001f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f50:	f7ff fff2 	bl	8001f38 <HAL_RCC_GetHCLKFreq>
 8001f54:	4601      	mov	r1, r0
 8001f56:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	0a1b      	lsrs	r3, r3, #8
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	4a03      	ldr	r2, [pc, #12]	; (8001f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f62:	5cd3      	ldrb	r3, [r2, r3]
 8001f64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	08003a44 	.word	0x08003a44

08001f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f78:	f7ff ffde 	bl	8001f38 <HAL_RCC_GetHCLKFreq>
 8001f7c:	4601      	mov	r1, r0
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	0adb      	lsrs	r3, r3, #11
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	4a03      	ldr	r2, [pc, #12]	; (8001f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f8a:	5cd3      	ldrb	r3, [r2, r3]
 8001f8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40021000 	.word	0x40021000
 8001f98:	08003a44 	.word	0x08003a44

08001f9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <RCC_Delay+0x34>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <RCC_Delay+0x38>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	0a5b      	lsrs	r3, r3, #9
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	fb02 f303 	mul.w	r3, r2, r3
 8001fb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fb8:	bf00      	nop
  }
  while (Delay --);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	1e5a      	subs	r2, r3, #1
 8001fbe:	60fa      	str	r2, [r7, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f9      	bne.n	8001fb8 <RCC_Delay+0x1c>
}
 8001fc4:	bf00      	nop
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	20000004 	.word	0x20000004
 8001fd4:	10624dd3 	.word	0x10624dd3

08001fd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e053      	b.n	8002092 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d106      	bne.n	800200a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7fe fd35 	bl	8000a74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2202      	movs	r2, #2
 800200e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002020:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	431a      	orrs	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	431a      	orrs	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	ea42 0103 	orr.w	r1, r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	0c1a      	lsrs	r2, r3, #16
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f002 0204 	and.w	r2, r2, #4
 8002070:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	69da      	ldr	r2, [r3, #28]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002080:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b088      	sub	sp, #32
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	603b      	str	r3, [r7, #0]
 80020a6:	4613      	mov	r3, r2
 80020a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_SPI_Transmit+0x22>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e11e      	b.n	80022fa <HAL_SPI_Transmit+0x260>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020c4:	f7fe feba 	bl	8000e3c <HAL_GetTick>
 80020c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d002      	beq.n	80020e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80020da:	2302      	movs	r3, #2
 80020dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020de:	e103      	b.n	80022e8 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d002      	beq.n	80020ec <HAL_SPI_Transmit+0x52>
 80020e6:	88fb      	ldrh	r3, [r7, #6]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d102      	bne.n	80020f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020f0:	e0fa      	b.n	80022e8 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2203      	movs	r2, #3
 80020f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	88fa      	ldrh	r2, [r7, #6]
 800210a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	88fa      	ldrh	r2, [r7, #6]
 8002110:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002138:	d107      	bne.n	800214a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002148:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002154:	2b40      	cmp	r3, #64	; 0x40
 8002156:	d007      	beq.n	8002168 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002166:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002170:	d14b      	bne.n	800220a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <HAL_SPI_Transmit+0xe6>
 800217a:	8afb      	ldrh	r3, [r7, #22]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d13e      	bne.n	80021fe <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002184:	881a      	ldrh	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	1c9a      	adds	r2, r3, #2
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800219a:	b29b      	uxth	r3, r3
 800219c:	3b01      	subs	r3, #1
 800219e:	b29a      	uxth	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80021a4:	e02b      	b.n	80021fe <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d112      	bne.n	80021da <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b8:	881a      	ldrh	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	1c9a      	adds	r2, r3, #2
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80021d8:	e011      	b.n	80021fe <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021da:	f7fe fe2f 	bl	8000e3c <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d803      	bhi.n	80021f2 <HAL_SPI_Transmit+0x158>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f0:	d102      	bne.n	80021f8 <HAL_SPI_Transmit+0x15e>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d102      	bne.n	80021fe <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80021fc:	e074      	b.n	80022e8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002202:	b29b      	uxth	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1ce      	bne.n	80021a6 <HAL_SPI_Transmit+0x10c>
 8002208:	e04c      	b.n	80022a4 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d002      	beq.n	8002218 <HAL_SPI_Transmit+0x17e>
 8002212:	8afb      	ldrh	r3, [r7, #22]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d140      	bne.n	800229a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	330c      	adds	r3, #12
 8002222:	7812      	ldrb	r2, [r2, #0]
 8002224:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002234:	b29b      	uxth	r3, r3
 8002236:	3b01      	subs	r3, #1
 8002238:	b29a      	uxth	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800223e:	e02c      	b.n	800229a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b02      	cmp	r3, #2
 800224c:	d113      	bne.n	8002276 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	330c      	adds	r3, #12
 8002258:	7812      	ldrb	r2, [r2, #0]
 800225a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800226a:	b29b      	uxth	r3, r3
 800226c:	3b01      	subs	r3, #1
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	86da      	strh	r2, [r3, #54]	; 0x36
 8002274:	e011      	b.n	800229a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002276:	f7fe fde1 	bl	8000e3c <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d803      	bhi.n	800228e <HAL_SPI_Transmit+0x1f4>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228c:	d102      	bne.n	8002294 <HAL_SPI_Transmit+0x1fa>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d102      	bne.n	800229a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002298:	e026      	b.n	80022e8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800229e:	b29b      	uxth	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1cd      	bne.n	8002240 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	6839      	ldr	r1, [r7, #0]
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 fa36 	bl	800271a <SPI_EndRxTxTransaction>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2220      	movs	r2, #32
 80022b8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10a      	bne.n	80022d8 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	77fb      	strb	r3, [r7, #31]
 80022e4:	e000      	b.n	80022e8 <HAL_SPI_Transmit+0x24e>
  }

error:
 80022e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3720      	adds	r7, #32
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b08c      	sub	sp, #48	; 0x30
 8002306:	af00      	add	r7, sp, #0
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002310:	2301      	movs	r3, #1
 8002312:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <HAL_SPI_TransmitReceive+0x26>
 8002324:	2302      	movs	r3, #2
 8002326:	e18a      	b.n	800263e <HAL_SPI_TransmitReceive+0x33c>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002330:	f7fe fd84 	bl	8000e3c <HAL_GetTick>
 8002334:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800233c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002346:	887b      	ldrh	r3, [r7, #2]
 8002348:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800234a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800234e:	2b01      	cmp	r3, #1
 8002350:	d00f      	beq.n	8002372 <HAL_SPI_TransmitReceive+0x70>
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002358:	d107      	bne.n	800236a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d103      	bne.n	800236a <HAL_SPI_TransmitReceive+0x68>
 8002362:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002366:	2b04      	cmp	r3, #4
 8002368:	d003      	beq.n	8002372 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800236a:	2302      	movs	r3, #2
 800236c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002370:	e15b      	b.n	800262a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_SPI_TransmitReceive+0x82>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <HAL_SPI_TransmitReceive+0x82>
 800237e:	887b      	ldrh	r3, [r7, #2]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d103      	bne.n	800238c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800238a:	e14e      	b.n	800262a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b04      	cmp	r3, #4
 8002396:	d003      	beq.n	80023a0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2205      	movs	r2, #5
 800239c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	887a      	ldrh	r2, [r7, #2]
 80023b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	887a      	ldrh	r2, [r7, #2]
 80023b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	887a      	ldrh	r2, [r7, #2]
 80023c2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	887a      	ldrh	r2, [r7, #2]
 80023c8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e0:	2b40      	cmp	r3, #64	; 0x40
 80023e2:	d007      	beq.n	80023f4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023fc:	d178      	bne.n	80024f0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <HAL_SPI_TransmitReceive+0x10a>
 8002406:	8b7b      	ldrh	r3, [r7, #26]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d166      	bne.n	80024da <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002410:	881a      	ldrh	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	1c9a      	adds	r2, r3, #2
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002426:	b29b      	uxth	r3, r3
 8002428:	3b01      	subs	r3, #1
 800242a:	b29a      	uxth	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002430:	e053      	b.n	80024da <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b02      	cmp	r3, #2
 800243e:	d11b      	bne.n	8002478 <HAL_SPI_TransmitReceive+0x176>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002444:	b29b      	uxth	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d016      	beq.n	8002478 <HAL_SPI_TransmitReceive+0x176>
 800244a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244c:	2b01      	cmp	r3, #1
 800244e:	d113      	bne.n	8002478 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	881a      	ldrh	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	1c9a      	adds	r2, r3, #2
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800246a:	b29b      	uxth	r3, r3
 800246c:	3b01      	subs	r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b01      	cmp	r3, #1
 8002484:	d119      	bne.n	80024ba <HAL_SPI_TransmitReceive+0x1b8>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800248a:	b29b      	uxth	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d014      	beq.n	80024ba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249a:	b292      	uxth	r2, r2
 800249c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a2:	1c9a      	adds	r2, r3, #2
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024b6:	2301      	movs	r3, #1
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80024ba:	f7fe fcbf 	bl	8000e3c <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d807      	bhi.n	80024da <HAL_SPI_TransmitReceive+0x1d8>
 80024ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d0:	d003      	beq.n	80024da <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80024d8:	e0a7      	b.n	800262a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024de:	b29b      	uxth	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1a6      	bne.n	8002432 <HAL_SPI_TransmitReceive+0x130>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1a1      	bne.n	8002432 <HAL_SPI_TransmitReceive+0x130>
 80024ee:	e07c      	b.n	80025ea <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d002      	beq.n	80024fe <HAL_SPI_TransmitReceive+0x1fc>
 80024f8:	8b7b      	ldrh	r3, [r7, #26]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d16b      	bne.n	80025d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	330c      	adds	r3, #12
 8002508:	7812      	ldrb	r2, [r2, #0]
 800250a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	1c5a      	adds	r2, r3, #1
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800251a:	b29b      	uxth	r3, r3
 800251c:	3b01      	subs	r3, #1
 800251e:	b29a      	uxth	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002524:	e057      	b.n	80025d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b02      	cmp	r3, #2
 8002532:	d11c      	bne.n	800256e <HAL_SPI_TransmitReceive+0x26c>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002538:	b29b      	uxth	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d017      	beq.n	800256e <HAL_SPI_TransmitReceive+0x26c>
 800253e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002540:	2b01      	cmp	r3, #1
 8002542:	d114      	bne.n	800256e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	330c      	adds	r3, #12
 800254e:	7812      	ldrb	r2, [r2, #0]
 8002550:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002560:	b29b      	uxth	r3, r3
 8002562:	3b01      	subs	r3, #1
 8002564:	b29a      	uxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b01      	cmp	r3, #1
 800257a:	d119      	bne.n	80025b0 <HAL_SPI_TransmitReceive+0x2ae>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002580:	b29b      	uxth	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d014      	beq.n	80025b0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68da      	ldr	r2, [r3, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025ac:	2301      	movs	r3, #1
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80025b0:	f7fe fc44 	bl	8000e3c <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025bc:	429a      	cmp	r2, r3
 80025be:	d803      	bhi.n	80025c8 <HAL_SPI_TransmitReceive+0x2c6>
 80025c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c6:	d102      	bne.n	80025ce <HAL_SPI_TransmitReceive+0x2cc>
 80025c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d103      	bne.n	80025d6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80025d4:	e029      	b.n	800262a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025da:	b29b      	uxth	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1a2      	bne.n	8002526 <HAL_SPI_TransmitReceive+0x224>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d19d      	bne.n	8002526 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f893 	bl	800271a <SPI_EndRxTxTransaction>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d006      	beq.n	8002608 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2220      	movs	r2, #32
 8002604:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002606:	e010      	b.n	800262a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10b      	bne.n	8002628 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	e000      	b.n	800262a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002628:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800263a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800263e:	4618      	mov	r0, r3
 8002640:	3730      	adds	r7, #48	; 0x30
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b084      	sub	sp, #16
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	603b      	str	r3, [r7, #0]
 8002652:	4613      	mov	r3, r2
 8002654:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002656:	e04c      	b.n	80026f2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265e:	d048      	beq.n	80026f2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002660:	f7fe fbec 	bl	8000e3c <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d902      	bls.n	8002676 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d13d      	bne.n	80026f2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002684:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800268e:	d111      	bne.n	80026b4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002698:	d004      	beq.n	80026a4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026a2:	d107      	bne.n	80026b4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026bc:	d10f      	bne.n	80026de <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e00f      	b.n	8002712 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	4013      	ands	r3, r2
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	429a      	cmp	r2, r3
 8002700:	bf0c      	ite	eq
 8002702:	2301      	moveq	r3, #1
 8002704:	2300      	movne	r3, #0
 8002706:	b2db      	uxtb	r3, r3
 8002708:	461a      	mov	r2, r3
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	429a      	cmp	r2, r3
 800270e:	d1a3      	bne.n	8002658 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b086      	sub	sp, #24
 800271e:	af02      	add	r7, sp, #8
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2200      	movs	r2, #0
 800272e:	2180      	movs	r1, #128	; 0x80
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f7ff ff88 	bl	8002646 <SPI_WaitFlagStateUntilTimeout>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d007      	beq.n	800274c <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002740:	f043 0220 	orr.w	r2, r3, #32
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e000      	b.n	800274e <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e03f      	b.n	80027e8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d106      	bne.n	8002782 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7fe f9c3 	bl	8000b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2224      	movs	r2, #36	; 0x24
 8002786:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002798:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 fbe8 	bl	8002f70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691a      	ldr	r2, [r3, #16]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027ae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695a      	ldr	r2, [r3, #20]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027be:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027ce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2220      	movs	r2, #32
 80027e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	4613      	mov	r3, r2
 80027fe:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b20      	cmp	r3, #32
 800280e:	f040 8083 	bne.w	8002918 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <HAL_UART_Transmit+0x2e>
 8002818:	88fb      	ldrh	r3, [r7, #6]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e07b      	b.n	800291a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002828:	2b01      	cmp	r3, #1
 800282a:	d101      	bne.n	8002830 <HAL_UART_Transmit+0x40>
 800282c:	2302      	movs	r3, #2
 800282e:	e074      	b.n	800291a <HAL_UART_Transmit+0x12a>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2221      	movs	r2, #33	; 0x21
 8002842:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002846:	f7fe faf9 	bl	8000e3c <HAL_GetTick>
 800284a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	88fa      	ldrh	r2, [r7, #6]
 8002850:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	88fa      	ldrh	r2, [r7, #6]
 8002856:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002858:	e042      	b.n	80028e0 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800285e:	b29b      	uxth	r3, r3
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002870:	d122      	bne.n	80028b8 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2200      	movs	r2, #0
 800287a:	2180      	movs	r1, #128	; 0x80
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 fa0e 	bl	8002c9e <UART_WaitOnFlagUntilTimeout>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e046      	b.n	800291a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800289e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d103      	bne.n	80028b0 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	3302      	adds	r3, #2
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	e017      	b.n	80028e0 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	3301      	adds	r3, #1
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	e013      	b.n	80028e0 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	2200      	movs	r2, #0
 80028c0:	2180      	movs	r1, #128	; 0x80
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 f9eb 	bl	8002c9e <UART_WaitOnFlagUntilTimeout>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e023      	b.n	800291a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	60ba      	str	r2, [r7, #8]
 80028d8:	781a      	ldrb	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1b7      	bne.n	800285a <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2200      	movs	r2, #0
 80028f2:	2140      	movs	r1, #64	; 0x40
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 f9d2 	bl	8002c9e <UART_WaitOnFlagUntilTimeout>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e00a      	b.n	800291a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	e000      	b.n	800291a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002918:	2302      	movs	r3, #2
  }
}
 800291a:	4618      	mov	r0, r3
 800291c:	3718      	adds	r7, #24
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b088      	sub	sp, #32
 8002926:	af02      	add	r7, sp, #8
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	603b      	str	r3, [r7, #0]
 800292e:	4613      	mov	r3, r2
 8002930:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b20      	cmp	r3, #32
 8002940:	f040 8090 	bne.w	8002a64 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <HAL_UART_Receive+0x2e>
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e088      	b.n	8002a66 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_UART_Receive+0x40>
 800295e:	2302      	movs	r3, #2
 8002960:	e081      	b.n	8002a66 <HAL_UART_Receive+0x144>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2222      	movs	r2, #34	; 0x22
 8002974:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002978:	f7fe fa60 	bl	8000e3c <HAL_GetTick>
 800297c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	88fa      	ldrh	r2, [r7, #6]
 8002982:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	88fa      	ldrh	r2, [r7, #6]
 8002988:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800298a:	e05c      	b.n	8002a46 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002990:	b29b      	uxth	r3, r3
 8002992:	3b01      	subs	r3, #1
 8002994:	b29a      	uxth	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a2:	d12b      	bne.n	80029fc <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	2200      	movs	r2, #0
 80029ac:	2120      	movs	r1, #32
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f975 	bl	8002c9e <UART_WaitOnFlagUntilTimeout>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e053      	b.n	8002a66 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10c      	bne.n	80029e4 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	3302      	adds	r3, #2
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	e030      	b.n	8002a46 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	3301      	adds	r3, #1
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	e024      	b.n	8002a46 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2200      	movs	r2, #0
 8002a04:	2120      	movs	r1, #32
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 f949 	bl	8002c9e <UART_WaitOnFlagUntilTimeout>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e027      	b.n	8002a66 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d108      	bne.n	8002a30 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6859      	ldr	r1, [r3, #4]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	60ba      	str	r2, [r7, #8]
 8002a2a:	b2ca      	uxtb	r2, r1
 8002a2c:	701a      	strb	r2, [r3, #0]
 8002a2e:	e00a      	b.n	8002a46 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	1c59      	adds	r1, r3, #1
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d19d      	bne.n	800298c <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	e000      	b.n	8002a66 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8002a64:	2302      	movs	r3, #2
  }
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10d      	bne.n	8002ac2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	f003 0320 	and.w	r3, r3, #32
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x52>
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	f003 0320 	and.w	r3, r3, #32
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f9d7 	bl	8002e6e <UART_Receive_IT>
      return;
 8002ac0:	e0cc      	b.n	8002c5c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80ab 	beq.w	8002c20 <HAL_UART_IRQHandler+0x1b0>
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d105      	bne.n	8002ae0 <HAL_UART_IRQHandler+0x70>
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 80a0 	beq.w	8002c20 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00a      	beq.n	8002b00 <HAL_UART_IRQHandler+0x90>
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af8:	f043 0201 	orr.w	r2, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00a      	beq.n	8002b20 <HAL_UART_IRQHandler+0xb0>
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b18:	f043 0202 	orr.w	r2, r3, #2
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <HAL_UART_IRQHandler+0xd0>
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b38:	f043 0204 	orr.w	r2, r3, #4
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00a      	beq.n	8002b60 <HAL_UART_IRQHandler+0xf0>
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b58:	f043 0208 	orr.w	r2, r3, #8
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d078      	beq.n	8002c5a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d007      	beq.n	8002b82 <HAL_UART_IRQHandler+0x112>
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	f003 0320 	and.w	r3, r3, #32
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f976 	bl	8002e6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	bf14      	ite	ne
 8002b90:	2301      	movne	r3, #1
 8002b92:	2300      	moveq	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d102      	bne.n	8002baa <HAL_UART_IRQHandler+0x13a>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d031      	beq.n	8002c0e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f8c1 	bl	8002d32 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d023      	beq.n	8002c06 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695a      	ldr	r2, [r3, #20]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bcc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d013      	beq.n	8002bfe <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bda:	4a22      	ldr	r2, [pc, #136]	; (8002c64 <HAL_UART_IRQHandler+0x1f4>)
 8002bdc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe fabe 	bl	8001164 <HAL_DMA_Abort_IT>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d016      	beq.n	8002c1c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bfc:	e00e      	b.n	8002c1c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f844 	bl	8002c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c04:	e00a      	b.n	8002c1c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f840 	bl	8002c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c0c:	e006      	b.n	8002c1c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f83c 	bl	8002c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002c1a:	e01e      	b.n	8002c5a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c1c:	bf00      	nop
    return;
 8002c1e:	e01c      	b.n	8002c5a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d008      	beq.n	8002c3c <HAL_UART_IRQHandler+0x1cc>
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f8ad 	bl	8002d94 <UART_Transmit_IT>
    return;
 8002c3a:	e00f      	b.n	8002c5c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <HAL_UART_IRQHandler+0x1ec>
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d005      	beq.n	8002c5c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f8f4 	bl	8002e3e <UART_EndTransmit_IT>
    return;
 8002c56:	bf00      	nop
 8002c58:	e000      	b.n	8002c5c <HAL_UART_IRQHandler+0x1ec>
    return;
 8002c5a:	bf00      	nop
  }
}
 8002c5c:	3720      	adds	r7, #32
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	08002d6d 	.word	0x08002d6d

08002c68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr

08002c7a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr

08002c8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr

08002c9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b084      	sub	sp, #16
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	60f8      	str	r0, [r7, #12]
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	603b      	str	r3, [r7, #0]
 8002caa:	4613      	mov	r3, r2
 8002cac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cae:	e02c      	b.n	8002d0a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb6:	d028      	beq.n	8002d0a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d007      	beq.n	8002cce <UART_WaitOnFlagUntilTimeout+0x30>
 8002cbe:	f7fe f8bd 	bl	8000e3c <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d21d      	bcs.n	8002d0a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002cdc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695a      	ldr	r2, [r3, #20]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0201 	bic.w	r2, r2, #1
 8002cec:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e00f      	b.n	8002d2a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4013      	ands	r3, r2
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	bf0c      	ite	eq
 8002d1a:	2301      	moveq	r3, #1
 8002d1c:	2300      	movne	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d0c3      	beq.n	8002cb0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d48:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695a      	ldr	r2, [r3, #20]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0201 	bic.w	r2, r2, #1
 8002d58:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr

08002d6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f7ff ff80 	bl	8002c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d8c:	bf00      	nop
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b21      	cmp	r3, #33	; 0x21
 8002da6:	d144      	bne.n	8002e32 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db0:	d11a      	bne.n	8002de8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dc6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d105      	bne.n	8002ddc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	1c9a      	adds	r2, r3, #2
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	621a      	str	r2, [r3, #32]
 8002dda:	e00e      	b.n	8002dfa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	621a      	str	r2, [r3, #32]
 8002de6:	e008      	b.n	8002dfa <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	1c59      	adds	r1, r3, #1
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6211      	str	r1, [r2, #32]
 8002df2:	781a      	ldrb	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	4619      	mov	r1, r3
 8002e08:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10f      	bne.n	8002e2e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e1c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e2c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	e000      	b.n	8002e34 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002e32:	2302      	movs	r3, #2
  }
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr

08002e3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff ff02 	bl	8002c68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b084      	sub	sp, #16
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b22      	cmp	r3, #34	; 0x22
 8002e80:	d171      	bne.n	8002f66 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e8a:	d123      	bne.n	8002ed4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10e      	bne.n	8002eb8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb0:	1c9a      	adds	r2, r3, #2
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	629a      	str	r2, [r3, #40]	; 0x28
 8002eb6:	e029      	b.n	8002f0c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	629a      	str	r2, [r3, #40]	; 0x28
 8002ed2:	e01b      	b.n	8002f0c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10a      	bne.n	8002ef2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6858      	ldr	r0, [r3, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee6:	1c59      	adds	r1, r3, #1
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6291      	str	r1, [r2, #40]	; 0x28
 8002eec:	b2c2      	uxtb	r2, r0
 8002eee:	701a      	strb	r2, [r3, #0]
 8002ef0:	e00c      	b.n	8002f0c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efe:	1c58      	adds	r0, r3, #1
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	6288      	str	r0, [r1, #40]	; 0x28
 8002f04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f08:	b2d2      	uxtb	r2, r2
 8002f0a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	4619      	mov	r1, r3
 8002f1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d120      	bne.n	8002f62 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0220 	bic.w	r2, r2, #32
 8002f2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695a      	ldr	r2, [r3, #20]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7ff fe8e 	bl	8002c7a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	e002      	b.n	8002f68 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	e000      	b.n	8002f68 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002f66:	2302      	movs	r3, #2
  }
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002faa:	f023 030c 	bic.w	r3, r3, #12
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6812      	ldr	r2, [r2, #0]
 8002fb2:	68f9      	ldr	r1, [r7, #12]
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a52      	ldr	r2, [pc, #328]	; (800311c <UART_SetConfig+0x1ac>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d14e      	bne.n	8003076 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002fd8:	f7fe ffcc 	bl	8001f74 <HAL_RCC_GetPCLK2Freq>
 8002fdc:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009a      	lsls	r2, r3, #2
 8002fe8:	441a      	add	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff4:	4a4a      	ldr	r2, [pc, #296]	; (8003120 <UART_SetConfig+0x1b0>)
 8002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	0119      	lsls	r1, r3, #4
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	009a      	lsls	r2, r3, #2
 8003008:	441a      	add	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	fbb2 f2f3 	udiv	r2, r2, r3
 8003014:	4b42      	ldr	r3, [pc, #264]	; (8003120 <UART_SetConfig+0x1b0>)
 8003016:	fba3 0302 	umull	r0, r3, r3, r2
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	2064      	movs	r0, #100	; 0x64
 800301e:	fb00 f303 	mul.w	r3, r0, r3
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	3332      	adds	r3, #50	; 0x32
 8003028:	4a3d      	ldr	r2, [pc, #244]	; (8003120 <UART_SetConfig+0x1b0>)
 800302a:	fba2 2303 	umull	r2, r3, r2, r3
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003034:	4419      	add	r1, r3
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	009a      	lsls	r2, r3, #2
 8003040:	441a      	add	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	fbb2 f2f3 	udiv	r2, r2, r3
 800304c:	4b34      	ldr	r3, [pc, #208]	; (8003120 <UART_SetConfig+0x1b0>)
 800304e:	fba3 0302 	umull	r0, r3, r3, r2
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	2064      	movs	r0, #100	; 0x64
 8003056:	fb00 f303 	mul.w	r3, r0, r3
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	3332      	adds	r3, #50	; 0x32
 8003060:	4a2f      	ldr	r2, [pc, #188]	; (8003120 <UART_SetConfig+0x1b0>)
 8003062:	fba2 2303 	umull	r2, r3, r2, r3
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	f003 020f 	and.w	r2, r3, #15
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	440a      	add	r2, r1
 8003072:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003074:	e04d      	b.n	8003112 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003076:	f7fe ff69 	bl	8001f4c <HAL_RCC_GetPCLK1Freq>
 800307a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	009a      	lsls	r2, r3, #2
 8003086:	441a      	add	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003092:	4a23      	ldr	r2, [pc, #140]	; (8003120 <UART_SetConfig+0x1b0>)
 8003094:	fba2 2303 	umull	r2, r3, r2, r3
 8003098:	095b      	lsrs	r3, r3, #5
 800309a:	0119      	lsls	r1, r3, #4
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	009a      	lsls	r2, r3, #2
 80030a6:	441a      	add	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80030b2:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <UART_SetConfig+0x1b0>)
 80030b4:	fba3 0302 	umull	r0, r3, r3, r2
 80030b8:	095b      	lsrs	r3, r3, #5
 80030ba:	2064      	movs	r0, #100	; 0x64
 80030bc:	fb00 f303 	mul.w	r3, r0, r3
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	3332      	adds	r3, #50	; 0x32
 80030c6:	4a16      	ldr	r2, [pc, #88]	; (8003120 <UART_SetConfig+0x1b0>)
 80030c8:	fba2 2303 	umull	r2, r3, r2, r3
 80030cc:	095b      	lsrs	r3, r3, #5
 80030ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030d2:	4419      	add	r1, r3
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	009a      	lsls	r2, r3, #2
 80030de:	441a      	add	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80030ea:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <UART_SetConfig+0x1b0>)
 80030ec:	fba3 0302 	umull	r0, r3, r3, r2
 80030f0:	095b      	lsrs	r3, r3, #5
 80030f2:	2064      	movs	r0, #100	; 0x64
 80030f4:	fb00 f303 	mul.w	r3, r0, r3
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	3332      	adds	r3, #50	; 0x32
 80030fe:	4a08      	ldr	r2, [pc, #32]	; (8003120 <UART_SetConfig+0x1b0>)
 8003100:	fba2 2303 	umull	r2, r3, r2, r3
 8003104:	095b      	lsrs	r3, r3, #5
 8003106:	f003 020f 	and.w	r2, r3, #15
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	440a      	add	r2, r1
 8003110:	609a      	str	r2, [r3, #8]
}
 8003112:	bf00      	nop
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40013800 	.word	0x40013800
 8003120:	51eb851f 	.word	0x51eb851f

08003124 <__errno>:
 8003124:	4b01      	ldr	r3, [pc, #4]	; (800312c <__errno+0x8>)
 8003126:	6818      	ldr	r0, [r3, #0]
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	20000010 	.word	0x20000010

08003130 <__libc_init_array>:
 8003130:	b570      	push	{r4, r5, r6, lr}
 8003132:	2500      	movs	r5, #0
 8003134:	4e0c      	ldr	r6, [pc, #48]	; (8003168 <__libc_init_array+0x38>)
 8003136:	4c0d      	ldr	r4, [pc, #52]	; (800316c <__libc_init_array+0x3c>)
 8003138:	1ba4      	subs	r4, r4, r6
 800313a:	10a4      	asrs	r4, r4, #2
 800313c:	42a5      	cmp	r5, r4
 800313e:	d109      	bne.n	8003154 <__libc_init_array+0x24>
 8003140:	f000 fc3c 	bl	80039bc <_init>
 8003144:	2500      	movs	r5, #0
 8003146:	4e0a      	ldr	r6, [pc, #40]	; (8003170 <__libc_init_array+0x40>)
 8003148:	4c0a      	ldr	r4, [pc, #40]	; (8003174 <__libc_init_array+0x44>)
 800314a:	1ba4      	subs	r4, r4, r6
 800314c:	10a4      	asrs	r4, r4, #2
 800314e:	42a5      	cmp	r5, r4
 8003150:	d105      	bne.n	800315e <__libc_init_array+0x2e>
 8003152:	bd70      	pop	{r4, r5, r6, pc}
 8003154:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003158:	4798      	blx	r3
 800315a:	3501      	adds	r5, #1
 800315c:	e7ee      	b.n	800313c <__libc_init_array+0xc>
 800315e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003162:	4798      	blx	r3
 8003164:	3501      	adds	r5, #1
 8003166:	e7f2      	b.n	800314e <__libc_init_array+0x1e>
 8003168:	08003a80 	.word	0x08003a80
 800316c:	08003a80 	.word	0x08003a80
 8003170:	08003a80 	.word	0x08003a80
 8003174:	08003a84 	.word	0x08003a84

08003178 <memset>:
 8003178:	4603      	mov	r3, r0
 800317a:	4402      	add	r2, r0
 800317c:	4293      	cmp	r3, r2
 800317e:	d100      	bne.n	8003182 <memset+0xa>
 8003180:	4770      	bx	lr
 8003182:	f803 1b01 	strb.w	r1, [r3], #1
 8003186:	e7f9      	b.n	800317c <memset+0x4>

08003188 <siprintf>:
 8003188:	b40e      	push	{r1, r2, r3}
 800318a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800318e:	b500      	push	{lr}
 8003190:	b09c      	sub	sp, #112	; 0x70
 8003192:	ab1d      	add	r3, sp, #116	; 0x74
 8003194:	9002      	str	r0, [sp, #8]
 8003196:	9006      	str	r0, [sp, #24]
 8003198:	9107      	str	r1, [sp, #28]
 800319a:	9104      	str	r1, [sp, #16]
 800319c:	4808      	ldr	r0, [pc, #32]	; (80031c0 <siprintf+0x38>)
 800319e:	4909      	ldr	r1, [pc, #36]	; (80031c4 <siprintf+0x3c>)
 80031a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80031a4:	9105      	str	r1, [sp, #20]
 80031a6:	6800      	ldr	r0, [r0, #0]
 80031a8:	a902      	add	r1, sp, #8
 80031aa:	9301      	str	r3, [sp, #4]
 80031ac:	f000 f86e 	bl	800328c <_svfiprintf_r>
 80031b0:	2200      	movs	r2, #0
 80031b2:	9b02      	ldr	r3, [sp, #8]
 80031b4:	701a      	strb	r2, [r3, #0]
 80031b6:	b01c      	add	sp, #112	; 0x70
 80031b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80031bc:	b003      	add	sp, #12
 80031be:	4770      	bx	lr
 80031c0:	20000010 	.word	0x20000010
 80031c4:	ffff0208 	.word	0xffff0208

080031c8 <strcpy>:
 80031c8:	4603      	mov	r3, r0
 80031ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80031ce:	f803 2b01 	strb.w	r2, [r3], #1
 80031d2:	2a00      	cmp	r2, #0
 80031d4:	d1f9      	bne.n	80031ca <strcpy+0x2>
 80031d6:	4770      	bx	lr

080031d8 <__ssputs_r>:
 80031d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031dc:	688e      	ldr	r6, [r1, #8]
 80031de:	4682      	mov	sl, r0
 80031e0:	429e      	cmp	r6, r3
 80031e2:	460c      	mov	r4, r1
 80031e4:	4690      	mov	r8, r2
 80031e6:	4699      	mov	r9, r3
 80031e8:	d837      	bhi.n	800325a <__ssputs_r+0x82>
 80031ea:	898a      	ldrh	r2, [r1, #12]
 80031ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031f0:	d031      	beq.n	8003256 <__ssputs_r+0x7e>
 80031f2:	2302      	movs	r3, #2
 80031f4:	6825      	ldr	r5, [r4, #0]
 80031f6:	6909      	ldr	r1, [r1, #16]
 80031f8:	1a6f      	subs	r7, r5, r1
 80031fa:	6965      	ldr	r5, [r4, #20]
 80031fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003200:	fb95 f5f3 	sdiv	r5, r5, r3
 8003204:	f109 0301 	add.w	r3, r9, #1
 8003208:	443b      	add	r3, r7
 800320a:	429d      	cmp	r5, r3
 800320c:	bf38      	it	cc
 800320e:	461d      	movcc	r5, r3
 8003210:	0553      	lsls	r3, r2, #21
 8003212:	d530      	bpl.n	8003276 <__ssputs_r+0x9e>
 8003214:	4629      	mov	r1, r5
 8003216:	f000 fb37 	bl	8003888 <_malloc_r>
 800321a:	4606      	mov	r6, r0
 800321c:	b950      	cbnz	r0, 8003234 <__ssputs_r+0x5c>
 800321e:	230c      	movs	r3, #12
 8003220:	f04f 30ff 	mov.w	r0, #4294967295
 8003224:	f8ca 3000 	str.w	r3, [sl]
 8003228:	89a3      	ldrh	r3, [r4, #12]
 800322a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800322e:	81a3      	strh	r3, [r4, #12]
 8003230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003234:	463a      	mov	r2, r7
 8003236:	6921      	ldr	r1, [r4, #16]
 8003238:	f000 fab6 	bl	80037a8 <memcpy>
 800323c:	89a3      	ldrh	r3, [r4, #12]
 800323e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003246:	81a3      	strh	r3, [r4, #12]
 8003248:	6126      	str	r6, [r4, #16]
 800324a:	443e      	add	r6, r7
 800324c:	6026      	str	r6, [r4, #0]
 800324e:	464e      	mov	r6, r9
 8003250:	6165      	str	r5, [r4, #20]
 8003252:	1bed      	subs	r5, r5, r7
 8003254:	60a5      	str	r5, [r4, #8]
 8003256:	454e      	cmp	r6, r9
 8003258:	d900      	bls.n	800325c <__ssputs_r+0x84>
 800325a:	464e      	mov	r6, r9
 800325c:	4632      	mov	r2, r6
 800325e:	4641      	mov	r1, r8
 8003260:	6820      	ldr	r0, [r4, #0]
 8003262:	f000 faac 	bl	80037be <memmove>
 8003266:	68a3      	ldr	r3, [r4, #8]
 8003268:	2000      	movs	r0, #0
 800326a:	1b9b      	subs	r3, r3, r6
 800326c:	60a3      	str	r3, [r4, #8]
 800326e:	6823      	ldr	r3, [r4, #0]
 8003270:	441e      	add	r6, r3
 8003272:	6026      	str	r6, [r4, #0]
 8003274:	e7dc      	b.n	8003230 <__ssputs_r+0x58>
 8003276:	462a      	mov	r2, r5
 8003278:	f000 fb60 	bl	800393c <_realloc_r>
 800327c:	4606      	mov	r6, r0
 800327e:	2800      	cmp	r0, #0
 8003280:	d1e2      	bne.n	8003248 <__ssputs_r+0x70>
 8003282:	6921      	ldr	r1, [r4, #16]
 8003284:	4650      	mov	r0, sl
 8003286:	f000 fab3 	bl	80037f0 <_free_r>
 800328a:	e7c8      	b.n	800321e <__ssputs_r+0x46>

0800328c <_svfiprintf_r>:
 800328c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003290:	461d      	mov	r5, r3
 8003292:	898b      	ldrh	r3, [r1, #12]
 8003294:	b09d      	sub	sp, #116	; 0x74
 8003296:	061f      	lsls	r7, r3, #24
 8003298:	4680      	mov	r8, r0
 800329a:	460c      	mov	r4, r1
 800329c:	4616      	mov	r6, r2
 800329e:	d50f      	bpl.n	80032c0 <_svfiprintf_r+0x34>
 80032a0:	690b      	ldr	r3, [r1, #16]
 80032a2:	b96b      	cbnz	r3, 80032c0 <_svfiprintf_r+0x34>
 80032a4:	2140      	movs	r1, #64	; 0x40
 80032a6:	f000 faef 	bl	8003888 <_malloc_r>
 80032aa:	6020      	str	r0, [r4, #0]
 80032ac:	6120      	str	r0, [r4, #16]
 80032ae:	b928      	cbnz	r0, 80032bc <_svfiprintf_r+0x30>
 80032b0:	230c      	movs	r3, #12
 80032b2:	f8c8 3000 	str.w	r3, [r8]
 80032b6:	f04f 30ff 	mov.w	r0, #4294967295
 80032ba:	e0c8      	b.n	800344e <_svfiprintf_r+0x1c2>
 80032bc:	2340      	movs	r3, #64	; 0x40
 80032be:	6163      	str	r3, [r4, #20]
 80032c0:	2300      	movs	r3, #0
 80032c2:	9309      	str	r3, [sp, #36]	; 0x24
 80032c4:	2320      	movs	r3, #32
 80032c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032ca:	2330      	movs	r3, #48	; 0x30
 80032cc:	f04f 0b01 	mov.w	fp, #1
 80032d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032d4:	9503      	str	r5, [sp, #12]
 80032d6:	4637      	mov	r7, r6
 80032d8:	463d      	mov	r5, r7
 80032da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80032de:	b10b      	cbz	r3, 80032e4 <_svfiprintf_r+0x58>
 80032e0:	2b25      	cmp	r3, #37	; 0x25
 80032e2:	d13e      	bne.n	8003362 <_svfiprintf_r+0xd6>
 80032e4:	ebb7 0a06 	subs.w	sl, r7, r6
 80032e8:	d00b      	beq.n	8003302 <_svfiprintf_r+0x76>
 80032ea:	4653      	mov	r3, sl
 80032ec:	4632      	mov	r2, r6
 80032ee:	4621      	mov	r1, r4
 80032f0:	4640      	mov	r0, r8
 80032f2:	f7ff ff71 	bl	80031d8 <__ssputs_r>
 80032f6:	3001      	adds	r0, #1
 80032f8:	f000 80a4 	beq.w	8003444 <_svfiprintf_r+0x1b8>
 80032fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032fe:	4453      	add	r3, sl
 8003300:	9309      	str	r3, [sp, #36]	; 0x24
 8003302:	783b      	ldrb	r3, [r7, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 809d 	beq.w	8003444 <_svfiprintf_r+0x1b8>
 800330a:	2300      	movs	r3, #0
 800330c:	f04f 32ff 	mov.w	r2, #4294967295
 8003310:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003314:	9304      	str	r3, [sp, #16]
 8003316:	9307      	str	r3, [sp, #28]
 8003318:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800331c:	931a      	str	r3, [sp, #104]	; 0x68
 800331e:	462f      	mov	r7, r5
 8003320:	2205      	movs	r2, #5
 8003322:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003326:	4850      	ldr	r0, [pc, #320]	; (8003468 <_svfiprintf_r+0x1dc>)
 8003328:	f000 fa30 	bl	800378c <memchr>
 800332c:	9b04      	ldr	r3, [sp, #16]
 800332e:	b9d0      	cbnz	r0, 8003366 <_svfiprintf_r+0xda>
 8003330:	06d9      	lsls	r1, r3, #27
 8003332:	bf44      	itt	mi
 8003334:	2220      	movmi	r2, #32
 8003336:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800333a:	071a      	lsls	r2, r3, #28
 800333c:	bf44      	itt	mi
 800333e:	222b      	movmi	r2, #43	; 0x2b
 8003340:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003344:	782a      	ldrb	r2, [r5, #0]
 8003346:	2a2a      	cmp	r2, #42	; 0x2a
 8003348:	d015      	beq.n	8003376 <_svfiprintf_r+0xea>
 800334a:	462f      	mov	r7, r5
 800334c:	2000      	movs	r0, #0
 800334e:	250a      	movs	r5, #10
 8003350:	9a07      	ldr	r2, [sp, #28]
 8003352:	4639      	mov	r1, r7
 8003354:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003358:	3b30      	subs	r3, #48	; 0x30
 800335a:	2b09      	cmp	r3, #9
 800335c:	d94d      	bls.n	80033fa <_svfiprintf_r+0x16e>
 800335e:	b1b8      	cbz	r0, 8003390 <_svfiprintf_r+0x104>
 8003360:	e00f      	b.n	8003382 <_svfiprintf_r+0xf6>
 8003362:	462f      	mov	r7, r5
 8003364:	e7b8      	b.n	80032d8 <_svfiprintf_r+0x4c>
 8003366:	4a40      	ldr	r2, [pc, #256]	; (8003468 <_svfiprintf_r+0x1dc>)
 8003368:	463d      	mov	r5, r7
 800336a:	1a80      	subs	r0, r0, r2
 800336c:	fa0b f000 	lsl.w	r0, fp, r0
 8003370:	4318      	orrs	r0, r3
 8003372:	9004      	str	r0, [sp, #16]
 8003374:	e7d3      	b.n	800331e <_svfiprintf_r+0x92>
 8003376:	9a03      	ldr	r2, [sp, #12]
 8003378:	1d11      	adds	r1, r2, #4
 800337a:	6812      	ldr	r2, [r2, #0]
 800337c:	9103      	str	r1, [sp, #12]
 800337e:	2a00      	cmp	r2, #0
 8003380:	db01      	blt.n	8003386 <_svfiprintf_r+0xfa>
 8003382:	9207      	str	r2, [sp, #28]
 8003384:	e004      	b.n	8003390 <_svfiprintf_r+0x104>
 8003386:	4252      	negs	r2, r2
 8003388:	f043 0302 	orr.w	r3, r3, #2
 800338c:	9207      	str	r2, [sp, #28]
 800338e:	9304      	str	r3, [sp, #16]
 8003390:	783b      	ldrb	r3, [r7, #0]
 8003392:	2b2e      	cmp	r3, #46	; 0x2e
 8003394:	d10c      	bne.n	80033b0 <_svfiprintf_r+0x124>
 8003396:	787b      	ldrb	r3, [r7, #1]
 8003398:	2b2a      	cmp	r3, #42	; 0x2a
 800339a:	d133      	bne.n	8003404 <_svfiprintf_r+0x178>
 800339c:	9b03      	ldr	r3, [sp, #12]
 800339e:	3702      	adds	r7, #2
 80033a0:	1d1a      	adds	r2, r3, #4
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	9203      	str	r2, [sp, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	bfb8      	it	lt
 80033aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80033ae:	9305      	str	r3, [sp, #20]
 80033b0:	4d2e      	ldr	r5, [pc, #184]	; (800346c <_svfiprintf_r+0x1e0>)
 80033b2:	2203      	movs	r2, #3
 80033b4:	7839      	ldrb	r1, [r7, #0]
 80033b6:	4628      	mov	r0, r5
 80033b8:	f000 f9e8 	bl	800378c <memchr>
 80033bc:	b138      	cbz	r0, 80033ce <_svfiprintf_r+0x142>
 80033be:	2340      	movs	r3, #64	; 0x40
 80033c0:	1b40      	subs	r0, r0, r5
 80033c2:	fa03 f000 	lsl.w	r0, r3, r0
 80033c6:	9b04      	ldr	r3, [sp, #16]
 80033c8:	3701      	adds	r7, #1
 80033ca:	4303      	orrs	r3, r0
 80033cc:	9304      	str	r3, [sp, #16]
 80033ce:	7839      	ldrb	r1, [r7, #0]
 80033d0:	2206      	movs	r2, #6
 80033d2:	4827      	ldr	r0, [pc, #156]	; (8003470 <_svfiprintf_r+0x1e4>)
 80033d4:	1c7e      	adds	r6, r7, #1
 80033d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033da:	f000 f9d7 	bl	800378c <memchr>
 80033de:	2800      	cmp	r0, #0
 80033e0:	d038      	beq.n	8003454 <_svfiprintf_r+0x1c8>
 80033e2:	4b24      	ldr	r3, [pc, #144]	; (8003474 <_svfiprintf_r+0x1e8>)
 80033e4:	bb13      	cbnz	r3, 800342c <_svfiprintf_r+0x1a0>
 80033e6:	9b03      	ldr	r3, [sp, #12]
 80033e8:	3307      	adds	r3, #7
 80033ea:	f023 0307 	bic.w	r3, r3, #7
 80033ee:	3308      	adds	r3, #8
 80033f0:	9303      	str	r3, [sp, #12]
 80033f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033f4:	444b      	add	r3, r9
 80033f6:	9309      	str	r3, [sp, #36]	; 0x24
 80033f8:	e76d      	b.n	80032d6 <_svfiprintf_r+0x4a>
 80033fa:	fb05 3202 	mla	r2, r5, r2, r3
 80033fe:	2001      	movs	r0, #1
 8003400:	460f      	mov	r7, r1
 8003402:	e7a6      	b.n	8003352 <_svfiprintf_r+0xc6>
 8003404:	2300      	movs	r3, #0
 8003406:	250a      	movs	r5, #10
 8003408:	4619      	mov	r1, r3
 800340a:	3701      	adds	r7, #1
 800340c:	9305      	str	r3, [sp, #20]
 800340e:	4638      	mov	r0, r7
 8003410:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003414:	3a30      	subs	r2, #48	; 0x30
 8003416:	2a09      	cmp	r2, #9
 8003418:	d903      	bls.n	8003422 <_svfiprintf_r+0x196>
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0c8      	beq.n	80033b0 <_svfiprintf_r+0x124>
 800341e:	9105      	str	r1, [sp, #20]
 8003420:	e7c6      	b.n	80033b0 <_svfiprintf_r+0x124>
 8003422:	fb05 2101 	mla	r1, r5, r1, r2
 8003426:	2301      	movs	r3, #1
 8003428:	4607      	mov	r7, r0
 800342a:	e7f0      	b.n	800340e <_svfiprintf_r+0x182>
 800342c:	ab03      	add	r3, sp, #12
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	4622      	mov	r2, r4
 8003432:	4b11      	ldr	r3, [pc, #68]	; (8003478 <_svfiprintf_r+0x1ec>)
 8003434:	a904      	add	r1, sp, #16
 8003436:	4640      	mov	r0, r8
 8003438:	f3af 8000 	nop.w
 800343c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003440:	4681      	mov	r9, r0
 8003442:	d1d6      	bne.n	80033f2 <_svfiprintf_r+0x166>
 8003444:	89a3      	ldrh	r3, [r4, #12]
 8003446:	065b      	lsls	r3, r3, #25
 8003448:	f53f af35 	bmi.w	80032b6 <_svfiprintf_r+0x2a>
 800344c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800344e:	b01d      	add	sp, #116	; 0x74
 8003450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003454:	ab03      	add	r3, sp, #12
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	4622      	mov	r2, r4
 800345a:	4b07      	ldr	r3, [pc, #28]	; (8003478 <_svfiprintf_r+0x1ec>)
 800345c:	a904      	add	r1, sp, #16
 800345e:	4640      	mov	r0, r8
 8003460:	f000 f882 	bl	8003568 <_printf_i>
 8003464:	e7ea      	b.n	800343c <_svfiprintf_r+0x1b0>
 8003466:	bf00      	nop
 8003468:	08003a4c 	.word	0x08003a4c
 800346c:	08003a52 	.word	0x08003a52
 8003470:	08003a56 	.word	0x08003a56
 8003474:	00000000 	.word	0x00000000
 8003478:	080031d9 	.word	0x080031d9

0800347c <_printf_common>:
 800347c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003480:	4691      	mov	r9, r2
 8003482:	461f      	mov	r7, r3
 8003484:	688a      	ldr	r2, [r1, #8]
 8003486:	690b      	ldr	r3, [r1, #16]
 8003488:	4606      	mov	r6, r0
 800348a:	4293      	cmp	r3, r2
 800348c:	bfb8      	it	lt
 800348e:	4613      	movlt	r3, r2
 8003490:	f8c9 3000 	str.w	r3, [r9]
 8003494:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003498:	460c      	mov	r4, r1
 800349a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800349e:	b112      	cbz	r2, 80034a6 <_printf_common+0x2a>
 80034a0:	3301      	adds	r3, #1
 80034a2:	f8c9 3000 	str.w	r3, [r9]
 80034a6:	6823      	ldr	r3, [r4, #0]
 80034a8:	0699      	lsls	r1, r3, #26
 80034aa:	bf42      	ittt	mi
 80034ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80034b0:	3302      	addmi	r3, #2
 80034b2:	f8c9 3000 	strmi.w	r3, [r9]
 80034b6:	6825      	ldr	r5, [r4, #0]
 80034b8:	f015 0506 	ands.w	r5, r5, #6
 80034bc:	d107      	bne.n	80034ce <_printf_common+0x52>
 80034be:	f104 0a19 	add.w	sl, r4, #25
 80034c2:	68e3      	ldr	r3, [r4, #12]
 80034c4:	f8d9 2000 	ldr.w	r2, [r9]
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	42ab      	cmp	r3, r5
 80034cc:	dc29      	bgt.n	8003522 <_printf_common+0xa6>
 80034ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80034d2:	6822      	ldr	r2, [r4, #0]
 80034d4:	3300      	adds	r3, #0
 80034d6:	bf18      	it	ne
 80034d8:	2301      	movne	r3, #1
 80034da:	0692      	lsls	r2, r2, #26
 80034dc:	d42e      	bmi.n	800353c <_printf_common+0xc0>
 80034de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034e2:	4639      	mov	r1, r7
 80034e4:	4630      	mov	r0, r6
 80034e6:	47c0      	blx	r8
 80034e8:	3001      	adds	r0, #1
 80034ea:	d021      	beq.n	8003530 <_printf_common+0xb4>
 80034ec:	6823      	ldr	r3, [r4, #0]
 80034ee:	68e5      	ldr	r5, [r4, #12]
 80034f0:	f003 0306 	and.w	r3, r3, #6
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	bf18      	it	ne
 80034f8:	2500      	movne	r5, #0
 80034fa:	f8d9 2000 	ldr.w	r2, [r9]
 80034fe:	f04f 0900 	mov.w	r9, #0
 8003502:	bf08      	it	eq
 8003504:	1aad      	subeq	r5, r5, r2
 8003506:	68a3      	ldr	r3, [r4, #8]
 8003508:	6922      	ldr	r2, [r4, #16]
 800350a:	bf08      	it	eq
 800350c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003510:	4293      	cmp	r3, r2
 8003512:	bfc4      	itt	gt
 8003514:	1a9b      	subgt	r3, r3, r2
 8003516:	18ed      	addgt	r5, r5, r3
 8003518:	341a      	adds	r4, #26
 800351a:	454d      	cmp	r5, r9
 800351c:	d11a      	bne.n	8003554 <_printf_common+0xd8>
 800351e:	2000      	movs	r0, #0
 8003520:	e008      	b.n	8003534 <_printf_common+0xb8>
 8003522:	2301      	movs	r3, #1
 8003524:	4652      	mov	r2, sl
 8003526:	4639      	mov	r1, r7
 8003528:	4630      	mov	r0, r6
 800352a:	47c0      	blx	r8
 800352c:	3001      	adds	r0, #1
 800352e:	d103      	bne.n	8003538 <_printf_common+0xbc>
 8003530:	f04f 30ff 	mov.w	r0, #4294967295
 8003534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003538:	3501      	adds	r5, #1
 800353a:	e7c2      	b.n	80034c2 <_printf_common+0x46>
 800353c:	2030      	movs	r0, #48	; 0x30
 800353e:	18e1      	adds	r1, r4, r3
 8003540:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800354a:	4422      	add	r2, r4
 800354c:	3302      	adds	r3, #2
 800354e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003552:	e7c4      	b.n	80034de <_printf_common+0x62>
 8003554:	2301      	movs	r3, #1
 8003556:	4622      	mov	r2, r4
 8003558:	4639      	mov	r1, r7
 800355a:	4630      	mov	r0, r6
 800355c:	47c0      	blx	r8
 800355e:	3001      	adds	r0, #1
 8003560:	d0e6      	beq.n	8003530 <_printf_common+0xb4>
 8003562:	f109 0901 	add.w	r9, r9, #1
 8003566:	e7d8      	b.n	800351a <_printf_common+0x9e>

08003568 <_printf_i>:
 8003568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800356c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003570:	460c      	mov	r4, r1
 8003572:	7e09      	ldrb	r1, [r1, #24]
 8003574:	b085      	sub	sp, #20
 8003576:	296e      	cmp	r1, #110	; 0x6e
 8003578:	4617      	mov	r7, r2
 800357a:	4606      	mov	r6, r0
 800357c:	4698      	mov	r8, r3
 800357e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003580:	f000 80b3 	beq.w	80036ea <_printf_i+0x182>
 8003584:	d822      	bhi.n	80035cc <_printf_i+0x64>
 8003586:	2963      	cmp	r1, #99	; 0x63
 8003588:	d036      	beq.n	80035f8 <_printf_i+0x90>
 800358a:	d80a      	bhi.n	80035a2 <_printf_i+0x3a>
 800358c:	2900      	cmp	r1, #0
 800358e:	f000 80b9 	beq.w	8003704 <_printf_i+0x19c>
 8003592:	2958      	cmp	r1, #88	; 0x58
 8003594:	f000 8083 	beq.w	800369e <_printf_i+0x136>
 8003598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800359c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80035a0:	e032      	b.n	8003608 <_printf_i+0xa0>
 80035a2:	2964      	cmp	r1, #100	; 0x64
 80035a4:	d001      	beq.n	80035aa <_printf_i+0x42>
 80035a6:	2969      	cmp	r1, #105	; 0x69
 80035a8:	d1f6      	bne.n	8003598 <_printf_i+0x30>
 80035aa:	6820      	ldr	r0, [r4, #0]
 80035ac:	6813      	ldr	r3, [r2, #0]
 80035ae:	0605      	lsls	r5, r0, #24
 80035b0:	f103 0104 	add.w	r1, r3, #4
 80035b4:	d52a      	bpl.n	800360c <_printf_i+0xa4>
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6011      	str	r1, [r2, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	da03      	bge.n	80035c6 <_printf_i+0x5e>
 80035be:	222d      	movs	r2, #45	; 0x2d
 80035c0:	425b      	negs	r3, r3
 80035c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80035c6:	486f      	ldr	r0, [pc, #444]	; (8003784 <_printf_i+0x21c>)
 80035c8:	220a      	movs	r2, #10
 80035ca:	e039      	b.n	8003640 <_printf_i+0xd8>
 80035cc:	2973      	cmp	r1, #115	; 0x73
 80035ce:	f000 809d 	beq.w	800370c <_printf_i+0x1a4>
 80035d2:	d808      	bhi.n	80035e6 <_printf_i+0x7e>
 80035d4:	296f      	cmp	r1, #111	; 0x6f
 80035d6:	d020      	beq.n	800361a <_printf_i+0xb2>
 80035d8:	2970      	cmp	r1, #112	; 0x70
 80035da:	d1dd      	bne.n	8003598 <_printf_i+0x30>
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	f043 0320 	orr.w	r3, r3, #32
 80035e2:	6023      	str	r3, [r4, #0]
 80035e4:	e003      	b.n	80035ee <_printf_i+0x86>
 80035e6:	2975      	cmp	r1, #117	; 0x75
 80035e8:	d017      	beq.n	800361a <_printf_i+0xb2>
 80035ea:	2978      	cmp	r1, #120	; 0x78
 80035ec:	d1d4      	bne.n	8003598 <_printf_i+0x30>
 80035ee:	2378      	movs	r3, #120	; 0x78
 80035f0:	4865      	ldr	r0, [pc, #404]	; (8003788 <_printf_i+0x220>)
 80035f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80035f6:	e055      	b.n	80036a4 <_printf_i+0x13c>
 80035f8:	6813      	ldr	r3, [r2, #0]
 80035fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035fe:	1d19      	adds	r1, r3, #4
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6011      	str	r1, [r2, #0]
 8003604:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003608:	2301      	movs	r3, #1
 800360a:	e08c      	b.n	8003726 <_printf_i+0x1be>
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003612:	6011      	str	r1, [r2, #0]
 8003614:	bf18      	it	ne
 8003616:	b21b      	sxthne	r3, r3
 8003618:	e7cf      	b.n	80035ba <_printf_i+0x52>
 800361a:	6813      	ldr	r3, [r2, #0]
 800361c:	6825      	ldr	r5, [r4, #0]
 800361e:	1d18      	adds	r0, r3, #4
 8003620:	6010      	str	r0, [r2, #0]
 8003622:	0628      	lsls	r0, r5, #24
 8003624:	d501      	bpl.n	800362a <_printf_i+0xc2>
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	e002      	b.n	8003630 <_printf_i+0xc8>
 800362a:	0668      	lsls	r0, r5, #25
 800362c:	d5fb      	bpl.n	8003626 <_printf_i+0xbe>
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	296f      	cmp	r1, #111	; 0x6f
 8003632:	bf14      	ite	ne
 8003634:	220a      	movne	r2, #10
 8003636:	2208      	moveq	r2, #8
 8003638:	4852      	ldr	r0, [pc, #328]	; (8003784 <_printf_i+0x21c>)
 800363a:	2100      	movs	r1, #0
 800363c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003640:	6865      	ldr	r5, [r4, #4]
 8003642:	2d00      	cmp	r5, #0
 8003644:	60a5      	str	r5, [r4, #8]
 8003646:	f2c0 8095 	blt.w	8003774 <_printf_i+0x20c>
 800364a:	6821      	ldr	r1, [r4, #0]
 800364c:	f021 0104 	bic.w	r1, r1, #4
 8003650:	6021      	str	r1, [r4, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d13d      	bne.n	80036d2 <_printf_i+0x16a>
 8003656:	2d00      	cmp	r5, #0
 8003658:	f040 808e 	bne.w	8003778 <_printf_i+0x210>
 800365c:	4665      	mov	r5, ip
 800365e:	2a08      	cmp	r2, #8
 8003660:	d10b      	bne.n	800367a <_printf_i+0x112>
 8003662:	6823      	ldr	r3, [r4, #0]
 8003664:	07db      	lsls	r3, r3, #31
 8003666:	d508      	bpl.n	800367a <_printf_i+0x112>
 8003668:	6923      	ldr	r3, [r4, #16]
 800366a:	6862      	ldr	r2, [r4, #4]
 800366c:	429a      	cmp	r2, r3
 800366e:	bfde      	ittt	le
 8003670:	2330      	movle	r3, #48	; 0x30
 8003672:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003676:	f105 35ff 	addle.w	r5, r5, #4294967295
 800367a:	ebac 0305 	sub.w	r3, ip, r5
 800367e:	6123      	str	r3, [r4, #16]
 8003680:	f8cd 8000 	str.w	r8, [sp]
 8003684:	463b      	mov	r3, r7
 8003686:	aa03      	add	r2, sp, #12
 8003688:	4621      	mov	r1, r4
 800368a:	4630      	mov	r0, r6
 800368c:	f7ff fef6 	bl	800347c <_printf_common>
 8003690:	3001      	adds	r0, #1
 8003692:	d14d      	bne.n	8003730 <_printf_i+0x1c8>
 8003694:	f04f 30ff 	mov.w	r0, #4294967295
 8003698:	b005      	add	sp, #20
 800369a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800369e:	4839      	ldr	r0, [pc, #228]	; (8003784 <_printf_i+0x21c>)
 80036a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80036a4:	6813      	ldr	r3, [r2, #0]
 80036a6:	6821      	ldr	r1, [r4, #0]
 80036a8:	1d1d      	adds	r5, r3, #4
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6015      	str	r5, [r2, #0]
 80036ae:	060a      	lsls	r2, r1, #24
 80036b0:	d50b      	bpl.n	80036ca <_printf_i+0x162>
 80036b2:	07ca      	lsls	r2, r1, #31
 80036b4:	bf44      	itt	mi
 80036b6:	f041 0120 	orrmi.w	r1, r1, #32
 80036ba:	6021      	strmi	r1, [r4, #0]
 80036bc:	b91b      	cbnz	r3, 80036c6 <_printf_i+0x15e>
 80036be:	6822      	ldr	r2, [r4, #0]
 80036c0:	f022 0220 	bic.w	r2, r2, #32
 80036c4:	6022      	str	r2, [r4, #0]
 80036c6:	2210      	movs	r2, #16
 80036c8:	e7b7      	b.n	800363a <_printf_i+0xd2>
 80036ca:	064d      	lsls	r5, r1, #25
 80036cc:	bf48      	it	mi
 80036ce:	b29b      	uxthmi	r3, r3
 80036d0:	e7ef      	b.n	80036b2 <_printf_i+0x14a>
 80036d2:	4665      	mov	r5, ip
 80036d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80036d8:	fb02 3311 	mls	r3, r2, r1, r3
 80036dc:	5cc3      	ldrb	r3, [r0, r3]
 80036de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80036e2:	460b      	mov	r3, r1
 80036e4:	2900      	cmp	r1, #0
 80036e6:	d1f5      	bne.n	80036d4 <_printf_i+0x16c>
 80036e8:	e7b9      	b.n	800365e <_printf_i+0xf6>
 80036ea:	6813      	ldr	r3, [r2, #0]
 80036ec:	6825      	ldr	r5, [r4, #0]
 80036ee:	1d18      	adds	r0, r3, #4
 80036f0:	6961      	ldr	r1, [r4, #20]
 80036f2:	6010      	str	r0, [r2, #0]
 80036f4:	0628      	lsls	r0, r5, #24
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	d501      	bpl.n	80036fe <_printf_i+0x196>
 80036fa:	6019      	str	r1, [r3, #0]
 80036fc:	e002      	b.n	8003704 <_printf_i+0x19c>
 80036fe:	066a      	lsls	r2, r5, #25
 8003700:	d5fb      	bpl.n	80036fa <_printf_i+0x192>
 8003702:	8019      	strh	r1, [r3, #0]
 8003704:	2300      	movs	r3, #0
 8003706:	4665      	mov	r5, ip
 8003708:	6123      	str	r3, [r4, #16]
 800370a:	e7b9      	b.n	8003680 <_printf_i+0x118>
 800370c:	6813      	ldr	r3, [r2, #0]
 800370e:	1d19      	adds	r1, r3, #4
 8003710:	6011      	str	r1, [r2, #0]
 8003712:	681d      	ldr	r5, [r3, #0]
 8003714:	6862      	ldr	r2, [r4, #4]
 8003716:	2100      	movs	r1, #0
 8003718:	4628      	mov	r0, r5
 800371a:	f000 f837 	bl	800378c <memchr>
 800371e:	b108      	cbz	r0, 8003724 <_printf_i+0x1bc>
 8003720:	1b40      	subs	r0, r0, r5
 8003722:	6060      	str	r0, [r4, #4]
 8003724:	6863      	ldr	r3, [r4, #4]
 8003726:	6123      	str	r3, [r4, #16]
 8003728:	2300      	movs	r3, #0
 800372a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800372e:	e7a7      	b.n	8003680 <_printf_i+0x118>
 8003730:	6923      	ldr	r3, [r4, #16]
 8003732:	462a      	mov	r2, r5
 8003734:	4639      	mov	r1, r7
 8003736:	4630      	mov	r0, r6
 8003738:	47c0      	blx	r8
 800373a:	3001      	adds	r0, #1
 800373c:	d0aa      	beq.n	8003694 <_printf_i+0x12c>
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	079b      	lsls	r3, r3, #30
 8003742:	d413      	bmi.n	800376c <_printf_i+0x204>
 8003744:	68e0      	ldr	r0, [r4, #12]
 8003746:	9b03      	ldr	r3, [sp, #12]
 8003748:	4298      	cmp	r0, r3
 800374a:	bfb8      	it	lt
 800374c:	4618      	movlt	r0, r3
 800374e:	e7a3      	b.n	8003698 <_printf_i+0x130>
 8003750:	2301      	movs	r3, #1
 8003752:	464a      	mov	r2, r9
 8003754:	4639      	mov	r1, r7
 8003756:	4630      	mov	r0, r6
 8003758:	47c0      	blx	r8
 800375a:	3001      	adds	r0, #1
 800375c:	d09a      	beq.n	8003694 <_printf_i+0x12c>
 800375e:	3501      	adds	r5, #1
 8003760:	68e3      	ldr	r3, [r4, #12]
 8003762:	9a03      	ldr	r2, [sp, #12]
 8003764:	1a9b      	subs	r3, r3, r2
 8003766:	42ab      	cmp	r3, r5
 8003768:	dcf2      	bgt.n	8003750 <_printf_i+0x1e8>
 800376a:	e7eb      	b.n	8003744 <_printf_i+0x1dc>
 800376c:	2500      	movs	r5, #0
 800376e:	f104 0919 	add.w	r9, r4, #25
 8003772:	e7f5      	b.n	8003760 <_printf_i+0x1f8>
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1ac      	bne.n	80036d2 <_printf_i+0x16a>
 8003778:	7803      	ldrb	r3, [r0, #0]
 800377a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800377e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003782:	e76c      	b.n	800365e <_printf_i+0xf6>
 8003784:	08003a5d 	.word	0x08003a5d
 8003788:	08003a6e 	.word	0x08003a6e

0800378c <memchr>:
 800378c:	b510      	push	{r4, lr}
 800378e:	b2c9      	uxtb	r1, r1
 8003790:	4402      	add	r2, r0
 8003792:	4290      	cmp	r0, r2
 8003794:	4603      	mov	r3, r0
 8003796:	d101      	bne.n	800379c <memchr+0x10>
 8003798:	2300      	movs	r3, #0
 800379a:	e003      	b.n	80037a4 <memchr+0x18>
 800379c:	781c      	ldrb	r4, [r3, #0]
 800379e:	3001      	adds	r0, #1
 80037a0:	428c      	cmp	r4, r1
 80037a2:	d1f6      	bne.n	8003792 <memchr+0x6>
 80037a4:	4618      	mov	r0, r3
 80037a6:	bd10      	pop	{r4, pc}

080037a8 <memcpy>:
 80037a8:	b510      	push	{r4, lr}
 80037aa:	1e43      	subs	r3, r0, #1
 80037ac:	440a      	add	r2, r1
 80037ae:	4291      	cmp	r1, r2
 80037b0:	d100      	bne.n	80037b4 <memcpy+0xc>
 80037b2:	bd10      	pop	{r4, pc}
 80037b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037bc:	e7f7      	b.n	80037ae <memcpy+0x6>

080037be <memmove>:
 80037be:	4288      	cmp	r0, r1
 80037c0:	b510      	push	{r4, lr}
 80037c2:	eb01 0302 	add.w	r3, r1, r2
 80037c6:	d807      	bhi.n	80037d8 <memmove+0x1a>
 80037c8:	1e42      	subs	r2, r0, #1
 80037ca:	4299      	cmp	r1, r3
 80037cc:	d00a      	beq.n	80037e4 <memmove+0x26>
 80037ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037d2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80037d6:	e7f8      	b.n	80037ca <memmove+0xc>
 80037d8:	4283      	cmp	r3, r0
 80037da:	d9f5      	bls.n	80037c8 <memmove+0xa>
 80037dc:	1881      	adds	r1, r0, r2
 80037de:	1ad2      	subs	r2, r2, r3
 80037e0:	42d3      	cmn	r3, r2
 80037e2:	d100      	bne.n	80037e6 <memmove+0x28>
 80037e4:	bd10      	pop	{r4, pc}
 80037e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037ea:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80037ee:	e7f7      	b.n	80037e0 <memmove+0x22>

080037f0 <_free_r>:
 80037f0:	b538      	push	{r3, r4, r5, lr}
 80037f2:	4605      	mov	r5, r0
 80037f4:	2900      	cmp	r1, #0
 80037f6:	d043      	beq.n	8003880 <_free_r+0x90>
 80037f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037fc:	1f0c      	subs	r4, r1, #4
 80037fe:	2b00      	cmp	r3, #0
 8003800:	bfb8      	it	lt
 8003802:	18e4      	addlt	r4, r4, r3
 8003804:	f000 f8d0 	bl	80039a8 <__malloc_lock>
 8003808:	4a1e      	ldr	r2, [pc, #120]	; (8003884 <_free_r+0x94>)
 800380a:	6813      	ldr	r3, [r2, #0]
 800380c:	4610      	mov	r0, r2
 800380e:	b933      	cbnz	r3, 800381e <_free_r+0x2e>
 8003810:	6063      	str	r3, [r4, #4]
 8003812:	6014      	str	r4, [r2, #0]
 8003814:	4628      	mov	r0, r5
 8003816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800381a:	f000 b8c6 	b.w	80039aa <__malloc_unlock>
 800381e:	42a3      	cmp	r3, r4
 8003820:	d90b      	bls.n	800383a <_free_r+0x4a>
 8003822:	6821      	ldr	r1, [r4, #0]
 8003824:	1862      	adds	r2, r4, r1
 8003826:	4293      	cmp	r3, r2
 8003828:	bf01      	itttt	eq
 800382a:	681a      	ldreq	r2, [r3, #0]
 800382c:	685b      	ldreq	r3, [r3, #4]
 800382e:	1852      	addeq	r2, r2, r1
 8003830:	6022      	streq	r2, [r4, #0]
 8003832:	6063      	str	r3, [r4, #4]
 8003834:	6004      	str	r4, [r0, #0]
 8003836:	e7ed      	b.n	8003814 <_free_r+0x24>
 8003838:	4613      	mov	r3, r2
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	b10a      	cbz	r2, 8003842 <_free_r+0x52>
 800383e:	42a2      	cmp	r2, r4
 8003840:	d9fa      	bls.n	8003838 <_free_r+0x48>
 8003842:	6819      	ldr	r1, [r3, #0]
 8003844:	1858      	adds	r0, r3, r1
 8003846:	42a0      	cmp	r0, r4
 8003848:	d10b      	bne.n	8003862 <_free_r+0x72>
 800384a:	6820      	ldr	r0, [r4, #0]
 800384c:	4401      	add	r1, r0
 800384e:	1858      	adds	r0, r3, r1
 8003850:	4282      	cmp	r2, r0
 8003852:	6019      	str	r1, [r3, #0]
 8003854:	d1de      	bne.n	8003814 <_free_r+0x24>
 8003856:	6810      	ldr	r0, [r2, #0]
 8003858:	6852      	ldr	r2, [r2, #4]
 800385a:	4401      	add	r1, r0
 800385c:	6019      	str	r1, [r3, #0]
 800385e:	605a      	str	r2, [r3, #4]
 8003860:	e7d8      	b.n	8003814 <_free_r+0x24>
 8003862:	d902      	bls.n	800386a <_free_r+0x7a>
 8003864:	230c      	movs	r3, #12
 8003866:	602b      	str	r3, [r5, #0]
 8003868:	e7d4      	b.n	8003814 <_free_r+0x24>
 800386a:	6820      	ldr	r0, [r4, #0]
 800386c:	1821      	adds	r1, r4, r0
 800386e:	428a      	cmp	r2, r1
 8003870:	bf01      	itttt	eq
 8003872:	6811      	ldreq	r1, [r2, #0]
 8003874:	6852      	ldreq	r2, [r2, #4]
 8003876:	1809      	addeq	r1, r1, r0
 8003878:	6021      	streq	r1, [r4, #0]
 800387a:	6062      	str	r2, [r4, #4]
 800387c:	605c      	str	r4, [r3, #4]
 800387e:	e7c9      	b.n	8003814 <_free_r+0x24>
 8003880:	bd38      	pop	{r3, r4, r5, pc}
 8003882:	bf00      	nop
 8003884:	200000f8 	.word	0x200000f8

08003888 <_malloc_r>:
 8003888:	b570      	push	{r4, r5, r6, lr}
 800388a:	1ccd      	adds	r5, r1, #3
 800388c:	f025 0503 	bic.w	r5, r5, #3
 8003890:	3508      	adds	r5, #8
 8003892:	2d0c      	cmp	r5, #12
 8003894:	bf38      	it	cc
 8003896:	250c      	movcc	r5, #12
 8003898:	2d00      	cmp	r5, #0
 800389a:	4606      	mov	r6, r0
 800389c:	db01      	blt.n	80038a2 <_malloc_r+0x1a>
 800389e:	42a9      	cmp	r1, r5
 80038a0:	d903      	bls.n	80038aa <_malloc_r+0x22>
 80038a2:	230c      	movs	r3, #12
 80038a4:	6033      	str	r3, [r6, #0]
 80038a6:	2000      	movs	r0, #0
 80038a8:	bd70      	pop	{r4, r5, r6, pc}
 80038aa:	f000 f87d 	bl	80039a8 <__malloc_lock>
 80038ae:	4a21      	ldr	r2, [pc, #132]	; (8003934 <_malloc_r+0xac>)
 80038b0:	6814      	ldr	r4, [r2, #0]
 80038b2:	4621      	mov	r1, r4
 80038b4:	b991      	cbnz	r1, 80038dc <_malloc_r+0x54>
 80038b6:	4c20      	ldr	r4, [pc, #128]	; (8003938 <_malloc_r+0xb0>)
 80038b8:	6823      	ldr	r3, [r4, #0]
 80038ba:	b91b      	cbnz	r3, 80038c4 <_malloc_r+0x3c>
 80038bc:	4630      	mov	r0, r6
 80038be:	f000 f863 	bl	8003988 <_sbrk_r>
 80038c2:	6020      	str	r0, [r4, #0]
 80038c4:	4629      	mov	r1, r5
 80038c6:	4630      	mov	r0, r6
 80038c8:	f000 f85e 	bl	8003988 <_sbrk_r>
 80038cc:	1c43      	adds	r3, r0, #1
 80038ce:	d124      	bne.n	800391a <_malloc_r+0x92>
 80038d0:	230c      	movs	r3, #12
 80038d2:	4630      	mov	r0, r6
 80038d4:	6033      	str	r3, [r6, #0]
 80038d6:	f000 f868 	bl	80039aa <__malloc_unlock>
 80038da:	e7e4      	b.n	80038a6 <_malloc_r+0x1e>
 80038dc:	680b      	ldr	r3, [r1, #0]
 80038de:	1b5b      	subs	r3, r3, r5
 80038e0:	d418      	bmi.n	8003914 <_malloc_r+0x8c>
 80038e2:	2b0b      	cmp	r3, #11
 80038e4:	d90f      	bls.n	8003906 <_malloc_r+0x7e>
 80038e6:	600b      	str	r3, [r1, #0]
 80038e8:	18cc      	adds	r4, r1, r3
 80038ea:	50cd      	str	r5, [r1, r3]
 80038ec:	4630      	mov	r0, r6
 80038ee:	f000 f85c 	bl	80039aa <__malloc_unlock>
 80038f2:	f104 000b 	add.w	r0, r4, #11
 80038f6:	1d23      	adds	r3, r4, #4
 80038f8:	f020 0007 	bic.w	r0, r0, #7
 80038fc:	1ac3      	subs	r3, r0, r3
 80038fe:	d0d3      	beq.n	80038a8 <_malloc_r+0x20>
 8003900:	425a      	negs	r2, r3
 8003902:	50e2      	str	r2, [r4, r3]
 8003904:	e7d0      	b.n	80038a8 <_malloc_r+0x20>
 8003906:	684b      	ldr	r3, [r1, #4]
 8003908:	428c      	cmp	r4, r1
 800390a:	bf16      	itet	ne
 800390c:	6063      	strne	r3, [r4, #4]
 800390e:	6013      	streq	r3, [r2, #0]
 8003910:	460c      	movne	r4, r1
 8003912:	e7eb      	b.n	80038ec <_malloc_r+0x64>
 8003914:	460c      	mov	r4, r1
 8003916:	6849      	ldr	r1, [r1, #4]
 8003918:	e7cc      	b.n	80038b4 <_malloc_r+0x2c>
 800391a:	1cc4      	adds	r4, r0, #3
 800391c:	f024 0403 	bic.w	r4, r4, #3
 8003920:	42a0      	cmp	r0, r4
 8003922:	d005      	beq.n	8003930 <_malloc_r+0xa8>
 8003924:	1a21      	subs	r1, r4, r0
 8003926:	4630      	mov	r0, r6
 8003928:	f000 f82e 	bl	8003988 <_sbrk_r>
 800392c:	3001      	adds	r0, #1
 800392e:	d0cf      	beq.n	80038d0 <_malloc_r+0x48>
 8003930:	6025      	str	r5, [r4, #0]
 8003932:	e7db      	b.n	80038ec <_malloc_r+0x64>
 8003934:	200000f8 	.word	0x200000f8
 8003938:	200000fc 	.word	0x200000fc

0800393c <_realloc_r>:
 800393c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393e:	4607      	mov	r7, r0
 8003940:	4614      	mov	r4, r2
 8003942:	460e      	mov	r6, r1
 8003944:	b921      	cbnz	r1, 8003950 <_realloc_r+0x14>
 8003946:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800394a:	4611      	mov	r1, r2
 800394c:	f7ff bf9c 	b.w	8003888 <_malloc_r>
 8003950:	b922      	cbnz	r2, 800395c <_realloc_r+0x20>
 8003952:	f7ff ff4d 	bl	80037f0 <_free_r>
 8003956:	4625      	mov	r5, r4
 8003958:	4628      	mov	r0, r5
 800395a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800395c:	f000 f826 	bl	80039ac <_malloc_usable_size_r>
 8003960:	42a0      	cmp	r0, r4
 8003962:	d20f      	bcs.n	8003984 <_realloc_r+0x48>
 8003964:	4621      	mov	r1, r4
 8003966:	4638      	mov	r0, r7
 8003968:	f7ff ff8e 	bl	8003888 <_malloc_r>
 800396c:	4605      	mov	r5, r0
 800396e:	2800      	cmp	r0, #0
 8003970:	d0f2      	beq.n	8003958 <_realloc_r+0x1c>
 8003972:	4631      	mov	r1, r6
 8003974:	4622      	mov	r2, r4
 8003976:	f7ff ff17 	bl	80037a8 <memcpy>
 800397a:	4631      	mov	r1, r6
 800397c:	4638      	mov	r0, r7
 800397e:	f7ff ff37 	bl	80037f0 <_free_r>
 8003982:	e7e9      	b.n	8003958 <_realloc_r+0x1c>
 8003984:	4635      	mov	r5, r6
 8003986:	e7e7      	b.n	8003958 <_realloc_r+0x1c>

08003988 <_sbrk_r>:
 8003988:	b538      	push	{r3, r4, r5, lr}
 800398a:	2300      	movs	r3, #0
 800398c:	4c05      	ldr	r4, [pc, #20]	; (80039a4 <_sbrk_r+0x1c>)
 800398e:	4605      	mov	r5, r0
 8003990:	4608      	mov	r0, r1
 8003992:	6023      	str	r3, [r4, #0]
 8003994:	f7fd f974 	bl	8000c80 <_sbrk>
 8003998:	1c43      	adds	r3, r0, #1
 800399a:	d102      	bne.n	80039a2 <_sbrk_r+0x1a>
 800399c:	6823      	ldr	r3, [r4, #0]
 800399e:	b103      	cbz	r3, 80039a2 <_sbrk_r+0x1a>
 80039a0:	602b      	str	r3, [r5, #0]
 80039a2:	bd38      	pop	{r3, r4, r5, pc}
 80039a4:	200001e0 	.word	0x200001e0

080039a8 <__malloc_lock>:
 80039a8:	4770      	bx	lr

080039aa <__malloc_unlock>:
 80039aa:	4770      	bx	lr

080039ac <_malloc_usable_size_r>:
 80039ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039b0:	1f18      	subs	r0, r3, #4
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	bfbc      	itt	lt
 80039b6:	580b      	ldrlt	r3, [r1, r0]
 80039b8:	18c0      	addlt	r0, r0, r3
 80039ba:	4770      	bx	lr

080039bc <_init>:
 80039bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039be:	bf00      	nop
 80039c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039c2:	bc08      	pop	{r3}
 80039c4:	469e      	mov	lr, r3
 80039c6:	4770      	bx	lr

080039c8 <_fini>:
 80039c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ca:	bf00      	nop
 80039cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ce:	bc08      	pop	{r3}
 80039d0:	469e      	mov	lr, r3
 80039d2:	4770      	bx	lr
